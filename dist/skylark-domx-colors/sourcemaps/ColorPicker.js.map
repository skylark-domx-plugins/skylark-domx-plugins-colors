{"version":3,"sources":["ColorPicker.js"],"names":["define","langx","browser","noder","finder","$","eventer","styler","plugins","Color","colors","helper","Indicator","ColorPicker","Plugin","inherit","klassName","pluginName","options","selectors","dragger","dragHelper","slider","slideHelper","alphaSliderInner","alphaSlider","alphaSlideHelper","textInput","initialColorContainer","cancelButton","clearButton","chooseButton","draggingClass","texts","cancelText","chooseText","clearText","noColorSelectedText","states","showInput","allowEmpty","showButtons","showInitial","showAlpha","color","_drawInitial","opts","this","stating","initial","_initialColor","current","get","$initialColorContainer","html","paletteTemplate","_updateHelperLocations","s","_currentSaturation","v","_currentValue","_isEmpty","$alphaSlideHelper","hide","$slideHelper","$dragHelper","show","dragX","_dragWidth","dragY","_dragHeight","Math","max","_dragHelperHeight","min","css","top","left","alphaX","_currentAlpha","_alphaWidth","_alphaSlideHelperWidth","slideY","_slideHeight","_slideHelperHeight","_updateOriginalInput","fireCallback","displayColor","equals","_colorOnShow","toString","_currentPreferredFormat","_addColorToSelectionPalette","_isInput","$el","val","_updateUI","$dragger","width","height","_slideWidth","$slider","$alphaSlider","$textInput","removeClass","flatColor","parse","h","_currentHue","toHexString","format","realColor","realHex","toRgbString","rgb","toRgb","a","realAlpha","gradient","isIE","$alphaSliderInner","toFilter","gradientType","_drawPalette","_applyOptions","_states","_applyStates","reflow","_construct","elm","overrided","initialColor","theme","find","$cancelButton","$clearButton","$chooseButton","preferredFormat","_init","self","dragStart","_isDragging","addClass","_shiftMovementDirection","dragStop","move","setFromTextInput","value","_allowEmpty","tiny","isValid","set","change","on","setTimeout","keydown","e","keyCode","text","listenTo","stop","revert","attr","flat","plugin","onmove","shiftKey","round","onstart","onstop","parseFloat","oldDragX","oldDragY","furtherFromX","abs","setSaturation","setValue","paletteEvent","ignore","data","target","closest","hideAfterPaletteSelect","self_updateOriginalInput","ignoreFormatChange","newColor","newHsv","toHsv","getFormat","toggleClass","name","undefined","register"],"mappings":"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","file":"../ColorPicker.js","sourcesContent":["define([\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-browser\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-finder\",\r\n    \"skylark-domx-query\",\r\n    \"skylark-domx-eventer\",\r\n    \"skylark-domx-styler\",\r\n    \"skylark-domx-plugins\",\r\n    \"skylark-graphics-color\",\r\n    \"./colors\",\r\n    \"./helper\",\r\n    \"./Indicator\"\r\n],function(langx, browser, noder, finder, $,eventer, styler,plugins,Color,colors,helper,Indicator) {\r\n    \"use strict\";\r\n\r\n    var ColorPicker = plugins.Plugin.inherit({\r\n        klassName : \"ColorPicker\",\r\n\r\n        pluginName : \"domx.colors.picker\",\r\n\r\n        options : {\r\n            selectors  : {\r\n                dragger : \".sp-color\",\r\n                dragHelper : \".sp-dragger\",\r\n                slider : \".sp-hue\",\r\n                slideHelper : \".sp-slider\",\r\n                alphaSliderInner : \".sp-alpha-inner\",\r\n                alphaSlider : \".sp-alpha\",\r\n                alphaSlideHelper : \".sp-alpha-handle\",\r\n                textInput : \".sp-input\",\r\n                initialColorContainer : \".sp-initial\",\r\n                cancelButton : \".sp-cancel\",\r\n                clearButton : \".sp-clear\",\r\n                chooseButton : \".sp-choose\"\r\n            },\r\n\r\n            draggingClass : \"sp-dragging\",\r\n\r\n            texts : {\r\n                cancelText: \"cancel\",\r\n                chooseText: \"choose\",\r\n                clearText: \"Clear Color Selection\",\r\n                noColorSelectedText: \"No Color Selected\"\r\n            },\r\n\r\n            states : {\r\n                showInput: false,\r\n                allowEmpty: false,\r\n                showButtons: true,\r\n                showInitial: false,\r\n                showAlpha: false\r\n            },\r\n\r\n            // Options\r\n            color: false\r\n        },\r\n        \r\n        _drawInitial : function () {\r\n            var opts = this.options;\r\n            if (this.stating(\"showInitial\")) {\r\n                var initial = this._initialColor;\r\n                var current = this.get();\r\n                this.$initialColorContainer.html(\r\n                    helper.paletteTemplate([initial, current], current, \"sp-palette-row-initial\", opts)\r\n                );\r\n            }\r\n        },\r\n\r\n        _updateHelperLocations : function () {\r\n            var s = this._currentSaturation;\r\n            var v = this._currentValue;\r\n\r\n            if(this.stating(\"allowEmpty\") && this._isEmpty) {\r\n                //if selected color is empty, hide the helpers\r\n                this.$alphaSlideHelper.hide();\r\n                this.$slideHelper.hide();\r\n                this.$dragHelper.hide();\r\n            }\r\n            else {\r\n                //make sure helpers are visible\r\n                this.$alphaSlideHelper.show();\r\n                this.$slideHelper.show();\r\n                this.$dragHelper.show();\r\n\r\n                // Where to show the little circle in that displays your current selected color\r\n                var dragX = s * this._dragWidth;\r\n                var dragY = this._dragHeight - (v * this._dragHeight);\r\n                dragX = Math.max(\r\n                    -this._dragHelperHeight,\r\n                    Math.min(this._dragWidth - this._dragHelperHeight, dragX - this._dragHelperHeight)\r\n                );\r\n                dragY = Math.max(\r\n                    -this._dragHelperHeight,\r\n                    Math.min(this._dragHeight - this._dragHelperHeight, dragY - this._dragHelperHeight)\r\n                );\r\n                this.$dragHelper.css({\r\n                    \"top\": dragY + \"px\",\r\n                    \"left\": dragX + \"px\"\r\n                });\r\n\r\n                var alphaX = this._currentAlpha * this._alphaWidth;\r\n                this.$alphaSlideHelper.css({\r\n                    \"left\": (alphaX - (this._alphaSlideHelperWidth / 2)) + \"px\"\r\n                });\r\n\r\n                // Where to show the bar that displays your current selected hue\r\n                var slideY = (this._currentHue) * this._slideHeight;\r\n                this.$slideHelper.css({\r\n                    \"top\": (slideY - this._slideHelperHeight) + \"px\"\r\n                });\r\n            }\r\n        },\r\n\r\n        _updateOriginalInput : function (fireCallback) {\r\n            var color = this.get(),\r\n                displayColor = '',\r\n                hasChanged = !Color.equals(color, this._colorOnShow);\r\n\r\n            if (color) {\r\n                displayColor = color.toString(this._currentPreferredFormat);\r\n                // Update the selection palette with the current color\r\n                this._addColorToSelectionPalette(color);\r\n            }\r\n\r\n            if (this._isInput) {\r\n                this.$el.val(displayColor);\r\n            }\r\n\r\n            if (fireCallback && hasChanged) {\r\n                //callbacks.change(color);\r\n                //this.$el.trigger('change', [ color ]);\r\n            }\r\n        },\r\n\r\n        _updateUI : function () {\r\n            var opts = this.options;\r\n\r\n            this._dragWidth = this.$dragger.width();\r\n            this._dragHeight = this.$dragger.height();\r\n            this._dragHelperHeight = this.$dragHelper.height();\r\n            this._slideWidth = this.$slider.width();\r\n            this._slideHeight = this.$slider.height();\r\n            this._slideHelperHeight = this.$slideHelper.height();\r\n            this._alphaWidth = this.$alphaSlider.width();\r\n            this._alphaSlideHelperWidth = this.$alphaSlideHelper.width();\r\n            \r\n            this.$textInput.removeClass(\"sp-validation-error\");\r\n\r\n            this._updateHelperLocations();\r\n\r\n            // Update dragger background color (gradients take care of saturation and value).\r\n            //var flatColor = Color.fromRatio({ h: currentHue, s: 1, v: 1 });\r\n            var flatColor = Color.parse({ \r\n                h: this._currentHue * 360, \r\n                s: 1, \r\n                v: 1 \r\n            });\r\n            this.$dragger.css(\"background-color\", flatColor.toHexString());\r\n\r\n            // Get a format that alpha will be included in (hex and names ignore alpha)\r\n            var format = this._currentPreferredFormat;\r\n            if (this._currentAlpha < 1 && !(this._currentAlpha === 0 && format === \"name\")) {\r\n                if (format === \"hex\" || format === \"hex3\" || format === \"hex6\" || format === \"name\") {\r\n                    format = \"rgb\";\r\n                }\r\n            }\r\n\r\n            var realColor = this.get({ format: format }),\r\n                displayColor = '';\r\n\r\n            if (!realColor && this.stating(\"allowEmpty\")) {\r\n            }\r\n            else {\r\n                var realHex = realColor.toHexString(),\r\n                    realRgb = realColor.toRgbString();\r\n\r\n                if (this.stating(\"showAlpha\")) {\r\n                    var rgb = realColor.toRgb();\r\n                    rgb.a = 0;\r\n                    var realAlpha = Color.parse(rgb).toRgbString();\r\n                    var gradient = \"linear-gradient(left, \" + realAlpha + \", \" + realHex + \")\";\r\n\r\n                    if (browser.isIE) {\r\n                        this.$alphaSliderInner.css(\"filter\", Color.parse(realAlpha).toFilter({ gradientType: 1 }, realHex));\r\n                    }\r\n                    else {\r\n                        this.$alphaSliderInner.css(\"background\", \"-webkit-\" + gradient);\r\n                        this.$alphaSliderInner.css(\"background\", \"-moz-\" + gradient);\r\n                        this.$alphaSliderInner.css(\"background\", \"-ms-\" + gradient);\r\n                        // Use current syntax gradient on unprefixed property.\r\n                        this.$alphaSliderInner.css(\"background\",\r\n                            \"linear-gradient(to right, \" + realAlpha + \", \" + realHex + \")\");\r\n                    }\r\n                }\r\n\r\n                displayColor = realColor.toString(format);\r\n            }\r\n\r\n            // Update the text entry input as it changes happen\r\n            if (this.stating(\"showInput\")) {\r\n                this.$textInput.val(displayColor);\r\n            }\r\n\r\n            if (this.stating(\"showPalette\")) {\r\n                this._drawPalette();\r\n            }\r\n\r\n            this._drawInitial();\r\n        },\r\n\r\n\r\n        _applyOptions : function () {\r\n            var opts = this.options;\r\n\r\n            this._states = {\r\n                allowEmpty : opts.states.allowEmpty,\r\n                showInput : opts.states.showInput,\r\n                showAlpha : opts.states.showAlpha,\r\n                showButtons : opts.states.showButtons,\r\n                showInitial : opts.states.showInitial\r\n            };\r\n\r\n\r\n           this._applyStates();\r\n\r\n           this.reflow();\r\n        },\r\n\r\n         _construct: function(elm, options) {\r\n            this.overrided(elm,options);\r\n\r\n            var $el = this.$el = this.$();\r\n\r\n            var opts = this.options,\r\n                theme = opts.theme;\r\n\r\n\r\n\r\n            var                \r\n                dragger = this.$dragger = $el.find(opts.selectors.dragger),\r\n                dragHelper = this.$dragHelper = $el.find(opts.selectors.dragHelper),\r\n                slider = this.$slider = $el.find(opts.selectors.slider),\r\n                slideHelper = this.$slideHelper =  $el.find(opts.selectors.slideHelper),\r\n                alphaSliderInner = this.$alphaSliderInner = $el.find(opts.selectors.alphaSliderInner),\r\n                alphaSlider = this.$alphaSlider = $el.find(opts.selectors.alphaSlider),\r\n                alphaSlideHelper = this.$alphaSlideHelper = $el.find(opts.selectors.alphaSlideHelper),\r\n                textInput = this.$textInput = $el.find(opts.selectors.textInput),\r\n                initialColorContainer = this.$initialColorContainer = $el.find(opts.selectors.initialColorContainer),\r\n                cancelButton = this.$cancelButton = $el.find(opts.selectors.cancelButton),\r\n                clearButton = this.$clearButton = $el.find(opts.selectors.clearButton),\r\n                chooseButton = this.$chooseButton = $el.find(opts.selectors.chooseButton),\r\n                initialColor = this._initialColor =  opts.color,\r\n                currentPreferredFormat = this._currentPreferredFormat = opts.preferredFormat,\r\n                isEmpty = this._isEmpty =  !initialColor;\r\n\r\n\r\n            this._init();\r\n\r\n        },\r\n\r\n        _init : function () {\r\n            var self = this,\r\n                opts = this.options;\r\n             function dragStart() {\r\n                if (self._dragHeight <= 0 || self._dragWidth <= 0 || self._slideHeight <= 0) {\r\n                    self.reflow();\r\n                }\r\n                self._isDragging = true;\r\n                self.$el.addClass(self.options.draggingClass);\r\n                self._shiftMovementDirection = null;\r\n                //this.$el.trigger('dragstart.ColorPicker', [ get() ]);\r\n            }\r\n\r\n            function dragStop() {\r\n                self._isDragging = false;\r\n                self.$el.removeClass(self.options.draggingClass);\r\n                //this.$el.trigger('dragstop.ColorPicker', [ get() ]);\r\n            }           \r\n\r\n            function move() {\r\n                self._updateUI();\r\n\r\n                //callbacks.move(get());\r\n                //this.$el.trigger('move.ColorPicker', [ get() ]);\r\n            }\r\n\r\n            this._applyOptions();\r\n\r\n            function setFromTextInput() {\r\n                var value = textInput.val();\r\n\r\n                if ((value === null || value === \"\") && self._allowEmpty) {\r\n                    self.set(null);\r\n                    move();\r\n                    self._updateOriginalInput();\r\n                }\r\n                else {\r\n                    var tiny = Color.parse(value);\r\n                    if (tiny.isValid()) {\r\n                        self.set(tiny);\r\n                        move();\r\n                        self._updateOriginalInput();\r\n                    }\r\n                    else {\r\n                        self.$textInput.addClass(\"sp-validation-error\");\r\n                    }\r\n                }\r\n            }\r\n            this.$textInput.change(setFromTextInput);\r\n            this.$textInput.on(\"paste\", function () {\r\n                setTimeout(setFromTextInput, 1);\r\n            });\r\n            this.$textInput.keydown(function (e) { if (e.keyCode == 13) { setFromTextInput(); } });\r\n\r\n            this.$cancelButton.text(opts.texts.cancelText);\r\n            \r\n            this.listenTo(this.$cancelButton,\"click\", function (e) {\r\n                eventer.stop(e);\r\n                self.revert();\r\n                self.hide();\r\n            });\r\n\r\n            this.$clearButton.attr(\"title\", opts.texts.clearText);\r\n            this.listenTo(this.$clearButton,\"click\", function (e) {\r\n                //e.stopPropagation();\r\n                //e.preventDefault();\r\n                eventer.stop(e);\r\n                self._isEmpty = true;\r\n                move();\r\n\r\n                if(opts.flat) {\r\n                    //for the flat style, this is a change event\r\n                    self._updateOriginalInput(true);\r\n                }\r\n            });\r\n\r\n            this.$chooseButton.text(opts.texts.chooseText);\r\n            this.listenTo(this.$chooseButton,\"click\", function (e) {\r\n                eventer.stop(e);\r\n\r\n                self._updateOriginalInput(true);\r\n                self.hide();\r\n            });\r\n          \r\n            this.$alphaSlider.plugin(\"domx.indicator\", {\r\n                \"onmove\" :   function (dragX, dragY, e) {\r\n                    self._currentAlpha = (dragX / self._alphaWidth);\r\n                    self._isEmpty = false;\r\n                    if (e.shiftKey) {\r\n                        self._currentAlpha = Math.round(self._currentAlpha * 10) / 10;\r\n                    }\r\n\r\n                    move();\r\n                }, \r\n                \"onstart\" : dragStart, \r\n                \"onstop\" :dragStop\r\n            });\r\n\r\n            this.$slider.plugin(\"domx.indicator\", {\r\n                \"onmove\" :   function (dragX, dragY, e) {\r\n                    self._currentHue = parseFloat(dragY / self._slideHeight);\r\n                    self._isEmpty = false;\r\n                    if (!self.stating(\"showAlpha\")) {\r\n                        self._currentAlpha = 1;\r\n                    }\r\n                    move();\r\n                }, \r\n                \"onstart\" : dragStart, \r\n                \"onstop\" :dragStop\r\n            });\r\n\r\n            this.$dragger.plugin(\"domx.indicator\", {\r\n                \"onmove\" :   function (dragX, dragY, e) {\r\n\r\n                    // shift+drag should snap the movement to either the x or y axis.\r\n                    if (!e.shiftKey) {\r\n                        self._shiftMovementDirection = null;\r\n                    }\r\n                    else if (!self._shiftMovementDirection) {\r\n                        var oldDragX = self._currentSaturation * self._dragWidth;\r\n                        var oldDragY = self._dragHeight - (self._currentValue * self._dragHeight);\r\n                        var furtherFromX = Math.abs(dragX - oldDragX) > Math.abs(dragY - oldDragY);\r\n\r\n                        self._shiftMovementDirection = furtherFromX ? \"x\" : \"y\";\r\n                    }\r\n\r\n                    var setSaturation = !self._shiftMovementDirection || self._shiftMovementDirection === \"x\";\r\n                    var setValue = !self._shiftMovementDirection || self._shiftMovementDirection === \"y\";\r\n\r\n                    if (setSaturation) {\r\n                        self._currentSaturation = parseFloat(dragX / self._dragWidth);\r\n                    }\r\n                    if (setValue) {\r\n                        self._currentValue = parseFloat((self._dragHeight - dragY) / self._dragHeight);\r\n                    }\r\n\r\n                    self._isEmpty = false;\r\n                    if (!self.stating(\"showAlpha\")) {\r\n                        self._currentAlpha = 1;\r\n                    }\r\n\r\n                    move();\r\n                }, \r\n                \"onstart\" : dragStart, \r\n                \"onstop\" :dragStop\r\n            });\r\n\r\n            if (!!this._initialColor) {\r\n                this.set(this._initialColor);\r\n\r\n                // In case color was black - update the preview UI and set the format\r\n                // since the set function will not run (default color is black).\r\n                self._updateUI();\r\n                this._currentPreferredFormat = opts.preferredFormat || Color.parse(this._initialColor).format;\r\n            } else {\r\n                this._updateUI();\r\n            }\r\n\r\n            function paletteElementClick(e) {\r\n                if (e.data && e.data.ignore) {\r\n                    self.set($(e.target).closest(\".sp-thumb-el\").data(\"color\"));\r\n                    move();\r\n                }\r\n                else {\r\n                    self.set($(e.target).closest(\".sp-thumb-el\").data(\"color\"));\r\n                    move();\r\n\r\n                    // If the picker is going to close immediately, a palette selection\r\n                    // is a change.  Otherwise, it's a move only.\r\n                    if (opts.hideAfterPaletteSelect) {\r\n                        self_updateOriginalInput(true);\r\n                        self.hide();\r\n                    } else {\r\n                        self._updateOriginalInput();\r\n                    }\r\n                }\r\n\r\n                return false;\r\n            }\r\n\r\n            var paletteEvent = browser.isIE ? \"mousedown.ColorPicker\" : \"click.ColorPicker touchstart.ColorPicker\";\r\n            this.$initialColorContainer.on(paletteEvent, \".sp-thumb-el:nth-child(1)\", { ignore: true }, paletteElementClick);\r\n        },\r\n\r\n        revert :  function () {\r\n            this.set(this._initialColor, true);\r\n            this._updateOriginalInput(true);\r\n        },\r\n\r\n\r\n        get : function (opts) {\r\n            opts = opts || { };\r\n\r\n            if (this._allowEmpty && this._isEmpty) {\r\n                return null;\r\n            }\r\n\r\n            /*\r\n            return fromRatio({\r\n                h: currentHue,\r\n                s: currentSaturation,\r\n                v: currentValue,\r\n                a: Math.round(currentAlpha * 1000) / 1000\r\n            }, { format: opts.format || currentPreferredFormat });\r\n            */\r\n            return Color.parse({\r\n                h: this._currentHue * 360,\r\n                s: this._currentSaturation,\r\n                v: this._currentValue,\r\n                a: Math.round(this._currentAlpha * 1000) / 1000\r\n            });\r\n        },\r\n\r\n\r\n        set : function (color, ignoreFormatChange) {\r\n            var opts = this.options;\r\n\r\n            if (Color.equals(color, this.get())) {\r\n                // Update UI just in case a validation error needs\r\n                // to be cleared.\r\n                this._updateUI();\r\n                return;\r\n            }\r\n\r\n            var newColor, newHsv;\r\n            if (!color && this.stating(\"allowEmpty\")) {\r\n                this._isEmpty = true;\r\n            } else {\r\n                this._isEmpty = false;\r\n                newColor = Color.parse(color);\r\n                newHsv = newColor.toHsv();\r\n\r\n                this._currentHue = (newHsv.h % 360) / 360;\r\n                this._currentSaturation = newHsv.s;\r\n                this._currentValue = newHsv.v;\r\n                this._currentAlpha = newHsv.a;\r\n            }\r\n            this._updateUI();\r\n\r\n            if (newColor && newColor.isValid() && !ignoreFormatChange) {\r\n                this._currentPreferredFormat = opts.preferredFormat || newColor.getFormat();\r\n            }\r\n        },\r\n\r\n        _applyStates : function() {\r\n           var states = this._states ;\r\n\r\n            this.$el.toggleClass(\"sp-input-disabled\", !states.showInput)\r\n                        .toggleClass(\"sp-clear-enabled\", !!states.allowEmpty)\r\n                        .toggleClass(\"sp-alpha-enabled\", states.showAlpha)\r\n                        .toggleClass(\"sp-buttons-disabled\", !states.showButtons)\r\n                        .toggleClass(\"sp-initial-disabled\", !states.showInitial);\r\n\r\n            if (!states.allowEmpty) {\r\n                this.$clearButton.hide();\r\n            }\r\n\r\n            this._dragWidth = this.$dragger.width();\r\n            this._dragHeight = this.$dragger.height();\r\n            this._dragHelperHeight = this.$dragHelper.height();\r\n            this._slideWidth = this.$slider.width();\r\n            this._slideHeight = this.$slider.height();\r\n            this._slideHelperHeight = this.$slideHelper.height();\r\n            this._alphaWidth = this.$alphaSlider.width();\r\n            this._alphaSlideHelperWidth = this.$alphaSlideHelper.width();\r\n        },\r\n\r\n        stating : function(name,value) {\r\n            if (value !== undefined) {\r\n                this._states[name] = value;\r\n                this._applyStates();\r\n            } else {\r\n                return this._states[name];\r\n            }\r\n        },\r\n\r\n        reflow : function () {\r\n\r\n            this._updateHelperLocations();\r\n\r\n        }\r\n\r\n    });\r\n\r\n\r\n    plugins.register(ColorPicker);\r\n\r\n\r\n    return colors.ColorPicker = ColorPicker;\r\n\r\n});"]}