{"version":3,"sources":["ColorPane.js"],"names":["define","skylark","langx","browser","noder","finder","$","eventer","styler","fx","plugins","popups","Color","colors","Indicator","noop","replaceInput","join","markup","paletteTemplate","p","color","className","opts","html","i","length","current","tiny","parse","c","toHsl","l","equals","formattedString","toString","preferredFormat","swatchStyle","toRgbString","push","append","attr","texts","noColorSelectedText","ColorPane","Plugin","inherit","klassName","pluginName","options","selectors","pickerContainer","toggleButton","paletteContainer","dragger","dragHelper","slider","slideHelper","alphaSliderInner","alphaSlider","alphaSlideHelper","textInput","initialColorContainer","cancelButton","clearButton","chooseButton","draggingClass","cancelText","chooseText","togglePaletteMoreText","togglePaletteLessText","clearText","states","showPalette","showPaletteOnly","togglePaletteOnly","showSelectionPalette","showInput","allowEmpty","showButtons","showInitial","showAlpha","flat","clickoutFiresChange","hideAfterPaletteSelect","appendTo","maxSelectionSize","containerClassName","replacerClassName","theme","palette","selectionPalette","disabled","offset","_addColorToSelectionPalette","this","stating","rgb","_paletteLookup","inArray","_selectionPalette","_maxSelectionSize","shift","getUniqueSelectionPalette","unique","reverse","slice","_drawPalette","currentColor","get","map","_paletteArray","$paletteContainer","_drawInitial","initial","_colorOnShow","$initialColorContainer","_updateHelperLocations","s","_currentSaturation","v","_currentValue","_isEmpty","$alphaSlideHelper","hide","$slideHelper","$dragHelper","show","dragX","_dragWidth","dragY","_dragHeight","Math","max","_dragHelperHeight","min","css","top","left","alphaX","_currentAlpha","_alphaWidth","_alphaSlideHelperWidth","slideY","_slideHeight","_slideHelperHeight","_updateOriginalInput","fireCallback","displayColor","_currentPreferredFormat","_isInput","$el","val","_updateUI","$dragger","width","height","_slideWidth","$slider","$alphaSlider","$textInput","removeClass","flatColor","h","_currentHue","toHexString","format","realColor","$previewElement","addClass","realHex","realRgb","toRgb","a","realAlpha","gradient","isIE","$alphaSliderInner","toFilter","gradientType","_applyOptions","_states","_palette","paletteArray","isArray","paletteLookup","j","$container","toggleClass","_applyStates","reflow","_construct","elm","overrided","container","ownerDocument","isInput","$pickerContainer","find","$cancelButton","$clearButton","$chooseButton","$toggleButton","is","shouldReplace","inputTypeColorSupport","_shouldReplace","replacer","$replacer","initialColor","$offsetElement","_initialColor","_init","self","dragStart","_isDragging","_shiftMovementDirection","dragStop","move","after","parent","setFromTextInput","value","_allowEmpty","isValid","set","paletteElementClick","e","data","ignore","target","closest","self_updateOriginalInput","listenTo","toggle","stopPropagation","preventDefault","change","on","setTimeout","keydown","keyCode","text","stop","revert","plugin","onmove","shiftKey","round","onstart","onstop","parseFloat","oldDragX","oldDragY","furtherFromX","abs","setSaturation","setValue","paletteEvent","ignoreFormatChange","newColor","newHsv","toHsv","getFormat","option","outerWidth","name","undefined","calcOffset","_visible","_flat","destroy","off","remove","register","localization"],"mappings":"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","file":"../ColorPane.js","sourcesContent":["define([\r\n   \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-browser\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-finder\",\r\n    \"skylark-domx-query\",\r\n    \"skylark-domx-eventer\",\r\n    \"skylark-domx-styler\",\r\n    \"skylark-domx-fx\",\r\n    \"skylark-domx-plugins\",\r\n    \"skylark-domx-popups\",\r\n    \"skylark-graphics-color\",\r\n    \"./colors\",\r\n    \"./Indicator\"\r\n],function(skylark, langx, browser, noder, finder, $,eventer, styler,fx,plugins,popups,Color,colors,Indicator) {\r\n    \"use strict\";\r\n\r\n    var noop = langx.noop;\r\n\r\n    var pickers = [],\r\n    replaceInput = [\r\n        \"<div class='sp-replacer'>\",\r\n            \"<div class='sp-preview'><div class='sp-preview-inner'></div></div>\",\r\n            \"<div class='sp-dd'>&#9660;</div>\",\r\n        \"</div>\"\r\n    ].join(''),\r\n    \r\n    markup = (function () {\r\n        return [\r\n            \"<div class='sp-container sp-hidden'>\",\r\n                \"<div class='sp-palette-container'>\",\r\n                    \"<div class='sp-palette sp-thumb sp-cf'></div>\",\r\n                    \"<div class='sp-palette-button-container sp-cf'>\",\r\n                        \"<button type='button' class='sp-palette-toggle'></button>\",\r\n                    \"</div>\",\r\n                \"</div>\",\r\n                \"<div class='sp-picker-container'>\",\r\n                    \"<div class='sp-top sp-cf'>\",\r\n                        \"<div class='sp-fill'></div>\",\r\n                        \"<div class='sp-top-inner'>\",\r\n                            \"<div class='sp-color'>\",\r\n                                \"<div class='sp-sat'>\",\r\n                                    \"<div class='sp-val'>\",\r\n                                        \"<div class='sp-dragger'></div>\",\r\n                                    \"</div>\",\r\n                                \"</div>\",\r\n                            \"</div>\",\r\n                            \"<div class='sp-clear sp-clear-display'>\",\r\n                            \"</div>\",\r\n                            \"<div class='sp-hue'>\",\r\n                                \"<div class='sp-slider'></div>\",\r\n                            \"</div>\",\r\n                        \"</div>\",\r\n                        \"<div class='sp-alpha'><div class='sp-alpha-inner'><div class='sp-alpha-handle'></div></div></div>\",\r\n                    \"</div>\",\r\n                    \"<div class='sp-input-container sp-cf'>\",\r\n                        \"<input class='sp-input' type='text' spellcheck='false'  />\",\r\n                    \"</div>\",\r\n                    \"<div class='sp-initial sp-thumb sp-cf'></div>\",\r\n                    \"<div class='sp-button-container sp-cf'>\",\r\n                        \"<a class='sp-cancel' href='#'></a>\",\r\n                        \"<button type='button' class='sp-choose'></button>\",\r\n                    \"</div>\",\r\n                \"</div>\",\r\n            \"</div>\"\r\n        ].join(\"\");\r\n    })();\r\n\r\n    function paletteTemplate (p, color, className, opts) {\r\n        var html = [];\r\n        for (var i = 0; i < p.length; i++) {\r\n            var current = p[i];\r\n            if(current) {\r\n                var tiny = Color.parse(current);\r\n                var c = tiny.toHsl().l < 0.5 ? \"sp-thumb-el sp-thumb-dark\" : \"sp-thumb-el sp-thumb-light\";\r\n                c += (Color.equals(color, current)) ? \" sp-thumb-active\" : \"\";\r\n                var formattedString = tiny.toString(opts.preferredFormat || \"rgb\");\r\n                var swatchStyle = \"background-color:\" + tiny.toRgbString();\r\n                html.push('<span title=\"' + formattedString + '\" data-color=\"' + tiny.toRgbString() + '\" class=\"' + c + '\"><span class=\"sp-thumb-inner\" style=\"' + swatchStyle + ';\" /></span>');\r\n            } else {\r\n                var cls = 'sp-clear-display';\r\n                html.push($('<div />')\r\n                    .append($('<span data-color=\"\" style=\"background-color:transparent;\" class=\"' + cls + '\"></span>')\r\n                        .attr('title', opts.texts.noColorSelectedText)\r\n                    )\r\n                    .html()\r\n                );\r\n            }\r\n        }\r\n        return \"<div class='sp-cf \" + className + \"'>\" + html.join('') + \"</div>\";\r\n    }\r\n\r\n\r\n    var ColorPane = plugins.Plugin.inherit({\r\n        klassName : \"ColorPane\",\r\n\r\n        pluginName : \"domx.colors.pane\",\r\n\r\n        options : {\r\n            selectors  : {\r\n                pickerContainer : \".sp-picker-container\",\r\n                toggleButton : \".sp-palette-toggle\",\r\n                paletteContainer : \".sp-palette\",\r\n                dragger : \".sp-color\",\r\n                dragHelper : \".sp-dragger\",\r\n                slider : \".sp-hue\",\r\n                slideHelper : \".sp-slider\",\r\n                alphaSliderInner : \".sp-alpha-inner\",\r\n                alphaSlider : \".sp-alpha\",\r\n                alphaSlideHelper : \".sp-alpha-handle\",\r\n                textInput : \".sp-input\",\r\n                initialColorContainer : \".sp-initial\",\r\n                cancelButton : \".sp-cancel\",\r\n                clearButton : \".sp-clear\",\r\n                chooseButton : \".sp-choose\"\r\n            },\r\n\r\n            draggingClass : \"sp-dragging\",\r\n           \r\n\r\n            texts : {\r\n                cancelText: \"cancel\",\r\n                chooseText: \"choose\",\r\n                togglePaletteMoreText: \"more\",\r\n                togglePaletteLessText: \"less\",\r\n                clearText: \"Clear Color Selection\",\r\n                noColorSelectedText: \"No Color Selected\"\r\n            },\r\n\r\n            states : {\r\n                showPalette: false,\r\n                showPaletteOnly: false,\r\n                togglePaletteOnly: false,\r\n                showSelectionPalette: true,\r\n                showInput: false,\r\n                allowEmpty: false,\r\n                showButtons: true,\r\n                showInitial: false,\r\n                showAlpha: false\r\n            },\r\n\r\n\r\n            // Options\r\n            color: false,\r\n            flat: false,\r\n            clickoutFiresChange: true,\r\n            hideAfterPaletteSelect: false,\r\n            appendTo: \"body\",\r\n            maxSelectionSize: 7,\r\n            preferredFormat: false,\r\n            containerClassName: \"\",\r\n            replacerClassName: \"\",\r\n            theme: \"sp-light\",\r\n            palette: [\r\n                [\"#ffffff\", \"#000000\", \"#ff0000\", \"#ff8000\", \"#ffff00\", \"#008000\", \"#0000ff\", \"#4b0082\", \"#9400d3\"]\r\n            ],\r\n            selectionPalette: [],\r\n            disabled: false,\r\n            offset: null\r\n\r\n        },\r\n\r\n        _addColorToSelectionPalette : function (color) {\r\n            if (this.stating(\"showSelectionPalette\")) {\r\n                var rgb = Color.parse(color).toRgbString();\r\n                if (!this._paletteLookup[rgb] && langx.inArray(rgb, this._selectionPalette) === -1) {\r\n                    this._selectionPalette.push(rgb);\r\n                    while(this._selectionPalette.length > this._maxSelectionSize) {\r\n                        this._selectionPalette.shift();\r\n                    }\r\n                }\r\n            }\r\n        },\r\n\r\n        getUniqueSelectionPalette : function () {\r\n            var unique = [],\r\n                opts = this.options;\r\n            if (this.stating(\"showPalette\")) {\r\n                for (var i = 0; i < this._selectionPalette.length; i++) {\r\n                    var rgb = Color.parse(this._selectionPalette[i]).toRgbString();\r\n\r\n                    if (!this._paletteLookup[rgb]) {\r\n                        unique.push(this._selectionPalette[i]);\r\n                    }\r\n                }\r\n            }\r\n\r\n            return unique.reverse().slice(0, opts.maxSelectionSize);\r\n        },\r\n\r\n        _drawPalette : function () {\r\n\r\n            var opts = this.options,\r\n                currentColor = this.get();\r\n\r\n            var html = langx.map(this._paletteArray, function (palette, i) {\r\n                return paletteTemplate(palette, currentColor, \"sp-palette-row sp-palette-row-\" + i, opts);\r\n            });\r\n\r\n            if (this._selectionPalette) {\r\n                html.push(paletteTemplate(this.getUniqueSelectionPalette(), currentColor, \"sp-palette-row sp-palette-row-selection\", opts));\r\n            }\r\n\r\n            this.$paletteContainer.html(html.join(\"\"));\r\n        },\r\n\r\n        _drawInitial : function () {\r\n            var opts = this.options;\r\n            if (this.stating(\"showInitial\")) {\r\n                var initial = this._colorOnShow;\r\n                var current = this.get();\r\n                this.$initialColorContainer.html(paletteTemplate([initial, current], current, \"sp-palette-row-initial\", opts));\r\n            }\r\n        },\r\n\r\n        _updateHelperLocations : function () {\r\n            var s = this._currentSaturation;\r\n            var v = this._currentValue;\r\n\r\n            if(this.stating(\"allowEmpty\") && this._isEmpty) {\r\n                //if selected color is empty, hide the helpers\r\n                this.$alphaSlideHelper.hide();\r\n                this.$slideHelper.hide();\r\n                this.$dragHelper.hide();\r\n            }\r\n            else {\r\n                //make sure helpers are visible\r\n                this.$alphaSlideHelper.show();\r\n                this.$slideHelper.show();\r\n                this.$dragHelper.show();\r\n\r\n                // Where to show the little circle in that displays your current selected color\r\n                var dragX = s * this._dragWidth;\r\n                var dragY = this._dragHeight - (v * this._dragHeight);\r\n                dragX = Math.max(\r\n                    -this._dragHelperHeight,\r\n                    Math.min(this._dragWidth - this._dragHelperHeight, dragX - this._dragHelperHeight)\r\n                );\r\n                dragY = Math.max(\r\n                    -this._dragHelperHeight,\r\n                    Math.min(this._dragHeight - this._dragHelperHeight, dragY - this._dragHelperHeight)\r\n                );\r\n                this.$dragHelper.css({\r\n                    \"top\": dragY + \"px\",\r\n                    \"left\": dragX + \"px\"\r\n                });\r\n\r\n                var alphaX = this._currentAlpha * this._alphaWidth;\r\n                this.$alphaSlideHelper.css({\r\n                    \"left\": (alphaX - (this._alphaSlideHelperWidth / 2)) + \"px\"\r\n                });\r\n\r\n                // Where to show the bar that displays your current selected hue\r\n                var slideY = (this._currentHue) * this._slideHeight;\r\n                this.$slideHelper.css({\r\n                    \"top\": (slideY - this._slideHelperHeight) + \"px\"\r\n                });\r\n            }\r\n        },\r\n\r\n        _updateOriginalInput : function (fireCallback) {\r\n            var color = this.get(),\r\n                displayColor = '',\r\n                hasChanged = !Color.equals(color, this._colorOnShow);\r\n\r\n            if (color) {\r\n                displayColor = color.toString(this._currentPreferredFormat);\r\n                // Update the selection palette with the current color\r\n                this._addColorToSelectionPalette(color);\r\n            }\r\n\r\n            if (this._isInput) {\r\n                this.$el.val(displayColor);\r\n            }\r\n\r\n            if (fireCallback && hasChanged) {\r\n                //callbacks.change(color);\r\n                //this.$el.trigger('change', [ color ]);\r\n            }\r\n        },\r\n\r\n        _updateUI : function () {\r\n            var opts = this.options;\r\n\r\n            this._dragWidth = this.$dragger.width();\r\n            this._dragHeight = this.$dragger.height();\r\n            this._dragHelperHeight = this.$dragHelper.height();\r\n            this._slideWidth = this.$slider.width();\r\n            this._slideHeight = this.$slider.height();\r\n            this._slideHelperHeight = this.$slideHelper.height();\r\n            this._alphaWidth = this.$alphaSlider.width();\r\n            this._alphaSlideHelperWidth = this.$alphaSlideHelper.width();\r\n            \r\n            this.$textInput.removeClass(\"sp-validation-error\");\r\n\r\n            this._updateHelperLocations();\r\n\r\n            // Update dragger background color (gradients take care of saturation and value).\r\n            //var flatColor = Color.fromRatio({ h: currentHue, s: 1, v: 1 });\r\n            var flatColor = Color.parse({ \r\n                h: this._currentHue * 360, \r\n                s: 1, \r\n                v: 1 \r\n            });\r\n            this.$dragger.css(\"background-color\", flatColor.toHexString());\r\n\r\n            // Get a format that alpha will be included in (hex and names ignore alpha)\r\n            var format = this._currentPreferredFormat;\r\n            if (this._currentAlpha < 1 && !(this._currentAlpha === 0 && format === \"name\")) {\r\n                if (format === \"hex\" || format === \"hex3\" || format === \"hex6\" || format === \"name\") {\r\n                    format = \"rgb\";\r\n                }\r\n            }\r\n\r\n            var realColor = this.get({ format: format }),\r\n                displayColor = '';\r\n\r\n             //reset background info for preview element\r\n            this.$previewElement.removeClass(\"sp-clear-display\");\r\n            this.$previewElement.css('background-color', 'transparent');\r\n\r\n            if (!realColor && this.stating(\"allowEmpty\")) {\r\n                // Update the replaced elements background with icon indicating no color selection\r\n                this.$previewElement.addClass(\"sp-clear-display\");\r\n            }\r\n            else {\r\n                var realHex = realColor.toHexString(),\r\n                    realRgb = realColor.toRgbString();\r\n\r\n                // Update the replaced elements background color (with actual selected color)\r\n                this.$previewElement.css(\"background-color\", realRgb);\r\n\r\n                if (this.stating(\"showAlpha\")) {\r\n                    var rgb = realColor.toRgb();\r\n                    rgb.a = 0;\r\n                    var realAlpha = Color.parse(rgb).toRgbString();\r\n                    var gradient = \"linear-gradient(left, \" + realAlpha + \", \" + realHex + \")\";\r\n\r\n                    if (browser.isIE) {\r\n                        this.$alphaSliderInner.css(\"filter\", Color.parse(realAlpha).toFilter({ gradientType: 1 }, realHex));\r\n                    }\r\n                    else {\r\n                        this.$alphaSliderInner.css(\"background\", \"-webkit-\" + gradient);\r\n                        this.$alphaSliderInner.css(\"background\", \"-moz-\" + gradient);\r\n                        this.$alphaSliderInner.css(\"background\", \"-ms-\" + gradient);\r\n                        // Use current syntax gradient on unprefixed property.\r\n                        this.$alphaSliderInner.css(\"background\",\r\n                            \"linear-gradient(to right, \" + realAlpha + \", \" + realHex + \")\");\r\n                    }\r\n                }\r\n\r\n                displayColor = realColor.toString(format);\r\n            }\r\n\r\n            // Update the text entry input as it changes happen\r\n            if (this.stating(\"showInput\")) {\r\n                this.$textInput.val(displayColor);\r\n            }\r\n\r\n            if (this.stating(\"showPalette\")) {\r\n                this._drawPalette();\r\n            }\r\n\r\n            this._drawInitial();\r\n        },\r\n\r\n\r\n        _applyOptions : function () {\r\n            var opts = this.options;\r\n\r\n            this._states = {\r\n            \tallowEmpty : opts.states.allowEmpty,\r\n                showInput : opts.states.showInput,\r\n                showAlpha : opts.states.showAlpha,\r\n                showButtons : opts.states.showButtons,\r\n                togglePaletteOnly : opts.states.togglePaletteOnly,\r\n                showPalette : opts.states.showPalette,\r\n                showPaletteOnly : opts.states.showPaletteOnly,\r\n                showInitial : opts.states.showInitial\r\n            };\r\n\r\n\r\n            if (opts.palette) {\r\n                var  palette = this._palette = opts.palette.slice(0),\r\n                    paletteArray = this._paletteArray = langx.isArray(palette[0]) ? palette : [palette],\r\n                    paletteLookup = this._paletteLookup = {};\r\n                for (var i = 0; i < paletteArray.length; i++) {\r\n                    for (var j = 0; j < paletteArray[i].length; j++) {\r\n                        var rgb = Color.parse(paletteArray[i][j]).toRgbString();\r\n                        paletteLookup[rgb] = true;\r\n                    }\r\n                }\r\n            }\r\n\r\n            this.$container.toggleClass(\"sp-flat\", opts.flat)\r\n                            .addClass(opts.containerClassName);\r\n\r\n           this._applyStates();\r\n\r\n           this.reflow();\r\n        },\r\n\r\n         _construct: function(elm, options) {\r\n            this.overrided(elm,options);\r\n\r\n            this.$el = this.$();\r\n\r\n            var opts = this.options,\r\n                theme = opts.theme,\r\n                selectionPalette = this._selectionPalette =  opts.selectionPalette.slice(0);\r\n\r\n\r\n            var container = this.$container = $(markup,elm.ownerDocument).addClass(theme),\r\n                pickerContainer = this.$pickerContainer =  container.find(opts.selectors.pickerContainer),\r\n                dragger = this.$dragger = container.find(opts.selectors.dragger),\r\n                dragHelper = this.$dragHelper = container.find(opts.selectors.dragHelper),\r\n                slider = this.$slider = container.find(opts.selectors.slider),\r\n                slideHelper = this.$slideHelper =  container.find(opts.selectors.slideHelper),\r\n                alphaSliderInner = this.$alphaSliderInner = container.find(opts.selectors.alphaSliderInner),\r\n                alphaSlider = this.$alphaSlider = container.find(opts.selectors.alphaSlider),\r\n                alphaSlideHelper = this.$alphaSlideHelper = container.find(opts.selectors.alphaSlideHelper),\r\n                textInput = this.$textInput = container.find(opts.selectors.textInput),\r\n                paletteContainer = this.$paletteContainer =  container.find(opts.selectors.paletteContainer),\r\n                initialColorContainer = this.$initialColorContainer = container.find(opts.selectors.initialColorContainer),\r\n                cancelButton = this.$cancelButton = container.find(opts.selectors.cancelButton),\r\n                clearButton = this.$clearButton = container.find(opts.selectors.clearButton),\r\n                chooseButton = this.$chooseButton = container.find(opts.selectors.chooseButton),\r\n                toggleButton = this.$toggleButton = container.find(opts.selectors.toggleButton),\r\n                isInput = this._isInput = this.$el.is(\"input\"),\r\n                isInputTypeColor = isInput && this.$el.attr(\"type\") === \"color\" && inputTypeColorSupport(),\r\n                shouldReplace = this._shouldReplace =  isInput && !opts.flat,\r\n                replacer = this.$replacer =  (shouldReplace) ? $(replaceInput).addClass(theme).addClass(opts.className).addClass(opts.replacerClassName) : $([]),\r\n                offsetElement = this.$offsetElement =  (shouldReplace) ? replacer : this.$el,\r\n                previewElement = this.$previewElement = replacer.find(\".sp-preview-inner\"),\r\n                initialColor = this._initialColor =  opts.color || (isInput && this.$el.val()),\r\n                colorOnShow = this._colorOnShow = false,\r\n                currentPreferredFormat = this._currentPreferredFormat = opts.preferredFormat,\r\n                isEmpty = this._isEmpty =  !initialColor;\r\n\r\n\r\n            function isValid() {\r\n                return !textInput.hasClass(\"sp-validation-error\");\r\n            }\r\n\r\n\r\n\r\n            this._init();\r\n\r\n        },\r\n\r\n        _init : function () {\r\n            var self = this,\r\n                opts = this.options;\r\n             function dragStart() {\r\n                if (self._dragHeight <= 0 || self._dragWidth <= 0 || self._slideHeight <= 0) {\r\n                    self.reflow();\r\n                }\r\n                self._isDragging = true;\r\n                self.$container.addClass(self.options.draggingClass);\r\n                self._shiftMovementDirection = null;\r\n                //this.$el.trigger('dragstart.ColorPane', [ get() ]);\r\n            }\r\n\r\n            function dragStop() {\r\n                self._isDragging = false;\r\n                self.$container.removeClass(self.options.draggingClass);\r\n                //this.$el.trigger('dragstop.ColorPane', [ get() ]);\r\n            }           \r\n\r\n            function move() {\r\n                self._updateUI();\r\n\r\n                //callbacks.move(get());\r\n                //this.$el.trigger('move.ColorPane', [ get() ]);\r\n            }\r\n\r\n            if (browser.isIE) {\r\n                this.$container.find(\"*:not(input)\").attr(\"unselectable\", \"on\");\r\n            }\r\n\r\n            if (this._shouldReplace) {\r\n                this.$el.after(this.$replacer).hide();\r\n            }\r\n\r\n\r\n            if (opts.flat) {\r\n                this.$el.after(this.$container).hide();\r\n            } else {\r\n                var appendTo = opts.appendTo === \"parent\" ? this.$el.parent() : $(opts.appendTo);\r\n                if (appendTo.length !== 1) {\r\n                    appendTo = $(\"body\");\r\n                }\r\n\r\n                appendTo.append(this.$container);\r\n            }\r\n\r\n            this._applyOptions();\r\n\r\n            this.listenTo(this.$offsetElement,\"click touchstart\", function (e) {\r\n                //if (!disabled) {\r\n                    self.toggle();\r\n                //}\r\n\r\n                e.stopPropagation();\r\n\r\n                if (!$(e.target).is(\"input\")) {\r\n                    e.preventDefault();\r\n                }\r\n            });\r\n\r\n            //if(this.$el.is(\":disabled\") || (opts.disabled === true)) {\r\n            //    disable();\r\n            //}\r\n\r\n            // Prevent clicks from bubbling up to document.  This would cause it to be hidden.\r\n            ///this.$container.click(stopPropagation);\r\n\r\n            // Handle user typed input\r\n            function setFromTextInput() {\r\n                var value = textInput.val();\r\n\r\n                if ((value === null || value === \"\") && self._allowEmpty) {\r\n                    self.set(null);\r\n                    move();\r\n                    self._updateOriginalInput();\r\n                }\r\n                else {\r\n                    var tiny = Color.parse(value);\r\n                    if (tiny.isValid()) {\r\n                        self.set(tiny);\r\n                        move();\r\n                        self._updateOriginalInput();\r\n                    }\r\n                    else {\r\n                        self.$textInput.addClass(\"sp-validation-error\");\r\n                    }\r\n                }\r\n            }\r\n            this.$textInput.change(setFromTextInput);\r\n            this.$textInput.on(\"paste\", function () {\r\n                setTimeout(setFromTextInput, 1);\r\n            });\r\n            this.$textInput.keydown(function (e) { if (e.keyCode == 13) { setFromTextInput(); } });\r\n\r\n            this.$cancelButton.text(opts.texts.cancelText);\r\n            \r\n            this.listenTo(this.$cancelButton,\"click\", function (e) {\r\n                //e.stopPropagation();\r\n                //e.preventDefault();\r\n                eventer.stop(e);\r\n                self.revert();\r\n                self.hide();\r\n            });\r\n\r\n            this.$clearButton.attr(\"title\", opts.texts.clearText);\r\n            this.listenTo(this.$clearButton,\"click\", function (e) {\r\n                //e.stopPropagation();\r\n                //e.preventDefault();\r\n                eventer.stop(e);\r\n                self._isEmpty = true;\r\n                move();\r\n\r\n                if(opts.flat) {\r\n                    //for the flat style, this is a change event\r\n                    self._updateOriginalInput(true);\r\n                }\r\n            });\r\n\r\n            this.$chooseButton.text(opts.texts.chooseText);\r\n            this.listenTo(this.$chooseButton,\"click\", function (e) {\r\n                //e.stopPropagation();\r\n                //e.preventDefault();\r\n                eventer.stop(e);\r\n\r\n                //if (browser.isIE && textInput.is(\":focus\")) {\r\n                //    textInput.trigger('change');\r\n                //}\r\n\r\n                if (isValid()) {\r\n                    self._updateOriginalInput(true);\r\n                    self.hide();\r\n                }\r\n            });\r\n          \r\n            this.listenTo(this.$toggleButton,\"click\", function (e) {\r\n                //e.stopPropagation();\r\n                //e.preventDefault();\r\n                eventer.stop(e);\r\n\r\n                ///self._states.showPaletteOnly = !self._states.showPaletteOnly;\r\n\r\n                // To make sure the Picker area is drawn on the right, next to the\r\n                // Palette area (and not below the palette), first move the Palette\r\n                // to the left to make space for the picker, plus 5px extra.\r\n                // The 'applyOptions' function puts the whole container back into place\r\n                // and takes care of the button-text and the sp-palette-only CSS class.\r\n                /*\r\n                if (!self._states.showPaletteOnly && !opts.flat) {\r\n                    self.$container.css('left', '-=' + (self.$pickerContainer.outerWidth(true) + 5));\r\n                }\r\n                */\r\n                self.stating(\"showPaletteOnly\",!self.stating(\"showPaletteOnly\"));\r\n                //self._applyOptions();\r\n            });\r\n\r\n            this.$alphaSlider.plugin(\"domx.indicator\", {\r\n                \"onmove\" :   function (dragX, dragY, e) {\r\n                    self._currentAlpha = (dragX / self._alphaWidth);\r\n                    self._isEmpty = false;\r\n                    if (e.shiftKey) {\r\n                        self._currentAlpha = Math.round(self._currentAlpha * 10) / 10;\r\n                    }\r\n\r\n                    move();\r\n                }, \r\n                \"onstart\" : dragStart, \r\n                \"onstop\" :dragStop\r\n            });\r\n\r\n            this.$slider.plugin(\"domx.indicator\", {\r\n                \"onmove\" :   function (dragX, dragY, e) {\r\n                    self._currentHue = parseFloat(dragY / self._slideHeight);\r\n                    self._isEmpty = false;\r\n                    if (!self.stating(\"showAlpha\")) {\r\n                        self._currentAlpha = 1;\r\n                    }\r\n                    move();\r\n                }, \r\n                \"onstart\" : dragStart, \r\n                \"onstop\" :dragStop\r\n            });\r\n\r\n            this.$dragger.plugin(\"domx.indicator\", {\r\n                \"onmove\" :   function (dragX, dragY, e) {\r\n\r\n                    // shift+drag should snap the movement to either the x or y axis.\r\n                    if (!e.shiftKey) {\r\n                        self._shiftMovementDirection = null;\r\n                    }\r\n                    else if (!self._shiftMovementDirection) {\r\n                        var oldDragX = self._currentSaturation * self._dragWidth;\r\n                        var oldDragY = self._dragHeight - (self._currentValue * self._dragHeight);\r\n                        var furtherFromX = Math.abs(dragX - oldDragX) > Math.abs(dragY - oldDragY);\r\n\r\n                        self._shiftMovementDirection = furtherFromX ? \"x\" : \"y\";\r\n                    }\r\n\r\n                    var setSaturation = !self._shiftMovementDirection || self._shiftMovementDirection === \"x\";\r\n                    var setValue = !self._shiftMovementDirection || self._shiftMovementDirection === \"y\";\r\n\r\n                    if (setSaturation) {\r\n                        self._currentSaturation = parseFloat(dragX / self._dragWidth);\r\n                    }\r\n                    if (setValue) {\r\n                        self._currentValue = parseFloat((self._dragHeight - dragY) / self._dragHeight);\r\n                    }\r\n\r\n                    self._isEmpty = false;\r\n                    if (!self.stating(\"showAlpha\")) {\r\n                        self._currentAlpha = 1;\r\n                    }\r\n\r\n                    move();\r\n                }, \r\n                \"onstart\" : dragStart, \r\n                \"onstop\" :dragStop\r\n            });\r\n\r\n            if (!!this._initialColor) {\r\n                this.set(this._initialColor);\r\n\r\n                // In case color was black - update the preview UI and set the format\r\n                // since the set function will not run (default color is black).\r\n                self._updateUI();\r\n                this._currentPreferredFormat = opts.preferredFormat || Color.parse(this._initialColor).format;\r\n\r\n                self._addColorToSelectionPalette(this._initialColor);\r\n            } else {\r\n                this._updateUI();\r\n            }\r\n\r\n            if (opts.flat) {\r\n                this.show();\r\n            }\r\n\r\n            function paletteElementClick(e) {\r\n                if (e.data && e.data.ignore) {\r\n                    self.set($(e.target).closest(\".sp-thumb-el\").data(\"color\"));\r\n                    move();\r\n                }\r\n                else {\r\n                    self.set($(e.target).closest(\".sp-thumb-el\").data(\"color\"));\r\n                    move();\r\n\r\n                    // If the picker is going to close immediately, a palette selection\r\n                    // is a change.  Otherwise, it's a move only.\r\n                    if (opts.hideAfterPaletteSelect) {\r\n                        self_updateOriginalInput(true);\r\n                        self.hide();\r\n                    } else {\r\n                        self._updateOriginalInput();\r\n                    }\r\n                }\r\n\r\n                return false;\r\n            }\r\n\r\n            var paletteEvent = browser.isIE ? \"mousedown.ColorPane\" : \"click.ColorPane touchstart.ColorPane\";\r\n            this.$paletteContainer.on(paletteEvent, \".sp-thumb-el\", paletteElementClick);\r\n            this.$initialColorContainer.on(paletteEvent, \".sp-thumb-el:nth-child(1)\", { ignore: true }, paletteElementClick);\r\n        },\r\n\r\n        revert :  function () {\r\n            this.set(this._colorOnShow, true);\r\n            this._updateOriginalInput(true);\r\n        },\r\n\r\n\r\n        get : function (opts) {\r\n            opts = opts || { };\r\n\r\n            if (this._allowEmpty && this._isEmpty) {\r\n                return null;\r\n            }\r\n\r\n            /*\r\n            return fromRatio({\r\n                h: currentHue,\r\n                s: currentSaturation,\r\n                v: currentValue,\r\n                a: Math.round(currentAlpha * 1000) / 1000\r\n            }, { format: opts.format || currentPreferredFormat });\r\n            */\r\n            return Color.parse({\r\n                h: this._currentHue * 360,\r\n                s: this._currentSaturation,\r\n                v: this._currentValue,\r\n                a: Math.round(this._currentAlpha * 1000) / 1000\r\n            });\r\n        },\r\n\r\n\r\n        set : function (color, ignoreFormatChange) {\r\n            var opts = this.options;\r\n\r\n            if (Color.equals(color, this.get())) {\r\n                // Update UI just in case a validation error needs\r\n                // to be cleared.\r\n                this._updateUI();\r\n                return;\r\n            }\r\n\r\n            var newColor, newHsv;\r\n            if (!color && this.stating(\"allowEmpty\")) {\r\n                this._isEmpty = true;\r\n            } else {\r\n                this._isEmpty = false;\r\n                newColor = Color.parse(color);\r\n                newHsv = newColor.toHsv();\r\n\r\n                this._currentHue = (newHsv.h % 360) / 360;\r\n                this._currentSaturation = newHsv.s;\r\n                this._currentValue = newHsv.v;\r\n                this._currentAlpha = newHsv.a;\r\n            }\r\n            this._updateUI();\r\n\r\n            if (newColor && newColor.isValid() && !ignoreFormatChange) {\r\n                this._currentPreferredFormat = opts.preferredFormat || newColor.getFormat();\r\n            }\r\n        },\r\n\r\n        _applyStates : function() {\r\n           var states = this._states ;\r\n\r\n            if (states.showPaletteOnly) {\r\n                states.showPalette = true;\r\n            }\r\n\r\n            this.$toggleButton.text(states.showPaletteOnly ? this.option(\"texts.togglePaletteMoreText\"): this.option(\"texts.togglePaletteLessText\"));\r\n\r\n\r\n            this.$container .toggleClass(\"sp-input-disabled\", !states.showInput)\r\n                            .toggleClass(\"sp-clear-enabled\", !!states.allowEmpty)\r\n                            .toggleClass(\"sp-alpha-enabled\", states.showAlpha)\r\n                            .toggleClass(\"sp-buttons-disabled\", !states.showButtons)\r\n                            .toggleClass(\"sp-palette-buttons-disabled\", !states.togglePaletteOnly)\r\n                            .toggleClass(\"sp-palette-disabled\", !states.showPalette)\r\n                            .toggleClass(\"sp-palette-only\", states.showPaletteOnly)\r\n                            .toggleClass(\"sp-initial-disabled\", !states.showInitial);\r\n\r\n            if (!states.allowEmpty) {\r\n                this.$clearButton.hide();\r\n            }\r\n\r\n            if (states.showPaletteOnly && !this.option(\"flat\")) {\r\n                this.$container.css('left', '-=' + (this.$pickerContainer.outerWidth(true) + 5));\r\n            }\r\n\r\n            this._dragWidth = this.$dragger.width();\r\n            this._dragHeight = this.$dragger.height();\r\n            this._dragHelperHeight = this.$dragHelper.height();\r\n            this._slideWidth = this.$slider.width();\r\n            this._slideHeight = this.$slider.height();\r\n            this._slideHelperHeight = this.$slideHelper.height();\r\n            this._alphaWidth = this.$alphaSlider.width();\r\n            this._alphaSlideHelperWidth = this.$alphaSlideHelper.width();\r\n        },\r\n\r\n        stating : function(name,value) {\r\n        \tif (value !== undefined) {\r\n        \t\tthis._states[name] = value;\r\n        \t\tthis._applyStates();\r\n        \t} else {\r\n        \t\treturn this._states[name];\r\n        \t}\r\n        },\r\n\r\n        reflow : function () {\r\n            //if (!this._visible) {\r\n            //    return; // Calculations would be useless and wouldn't be reliable anyways\r\n            //}\r\n\r\n\r\n            if (!this.option(\"flat\")) {\r\n                this.$container.css(\"position\", \"absolute\");\r\n                var offset = this.option(\"offset\"); \r\n                if (offset) {\r\n                    this.$container.offset(offset);\r\n                } else {\r\n                    this.$container.offset(popups.calcOffset(this.$container[0], this.$offsetElement[0]));\r\n                }\r\n            }\r\n\r\n            this._updateHelperLocations();\r\n\r\n            if (this.stating(\"showPalette\")) {\r\n                this._drawPalette();\r\n            }\r\n\r\n            //this.$el.trigger('reflow');\r\n        },\r\n\r\n        toggle : function () {\r\n            if (this._visible) {\r\n                this.hide();\r\n            } else {\r\n                this.show();\r\n            }\r\n        },\r\n\r\n        show : function () {\r\n            if (this._visible) {\r\n                this.reflow();\r\n                return;\r\n            }\r\n            \r\n            this._visible = true;\r\n\r\n            //$(doc).on(\"keydown.ColorPane\", onkeydown);\r\n            //$(doc).on(\"click.ColorPane\", clickout);\r\n            //$(window).on(\"resize.ColorPane\", resize);\r\n            this.$replacer.addClass(\"sp-active\");\r\n            this.$container.removeClass(\"sp-hidden\");\r\n\r\n            this.reflow();\r\n            \r\n            this._updateUI();\r\n\r\n            this._colorOnShow = this.get();\r\n\r\n            //this._drawInitial();\r\n            \r\n        },\r\n        hide : function () {\r\n            // Return if hiding is unnecessary\r\n            if (!this._visible || this._flat) { return; }\r\n            this._visible = false;\r\n\r\n            //$(doc).off(\"keydown.ColorPane\", onkeydown);\r\n            //$(doc).off(\"click.ColorPane\", clickout);\r\n            //$(window).off(\"resize.ColorPane\", resize);\r\n\r\n            this.$replacer.removeClass(\"sp-active\");\r\n            this.$container.addClass(\"sp-hidden\");\r\n\r\n        },\r\n\r\n        destroy : function () {\r\n            this.$el.show();\r\n            this.$offsetElement.off(\"click.ColorPane touchstart.ColorPane\");\r\n            this.$container.remove();\r\n            this.$replacer.remove();\r\n            //pickers[spect.id] = null;\r\n        }\r\n\r\n    });\r\n\r\n\r\n    plugins.register(ColorPane);\r\n\r\n    ColorPane.localization = {};\r\n\r\n    return colors.ColorPane = ColorPane;\r\n\r\n});"]}