{"version":3,"sources":["ColorPane.js"],"names":["define","langx","browser","noder","finder","$","eventer","styler","fx","plugins","popups","Color","colors","ColorPicker","ColorPalette","ColorPane","Plugin","inherit","klassName","pluginName","options","selectors","pickerContainer","toggleButton","paletteContainer","draggingClass","texts","togglePaletteMoreText","togglePaletteLessText","clearText","noColorSelectedText","states","showPalette","showPaletteOnly","togglePaletteOnly","showSelectionPalette","showInput","allowEmpty","showButtons","showInitial","showAlpha","color","maxSelectionSize","_updateUI","this","get","stating","palette","picker","_applyOptions","opts","_states","_applyStates","reflow","_construct","elm","overrided","$el","theme","$pickerContainer","find","$paletteContainer","initialColor","$toggleButton","_initialColor","_isEmpty","instantiate","selectionPalette","_init","self","isIE","$container","attr","listenTo","e","stop","set","flat","show","revert","_colorOnShow","_updateOriginalInput","_allowEmpty","parse","h","_currentHue","s","_currentSaturation","v","_currentValue","a","Math","round","_currentAlpha","ignoreFormatChange","newColor","newHsv","equals","toHsv","isValid","_currentPreferredFormat","preferredFormat","getFormat","text","option","toggleClass","css","outerWidth","name","value","undefined","toggle","_visible","hide","removeClass","_flat","addClass","destroy","register","localization"],"mappings":";;;;;;;AAAAA,QACI,sBACA,uBACA,qBACA,sBACA,qBACA,uBACA,sBACA,kBACA,uBACA,sBACA,yBACA,WACA,gBACA,kBACF,SAASC,EAAOC,EAASC,EAAOC,EAAQC,EAAEC,EAASC,EAAOC,EAAGC,EAAQC,EAAOC,EAAMC,EAAOC,EAAYC,GACnG,aAEA,IAAIC,EAAYN,EAAQO,OAAOC,SAC3BC,UAAY,YAEZC,WAAa,mBAEbC,SACIC,WACIC,gBAAkB,uBAClBC,aAAe,qBACfC,iBAAmB,eAGvBC,cAAgB,cAEhBC,OACIC,sBAAuB,OACvBC,sBAAuB,OACvBC,UAAW,wBACXC,oBAAqB,qBAGzBC,QACIC,aAAa,EACbC,iBAAiB,EACjBC,mBAAmB,EACnBC,sBAAsB,EACtBC,WAAW,EACXC,YAAY,EACZC,aAAa,EACbC,aAAa,EACbC,WAAW,GAIfC,OAAO,EACPC,iBAAkB,GAItBC,UAAY,WACQC,KAAKC,MAoBjBD,KAAKE,QAAQ,gBACbF,KAAKG,QAAQJ,YAEjBC,KAAKI,OAAOL,aAIhBM,cAAgB,WACZ,IAAIC,EAAON,KAAKxB,QAEhBwB,KAAKO,SACDd,WAAaa,EAAKnB,OAAOM,WACzBD,UAAYc,EAAKnB,OAAOK,UACxBI,UAAYU,EAAKnB,OAAOS,UACxBF,YAAcY,EAAKnB,OAAOO,YAC1BJ,kBAAoBgB,EAAKnB,OAAOG,kBAChCF,YAAckB,EAAKnB,OAAOC,YAC1BC,gBAAkBiB,EAAKnB,OAAOE,gBAC9BE,qBAAsBe,EAAKf,qBAC3BI,YAAcW,EAAKnB,OAAOQ,aAM/BK,KAAKQ,eAELR,KAAKS,UAGPC,WAAY,SAASC,EAAKnC,GACvBwB,KAAKY,UAAUD,EAAInC,GAEnB,IAAIqC,EAAMb,KAAKa,IAAMb,KAAKvC,IAEtB6C,EAAON,KAAKxB,QAMZE,GALQ4B,EAAKQ,MAKKd,KAAKe,iBAAoBF,EAAIG,KAAKV,EAAK7B,UAAUC,kBACnEE,EAAmBoB,KAAKiB,kBAAqBJ,EAAIG,KAAKV,EAAK7B,UAAUG,kBASrEsC,GARelB,KAAKmB,cAAgBN,EAAIG,KAAKV,EAAK7B,UAAUE,cAQ7CqB,KAAKoB,cAAiBd,EAAKT,OAChCG,KAAKqB,UAAaH,EAE5BtC,EAAiB,KACjBoB,KAAKG,QAAUjC,EAAaoD,YAAY1C,EAAiB,IACrD2C,iBAAmBjB,EAAKiB,iBACxB1B,MAAQS,EAAKT,MACbM,QAAUG,EAAKH,QACfoB,iBAAmBjB,EAAKiB,oBAI5B7C,EAAgB,KAChBsB,KAAKI,OAASnC,EAAYqD,YAAY5C,EAAgB,IAClDmB,MAAQS,EAAKT,MACbV,QACIK,UAAWc,EAAKnB,OAAOK,UACvBC,WAAYa,EAAKnB,OAAOM,WACxBC,YAAaY,EAAKnB,OAAOO,YACzBC,YAAaW,EAAKnB,OAAOQ,YACzBC,UAAWU,EAAKnB,OAAOS,cAInCI,KAAKwB,SAITA,MAAQ,WACJ,IAAIC,EAAOzB,KACPM,EAAON,KAAKxB,QACblB,EAAQoE,MACP1B,KAAK2B,WAAWX,KAAK,gBAAgBY,KAAK,eAAgB,MAmB9D5B,KAAKK,gBAeLL,KAAK6B,SAAS7B,KAAKmB,cAAc,QAAS,SAAUW,GAGhDpE,EAAQqE,KAAKD,GAcbL,EAAKvB,QAAQ,mBAAmBuB,EAAKvB,QAAQ,sBAI3CF,KAAKoB,eACPpB,KAAKgC,IAAIhC,KAAKoB,eAIdK,EAAK1B,aAKLC,KAAKD,YAGLO,EAAK2B,MACLjC,KAAKkC,QAKbC,OAAU,WACNnC,KAAKgC,IAAIhC,KAAKoC,cAAc,GAC5BpC,KAAKqC,sBAAqB,IAI9BpC,IAAM,SAAUK,GAGZ,OAFAA,EAAOA,MAEHN,KAAKsC,aAAetC,KAAKqB,SAClB,KAWJtD,EAAMwE,OACTC,EAAsB,IAAnBxC,KAAKyC,YACRC,EAAG1C,KAAK2C,mBACRC,EAAG5C,KAAK6C,cACRC,EAAGC,KAAKC,MAA2B,IAArBhD,KAAKiD,eAAwB,OAKnDjB,IAAM,SAAUnC,EAAOqD,GACnB,IASIC,EAAUC,EATV9C,EAAON,KAAKxB,QAEZT,EAAMsF,OAAOxD,EAAOG,KAAKC,OAGzBD,KAAKD,cAKJF,GAASG,KAAKE,QAAQ,cACvBF,KAAKqB,UAAW,GAEhBrB,KAAKqB,UAAW,EAEhB+B,GADAD,EAAWpF,EAAMwE,MAAM1C,IACLyD,QAElBtD,KAAKyC,YAAeW,EAAOZ,EAAI,IAAO,IACtCxC,KAAK2C,mBAAqBS,EAAOV,EACjC1C,KAAK6C,cAAgBO,EAAOR,EAC5B5C,KAAKiD,cAAgBG,EAAON,GAEhC9C,KAAKD,YAEDoD,GAAYA,EAASI,YAAcL,IACnClD,KAAKwD,wBAA0BlD,EAAKmD,iBAAmBN,EAASO,eAIxElD,aAAe,WACZ,IAAIrB,EAASa,KAAKO,QAEbpB,EAAOE,kBACPF,EAAOC,aAAc,GAGzBY,KAAKmB,cAAcwC,KAAKxE,EAAOE,gBAAkBW,KAAK4D,OAAO,+BAAgC5D,KAAK4D,OAAO,gCAGzG5D,KAAKa,IAAIgD,YAAY,qBAAsB1E,EAAOK,WACjCqE,YAAY,qBAAsB1E,EAAOM,YACzCoE,YAAY,mBAAoB1E,EAAOS,WACvCiE,YAAY,uBAAwB1E,EAAOO,aAC3CmE,YAAY,+BAAgC1E,EAAOG,mBACnDuE,YAAY,uBAAwB1E,EAAOC,aAC3CyE,YAAY,kBAAmB1E,EAAOE,iBACtCwE,YAAY,uBAAwB1E,EAAOQ,aAExDR,EAAOE,kBAAoBW,KAAK4D,OAAO,SACvC5D,KAAKa,IAAIiD,IAAI,OAAQ,MAAQ9D,KAAKe,iBAAiBgD,YAAW,GAAQ,KAI9E7D,QAAU,SAAS8D,EAAKC,GACpB,QAAcC,IAAVD,EAIA,OAAOjE,KAAKO,QAAQyD,GAHpBhE,KAAKO,QAAQyD,GAAQC,EACrBjE,KAAKQ,gBAMbC,OAAS,WAYDT,KAAKE,QAAQ,gBACbF,KAAKG,QAAQM,SAGjBT,KAAKI,OAAOK,UAIhB0D,OAAS,WACDnE,KAAKoE,SACLpE,KAAKqE,OAELrE,KAAKkC,QAIbA,KAAO,WACClC,KAAKoE,SACLpE,KAAKS,UAITT,KAAKoE,UAAW,EAMhBpE,KAAKa,IAAIyD,YAAY,aAErBtE,KAAKS,SAELT,KAAKD,cAKTsE,KAAO,WAEErE,KAAKoE,WAAYpE,KAAKuE,QAC3BvE,KAAKoE,UAAW,EAOhBpE,KAAKa,IAAI2D,SAAS,eAGtBC,QAAU,eAed,OAJA5G,EAAQ6G,SAASvG,GAEjBA,EAAUwG,gBAEH3G,EAAOG,UAAYA","file":"../ColorPane.js","sourcesContent":["define([\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-browser\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-finder\",\r\n    \"skylark-domx-query\",\r\n    \"skylark-domx-eventer\",\r\n    \"skylark-domx-styler\",\r\n    \"skylark-domx-fx\",\r\n    \"skylark-domx-plugins\",\r\n    \"skylark-domx-popups\",\r\n    \"skylark-graphics-color\",\r\n    \"./colors\",\r\n    \"./ColorPicker\",\r\n    \"./ColorPalette\"\r\n],function(langx, browser, noder, finder, $,eventer, styler,fx,plugins,popups,Color,colors,ColorPicker,ColorPalette) {\r\n    \"use strict\";\r\n\r\n    var ColorPane = plugins.Plugin.inherit({\r\n        klassName : \"ColorPane\",\r\n\r\n        pluginName : \"domx.colors.pane\",\r\n\r\n        options : {\r\n            selectors  : {\r\n                pickerContainer : \".sp-picker-container\",\r\n                toggleButton : \".sp-palette-toggle\",\r\n                paletteContainer : \".sp-palette\"\r\n            },\r\n\r\n            draggingClass : \"sp-dragging\",           \r\n\r\n            texts : {\r\n                togglePaletteMoreText: \"more\",\r\n                togglePaletteLessText: \"less\",\r\n                clearText: \"Clear Color Selection\",\r\n                noColorSelectedText: \"No Color Selected\"\r\n            },\r\n\r\n            states : {\r\n                showPalette: false,\r\n                showPaletteOnly: false,\r\n                togglePaletteOnly: false,\r\n                showSelectionPalette: true,\r\n                showInput: false,\r\n                allowEmpty: false,\r\n                showButtons: true,\r\n                showInitial: false,\r\n                showAlpha: false\r\n            },\r\n\r\n            // Options\r\n            color: false,\r\n            maxSelectionSize: 7\r\n\r\n        },\r\n\r\n        _updateUI : function () {\r\n            var realColor = this.get(),\r\n                displayColor = '';\r\n             //reset background info for preview element\r\n            ///this.$previewElement.removeClass(\"sp-clear-display\");\r\n            ///this.$previewElement.css('background-color', 'transparent');\r\n\r\n            ///if (!realColor && this.stating(\"allowEmpty\")) {\r\n            ///    // Update the replaced elements background with icon indicating no color selection\r\n            ///    this.$previewElement.addClass(\"sp-clear-display\");\r\n            ///}\r\n            ///else {\r\n            ///    var realHex = realColor.toHexString(),\r\n            ///        realRgb = realColor.toRgbString();\r\n\r\n            ///    // Update the replaced elements background color (with actual selected color)\r\n            ///    this.$previewElement.css(\"background-color\", realRgb);\r\n\r\n            ///    displayColor = realColor.toString();\r\n            ///}\r\n\r\n            if (this.stating(\"showPalette\")) {\r\n                this.palette._updateUI();\r\n            }\r\n            this.picker._updateUI();\r\n        },\r\n\r\n\r\n        _applyOptions : function () {\r\n            var opts = this.options;\r\n\r\n            this._states = {\r\n                allowEmpty : opts.states.allowEmpty,\r\n                showInput : opts.states.showInput,\r\n                showAlpha : opts.states.showAlpha,\r\n                showButtons : opts.states.showButtons,\r\n                togglePaletteOnly : opts.states.togglePaletteOnly,\r\n                showPalette : opts.states.showPalette,\r\n                showPaletteOnly : opts.states.showPaletteOnly,\r\n                showSelectionPalette: opts.showSelectionPalette,\r\n                showInitial : opts.states.showInitial\r\n            };\r\n\r\n            //this.$container.toggleClass(\"sp-flat\", opts.flat)\r\n            //                .addClass(opts.containerClassName);\r\n\r\n           this._applyStates();\r\n\r\n           this.reflow();\r\n        },\r\n\r\n         _construct: function(elm, options) {\r\n            this.overrided(elm,options);\r\n\r\n            var $el = this.$el = this.$();\r\n\r\n            var opts = this.options,\r\n                theme = opts.theme;\r\n\r\n\r\n            var \r\n                //container = this.$container = $(markup,elm.ownerDocument).addClass(theme),\r\n                pickerContainer = this.$pickerContainer =  $el.find(opts.selectors.pickerContainer),\r\n                paletteContainer = this.$paletteContainer =  $el.find(opts.selectors.paletteContainer),\r\n                toggleButton = this.$toggleButton = $el.find(opts.selectors.toggleButton),\r\n                //isInput = this._isInput = this.$el.is(\"input\"),\r\n                //isInputTypeColor = isInput && this.$el.attr(\"type\") === \"color\",\r\n                //shouldReplace = this._shouldReplace =  isInput && !opts.flat,\r\n                //replacer = this.$replacer =  (shouldReplace) ? $(replaceInput).addClass(theme).addClass(opts.className).addClass(opts.replacerClassName) : $([]),\r\n                //offsetElement = this.$offsetElement =  (shouldReplace) ? replacer : this.$el,\r\n                // previewElement = this.$previewElement = replacer.find(\".sp-preview-inner\"),\r\n                // initialColor = this._initialColor =  opts.color || (isInput && this.$el.val()),\r\n                initialColor = this._initialColor =  opts.color,\r\n                isEmpty = this._isEmpty =  !initialColor;\r\n\r\n            if (paletteContainer[0]) {\r\n                this.palette = ColorPalette.instantiate(paletteContainer[0],{\r\n                    selectionPalette : opts.selectionPalette,\r\n                    color : opts.color,\r\n                    palette : opts.palette,\r\n                    selectionPalette : opts.selectionPalette\r\n                })\r\n            } \r\n\r\n            if (pickerContainer[0]) {\r\n                this.picker = ColorPicker.instantiate(pickerContainer[0],{\r\n                    color : opts.color,\r\n                    states : {\r\n                        showInput: opts.states.showInput,\r\n                        allowEmpty: opts.states.allowEmpty,\r\n                        showButtons: opts.states.showButtons,\r\n                        showInitial: opts.states.showInitial,\r\n                        showAlpha: opts.states.showAlpha                                            \r\n                    }\r\n                })               \r\n            }\r\n            this._init();\r\n\r\n        },\r\n\r\n        _init : function () {\r\n            var self = this,\r\n                opts = this.options;\r\n           if (browser.isIE) {\r\n                this.$container.find(\"*:not(input)\").attr(\"unselectable\", \"on\");\r\n            }\r\n\r\n            ///if (this._shouldReplace) {\r\n            ///    this.$el.after(this.$replacer).hide();\r\n            ///}\r\n\r\n\r\n            ///if (opts.flat) {\r\n            ///    this.$el.after(this.$container).hide();\r\n            ///} else {\r\n            ///    var appendTo = opts.appendTo === \"parent\" ? this.$el.parent() : $(opts.appendTo);\r\n            ///    if (appendTo.length !== 1) {\r\n            ///        appendTo = $(\"body\");\r\n            ///    }\r\n\r\n            ///    appendTo.append(this.$container);\r\n            ///}\r\n\r\n            this._applyOptions();\r\n\r\n            ///this.listenTo(this.$offsetElement,\"click touchstart\", function (e) {\r\n            ///    //if (!disabled) {\r\n            ///        self.toggle();\r\n            ///    //}\r\n\r\n            ///    e.stopPropagation();\r\n\r\n            ///    if (!$(e.target).is(\"input\")) {\r\n            ///        e.preventDefault();\r\n            ///    }\r\n            ///});\r\n\r\n          \r\n            this.listenTo(this.$toggleButton,\"click\", function (e) {\r\n                //e.stopPropagation();\r\n                //e.preventDefault();\r\n                eventer.stop(e);\r\n\r\n                ///self._states.showPaletteOnly = !self._states.showPaletteOnly;\r\n\r\n                // To make sure the Picker area is drawn on the right, next to the\r\n                // Palette area (and not below the palette), first move the Palette\r\n                // to the left to make space for the picker, plus 5px extra.\r\n                // The 'applyOptions' function puts the whole container back into place\r\n                // and takes care of the button-text and the sp-palette-only CSS class.\r\n                /*\r\n                if (!self._states.showPaletteOnly && !opts.flat) {\r\n                    self.$container.css('left', '-=' + (self.$pickerContainer.outerWidth(true) + 5));\r\n                }\r\n                */\r\n                self.stating(\"showPaletteOnly\",!self.stating(\"showPaletteOnly\"));\r\n                //self._applyOptions();\r\n            });\r\n\r\n            if (!!this._initialColor) {\r\n                this.set(this._initialColor);\r\n\r\n                // In case color was black - update the preview UI and set the format\r\n                // since the set function will not run (default color is black).\r\n                self._updateUI();\r\n                //this._currentPreferredFormat = opts.preferredFormat || Color.parse(this._initialColor).format;\r\n\r\n                //self._addColorToSelectionPalette(this._initialColor);\r\n            } else {\r\n                this._updateUI();\r\n            }\r\n\r\n            if (opts.flat) {\r\n                this.show();\r\n            }\r\n\r\n        },\r\n\r\n        revert :  function () {\r\n            this.set(this._colorOnShow, true);\r\n            this._updateOriginalInput(true);\r\n        },\r\n\r\n\r\n        get : function (opts) {\r\n            opts = opts || { };\r\n\r\n            if (this._allowEmpty && this._isEmpty) {\r\n                return null;\r\n            }\r\n\r\n            /*\r\n            return fromRatio({\r\n                h: currentHue,\r\n                s: currentSaturation,\r\n                v: currentValue,\r\n                a: Math.round(currentAlpha * 1000) / 1000\r\n            }, { format: opts.format || currentPreferredFormat });\r\n            */\r\n            return Color.parse({\r\n                h: this._currentHue * 360,\r\n                s: this._currentSaturation,\r\n                v: this._currentValue,\r\n                a: Math.round(this._currentAlpha * 1000) / 1000\r\n            });\r\n        },\r\n\r\n\r\n        set : function (color, ignoreFormatChange) {\r\n            var opts = this.options;\r\n\r\n            if (Color.equals(color, this.get())) {\r\n                // Update UI just in case a validation error needs\r\n                // to be cleared.\r\n                this._updateUI();\r\n                return;\r\n            }\r\n\r\n            var newColor, newHsv;\r\n            if (!color && this.stating(\"allowEmpty\")) {\r\n                this._isEmpty = true;\r\n            } else {\r\n                this._isEmpty = false;\r\n                newColor = Color.parse(color);\r\n                newHsv = newColor.toHsv();\r\n\r\n                this._currentHue = (newHsv.h % 360) / 360;\r\n                this._currentSaturation = newHsv.s;\r\n                this._currentValue = newHsv.v;\r\n                this._currentAlpha = newHsv.a;\r\n            }\r\n            this._updateUI();\r\n\r\n            if (newColor && newColor.isValid() && !ignoreFormatChange) {\r\n                this._currentPreferredFormat = opts.preferredFormat || newColor.getFormat();\r\n            }\r\n        },\r\n\r\n        _applyStates : function() {\r\n           var states = this._states ;\r\n\r\n            if (states.showPaletteOnly) {\r\n                states.showPalette = true;\r\n            }\r\n\r\n            this.$toggleButton.text(states.showPaletteOnly ? this.option(\"texts.togglePaletteMoreText\"): this.option(\"texts.togglePaletteLessText\"));\r\n\r\n\r\n            this.$el.toggleClass(\"sp-input-disabled\", !states.showInput)\r\n                            .toggleClass(\"sp-clear-enabled\", !!states.allowEmpty)\r\n                            .toggleClass(\"sp-alpha-enabled\", states.showAlpha)\r\n                            .toggleClass(\"sp-buttons-disabled\", !states.showButtons)\r\n                            .toggleClass(\"sp-palette-buttons-disabled\", !states.togglePaletteOnly)\r\n                            .toggleClass(\"sp-palette-disabled\", !states.showPalette)\r\n                            .toggleClass(\"sp-palette-only\", states.showPaletteOnly)\r\n                            .toggleClass(\"sp-initial-disabled\", !states.showInitial);\r\n\r\n            if (states.showPaletteOnly && !this.option(\"flat\")) {\r\n                this.$el.css('left', '-=' + (this.$pickerContainer.outerWidth(true) + 5));\r\n            }\r\n        },\r\n\r\n        stating : function(name,value) {\r\n            if (value !== undefined) {\r\n                this._states[name] = value;\r\n                this._applyStates();\r\n            } else {\r\n                return this._states[name];\r\n            }\r\n        },\r\n\r\n        reflow : function () {\r\n\r\n            ///if (!this.option(\"flat\")) {\r\n            ///   this.$container.css(\"position\", \"absolute\");\r\n            ///    var offset = this.option(\"offset\"); \r\n            ///    if (offset) {\r\n            ///        this.$container.offset(offset);\r\n            ///    } else {\r\n            ///        this.$container.offset(popups.calcOffset(this.$container[0], this.$offsetElement[0]));\r\n            ///    }\r\n            ///}\r\n\r\n            if (this.stating(\"showPalette\")) {\r\n                this.palette.reflow();\r\n            }\r\n\r\n            this.picker.reflow();\r\n\r\n        },\r\n\r\n        toggle : function () {\r\n            if (this._visible) {\r\n                this.hide();\r\n            } else {\r\n                this.show();\r\n            }\r\n        },\r\n\r\n        show : function () {\r\n            if (this._visible) {\r\n                this.reflow();\r\n                return;\r\n            }\r\n            \r\n            this._visible = true;\r\n\r\n            //$(doc).on(\"keydown.ColorPane\", onkeydown);\r\n            //$(doc).on(\"click.ColorPane\", clickout);\r\n            //$(window).on(\"resize.ColorPane\", resize);\r\n            ///this.$replacer.addClass(\"sp-active\");\r\n            this.$el.removeClass(\"sp-hidden\");\r\n\r\n            this.reflow();\r\n            \r\n            this._updateUI();\r\n\r\n            //this._drawInitial();\r\n            \r\n        },\r\n        hide : function () {\r\n            // Return if hiding is unnecessary\r\n            if (!this._visible || this._flat) { return; }\r\n            this._visible = false;\r\n\r\n            //$(doc).off(\"keydown.ColorPane\", onkeydown);\r\n            //$(doc).off(\"click.ColorPane\", clickout);\r\n            //$(window).off(\"resize.ColorPane\", resize);\r\n\r\n            ///this.$replacer.removeClass(\"sp-active\");\r\n            this.$el.addClass(\"sp-hidden\");\r\n        },\r\n\r\n        destroy : function () {\r\n            ///this.$el.show();\r\n            ///this.$offsetElement.off(\"click.ColorPane touchstart.ColorPane\");\r\n            ///this.$container.remove();\r\n            ///this.$replacer.remove();\r\n            //pickers[spect.id] = null;\r\n        }\r\n\r\n    });\r\n\r\n\r\n    plugins.register(ColorPane);\r\n\r\n    ColorPane.localization = {};\r\n\r\n    return colors.ColorPane = ColorPane;\r\n\r\n});"]}