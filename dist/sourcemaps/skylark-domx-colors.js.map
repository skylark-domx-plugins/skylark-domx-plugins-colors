{"version":3,"sources":["skylark-domx-colors.js"],"names":["define","skylark","attach","browser","$","Color","isIE","paletteTemplate","p","color","className","opts","html","i","length","current","tiny","parse","c","toHsl","l","equals","formattedString","toString","preferredFormat","swatchStyle","toRgbString","push","append","attr","texts","noColorSelectedText","join","langx","noder","eventer","finder","plugins","Indicator","Plugin","inherit","klassName","pluginName","options","_construct","elm","this","overrided","listenTo","elmx","e","_start","_move","_dragging","offset","_offset","pageX","pageY","maxWidth","_maxWidth","maxHeight","_maxHeight","dragX","Math","max","min","left","dragY","top","onmove","apply","_elm","rightclick","which","button","onstart","arguments","$el","height","width","$doc","document","mousemove","mouseup","_stop","find","addClass","stop","unlistenTo","removeClass","onstop","_delay","register","styler","colors","helper","ColorPicker","selectors","dragger","dragHelper","slider","slideHelper","alphaSliderInner","alphaSlider","alphaSlideHelper","textInput","initialColorContainer","cancelButton","clearButton","chooseButton","draggingClass","cancelText","chooseText","clearText","states","showInput","allowEmpty","showButtons","showInitial","showAlpha","_drawInitial","stating","initial","_initialColor","get","$initialColorContainer","_updateHelperLocations","s","_currentSaturation","v","_currentValue","_isEmpty","$alphaSlideHelper","hide","$slideHelper","$dragHelper","show","_dragWidth","_dragHeight","_dragHelperHeight","css","alphaX","_currentAlpha","_alphaWidth","_alphaSlideHelperWidth","slideY","_slideHeight","_slideHelperHeight","_updateOriginalInput","fireCallback","displayColor","_colorOnShow","_currentPreferredFormat","_addColorToSelectionPalette","_isInput","val","_updateUI","$dragger","_slideWidth","$slider","$alphaSlider","$textInput","flatColor","h","_currentHue","toHexString","format","realColor","realHex","rgb","toRgb","a","realAlpha","gradient","$alphaSliderInner","toFilter","gradientType","_drawPalette","_applyOptions","_states","_applyStates","reflow","initialColor","theme","$cancelButton","$clearButton","$chooseButton","_init","self","dragStart","_isDragging","_shiftMovementDirection","dragStop","move","setFromTextInput","value","_allowEmpty","isValid","set","change","on","setTimeout","keydown","keyCode","text","revert","flat","plugin","shiftKey","round","parseFloat","oldDragX","oldDragY","furtherFromX","abs","setSaturation","setValue","paletteEvent","ignore","data","target","closest","hideAfterPaletteSelect","self_updateOriginalInput","ignoreFormatChange","newColor","newHsv","toHsv","getFormat","toggleClass","name","undefined","fx","noop","ColorPalette","palette","selectionPalette","_paletteLookup","inArray","_selectionPalette","_maxSelectionSize","shift","getUniqueSelectionPalette","unique","reverse","slice","maxSelectionSize","currentColor","map","_paletteArray","showSelectionPalette","_palette","paletteArray","isArray","paletteLookup","j","emit","_current","popups","ColorPane","pickerContainer","toggleButton","paletteContainer","togglePaletteMoreText","togglePaletteLessText","showPalette","showPaletteOnly","togglePaletteOnly","picker","$pickerContainer","$paletteContainer","$toggleButton","instantiate","$container","option","outerWidth","toggle","_visible","_flat","destroy","localization","ColorBox","pane","$previewElement","realRgb","$pane","template","mixin","paneIsVisible","hidePane","showPane","calcOffset","replaceInput","markup","colorer","elmInput","appendTo","containerClassName","replacerClassName","ownerDocument","isInput","is","shouldReplace","_shouldReplace","$replacer","after","$appendTo","parent","fn","wraps","wrapper_every_act","main"],"mappings":"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","file":"../skylark-domx-colors.js","sourcesContent":["define('skylark-domx-colors/colors',[\r\n\t\"skylark-langx/skylark\"\r\n],function(skylark){\r\n\treturn skylark.attach(\"domx.colores\",{});\r\n});\ndefine('skylark-domx-colors/helper',[\r\n    \"skylark-domx-browser\",\r\n    \"skylark-domx-query\",\r\n    \"skylark-graphics-color\"    \r\n],function(browser,$,Color){\r\n    function paletteElementClick(e) {\r\n        if (e.data && e.data.ignore) {\r\n            self.set($(e.target).closest(\".sp-thumb-el\").data(\"color\"));\r\n            move();\r\n        }\r\n        else {\r\n            self.set($(e.target).closest(\".sp-thumb-el\").data(\"color\"));\r\n            move();\r\n\r\n            // If the picker is going to close immediately, a palette selection\r\n            // is a change.  Otherwise, it's a move only.\r\n            if (opts.hideAfterPaletteSelect) {\r\n                self_updateOriginalInput(true);\r\n                self.hide();\r\n            } else {\r\n                self._updateOriginalInput();\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    var paletteEvent = browser.isIE ? \"mousedown.ColorPicker\" : \"click.ColorPicker touchstart.ColorPicker\";\t\r\n\r\n    function paletteTemplate (p, color, className, opts) {\r\n        var html = [];\r\n        for (var i = 0; i < p.length; i++) {\r\n            var current = p[i];\r\n            if(current) {\r\n                var tiny = Color.parse(current);\r\n                var c = tiny.toHsl().l < 0.5 ? \"sp-thumb-el sp-thumb-dark\" : \"sp-thumb-el sp-thumb-light\";\r\n                c += (Color.equals(color, current)) ? \" sp-thumb-active\" : \"\";\r\n                var formattedString = tiny.toString(opts.preferredFormat || \"rgb\");\r\n                var swatchStyle = \"background-color:\" + tiny.toRgbString();\r\n                html.push('<span title=\"' + formattedString + '\" data-color=\"' + tiny.toRgbString() + '\" class=\"' + c + '\"><span class=\"sp-thumb-inner\" style=\"' + swatchStyle + ';\" /></span>');\r\n            } else {\r\n                var cls = 'sp-clear-display';\r\n                html.push($('<div />')\r\n                    .append($('<span data-color=\"\" style=\"background-color:transparent;\" class=\"' + cls + '\"></span>')\r\n                        .attr('title', opts.texts.noColorSelectedText)\r\n                    )\r\n                    .html()\r\n                );\r\n            }\r\n        }\r\n        return \"<div class='sp-cf \" + className + \"'>\" + html.join('') + \"</div>\";\r\n    }\r\n\r\n    return {\r\n    \tpaletteTemplate\r\n    }\r\n});\r\n\ndefine('skylark-domx-colors/Indicator',[\r\n   \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-browser\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-eventer\",\r\n    \"skylark-domx-finder\",\r\n    \"skylark-domx-query\",\r\n    \"skylark-domx-plugins\"    \r\n],function(skylark, langx, browser, noder, eventer,finder, $,plugins) {\r\n    /**\r\n    * Lightweight drag helper.  Handles containment within the element, so that\r\n    * when dragging, the x is within [0,element.width] and y is within [0,element.height]\r\n    */\r\n    function draggable(element, onmove, onstart, onstop) {\r\n        onmove = onmove || function () { };\r\n        onstart = onstart || function () { };\r\n        onstop = onstop || function () { };\r\n        var doc = document;\r\n        var dragging = false;\r\n        var offset = {};\r\n        var maxHeight = 0;\r\n        var maxWidth = 0;\r\n        var hasTouch = ('ontouchstart' in window);\r\n\r\n        var duringDragEvents = {};\r\n        duringDragEvents[\"selectstart\"] = prevent;\r\n        duringDragEvents[\"dragstart\"] = prevent;\r\n        duringDragEvents[\"touchmove mousemove\"] = move;\r\n        duringDragEvents[\"touchend mouseup\"] = stop;\r\n\r\n        function prevent(e) {\r\n            if (e.stopPropagation) {\r\n                e.stopPropagation();\r\n            }\r\n            if (e.preventDefault) {\r\n                e.preventDefault();\r\n            }\r\n            e.returnValue = false;\r\n        }\r\n\r\n        function move(e) {\r\n            if (dragging) {\r\n                // Mouseup happened outside of window\r\n                if (browser.isIE && doc.documentMode < 9 && !e.button) {\r\n                    return stop();\r\n                }\r\n\r\n                var t0 = e.originalEvent && e.originalEvent.touches && e.originalEvent.touches[0];\r\n                var pageX = t0 && t0.pageX || e.pageX;\r\n                var pageY = t0 && t0.pageY || e.pageY;\r\n\r\n                var dragX = Math.max(0, Math.min(pageX - offset.left, maxWidth));\r\n                var dragY = Math.max(0, Math.min(pageY - offset.top, maxHeight));\r\n\r\n                if (hasTouch) {\r\n                    // Stop scrolling in iOS\r\n                    prevent(e);\r\n                }\r\n\r\n                onmove.apply(element, [dragX, dragY, e]);\r\n            }\r\n        }\r\n\r\n        function start(e) {\r\n            var rightclick = (e.which) ? (e.which == 3) : (e.button == 2);\r\n\r\n            var onstart = this.options.onstart || funcs.noop;\r\n\r\n            if (!rightclick && !dragging) {\r\n                if (onstart.apply(element, arguments) !== false) {\r\n                    dragging = true;\r\n                    maxHeight = $(element).height();\r\n                    maxWidth = $(element).width();\r\n                    offset = $(element).offset();\r\n\r\n                    $(doc).on(duringDragEvents);\r\n                    $(doc.body).addClass(\"sp-dragging\");\r\n\r\n                    move(e);\r\n\r\n                    prevent(e);\r\n                }\r\n            }\r\n        }\r\n\r\n        function stop() {\r\n            if (dragging) {\r\n                $(doc).off(duringDragEvents);\r\n                $(doc.body).removeClass(\"sp-dragging\");\r\n\r\n                // Wait a tick before notifying observers to allow the click event\r\n                // to fire in Chrome.\r\n                setTimeout(function() {\r\n                    onstop.apply(element, arguments);\r\n                }, 0);\r\n            }\r\n            dragging = false;\r\n        }\r\n\r\n        $(element).on(\"touchstart mousedown\", start);\r\n    }\r\n\t\r\n\r\n    var Indicator = plugins.Plugin.inherit({\r\n        klassName : \"Indicator\",\r\n\r\n        pluginName : \"domx.indicator\",\r\n\r\n        options : {\r\n        },\r\n\r\n        _construct: function(elm, options) {\r\n            this.overrided(elm,options);\r\n\r\n            this.listenTo(this.elmx(),\"mousedown\" , (e) => {\r\n                this._start(e);\r\n            });\r\n\r\n        },\r\n\r\n        _move : function(e) {\r\n            if (this._dragging) {\r\n                var offset = this._offset,\r\n                    pageX = e.pageX,\r\n                    pageY = e.pageY,\r\n                    maxWidth = this._maxWidth,\r\n                    maxHeight = this._maxHeight;\r\n\r\n                var dragX = Math.max(0, Math.min(pageX - offset.left, maxWidth));\r\n                var dragY = Math.max(0, Math.min(pageY - offset.top, maxHeight));\r\n\r\n                var onmove = this.options.onmove;\r\n                if (onmove) {\r\n                    onmove.apply(this._elm, [dragX, dragY, e]);\r\n                }\r\n            }\r\n        },\r\n\r\n        _start : function(e) {\r\n            var rightclick = (e.which) ? (e.which == 3) : (e.button == 2);\r\n\r\n            if (!rightclick && !this._dragging) {\r\n                var onstart = this.options.onstart;\r\n                if (!onstart || onstart.apply(this._elm, arguments) !== false) {\r\n                    this._dragging = true;\r\n                    var $el = this.$();\r\n\r\n                    this._maxHeight = $el.height();\r\n                    this._maxWidth = $el.width();\r\n                    this._offset = $el.offset();\r\n\r\n                    var $doc = this.$(document)\r\n\r\n                    this.listenTo($doc,{\r\n                        \"mousemove\" : (e) => {\r\n                            this._move(e);\r\n                        },\r\n                        \"mouseup\" : (e) => {\r\n                            this._stop(e);\r\n                        }                \r\n                    });\r\n                    $doc.find(\"body\").addClass(\"sp-dragging\");\r\n\r\n                    this._move(e);\r\n\r\n                    eventer.stop(e);\r\n                }\r\n            }\r\n        },\r\n\r\n        _stop : function(e) {\r\n            var $doc = this.$(document);\r\n            if (this._dragging) {\r\n                this.unlistenTo($doc);\r\n                $doc.find(\"body\").removeClass(\"sp-dragging\");\r\n\r\n                onstop = this.options.onstop;\r\n\r\n                // Wait a tick before notifying observers to allow the click event\r\n                // to fire in Chrome.\r\n                if (onstop) {\r\n                    this._delay(function() {\r\n                        onstop.apply(this._elm, arguments);\r\n                    });\r\n                }\r\n            }\r\n            this._dragging = false;            \r\n        }\r\n    });\r\n\r\n    plugins.register(Indicator);\r\n\r\n\treturn Indicator;\r\n});\ndefine('skylark-domx-colors/ColorPicker',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-browser\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-finder\",\r\n    \"skylark-domx-query\",\r\n    \"skylark-domx-eventer\",\r\n    \"skylark-domx-styler\",\r\n    \"skylark-domx-plugins\",\r\n    \"skylark-graphics-color\",\r\n    \"./colors\",\r\n    \"./helper\",\r\n    \"./Indicator\"\r\n],function(langx, browser, noder, finder, $,eventer, styler,plugins,Color,colors,helper,Indicator) {\r\n    \"use strict\";\r\n\r\n    var ColorPicker = plugins.Plugin.inherit({\r\n        klassName : \"ColorPicker\",\r\n\r\n        pluginName : \"domx.colors.picker\",\r\n\r\n        options : {\r\n            selectors  : {\r\n                dragger : \".sp-color\",\r\n                dragHelper : \".sp-dragger\",\r\n                slider : \".sp-hue\",\r\n                slideHelper : \".sp-slider\",\r\n                alphaSliderInner : \".sp-alpha-inner\",\r\n                alphaSlider : \".sp-alpha\",\r\n                alphaSlideHelper : \".sp-alpha-handle\",\r\n                textInput : \".sp-input\",\r\n                initialColorContainer : \".sp-initial\",\r\n                cancelButton : \".sp-cancel\",\r\n                clearButton : \".sp-clear\",\r\n                chooseButton : \".sp-choose\"\r\n            },\r\n\r\n            draggingClass : \"sp-dragging\",\r\n\r\n            texts : {\r\n                cancelText: \"cancel\",\r\n                chooseText: \"choose\",\r\n                clearText: \"Clear Color Selection\",\r\n                noColorSelectedText: \"No Color Selected\"\r\n            },\r\n\r\n            states : {\r\n                showInput: false,\r\n                allowEmpty: false,\r\n                showButtons: true,\r\n                showInitial: false,\r\n                showAlpha: false\r\n            },\r\n\r\n            // Options\r\n            color: false\r\n        },\r\n        \r\n        _drawInitial : function () {\r\n            var opts = this.options;\r\n            if (this.stating(\"showInitial\")) {\r\n                var initial = this._initialColor;\r\n                var current = this.get();\r\n                this.$initialColorContainer.html(\r\n                    helper.paletteTemplate([initial, current], current, \"sp-palette-row-initial\", opts)\r\n                );\r\n            }\r\n        },\r\n\r\n        _updateHelperLocations : function () {\r\n            var s = this._currentSaturation;\r\n            var v = this._currentValue;\r\n\r\n            if(this.stating(\"allowEmpty\") && this._isEmpty) {\r\n                //if selected color is empty, hide the helpers\r\n                this.$alphaSlideHelper.hide();\r\n                this.$slideHelper.hide();\r\n                this.$dragHelper.hide();\r\n            }\r\n            else {\r\n                //make sure helpers are visible\r\n                this.$alphaSlideHelper.show();\r\n                this.$slideHelper.show();\r\n                this.$dragHelper.show();\r\n\r\n                // Where to show the little circle in that displays your current selected color\r\n                var dragX = s * this._dragWidth;\r\n                var dragY = this._dragHeight - (v * this._dragHeight);\r\n                dragX = Math.max(\r\n                    -this._dragHelperHeight,\r\n                    Math.min(this._dragWidth - this._dragHelperHeight, dragX - this._dragHelperHeight)\r\n                );\r\n                dragY = Math.max(\r\n                    -this._dragHelperHeight,\r\n                    Math.min(this._dragHeight - this._dragHelperHeight, dragY - this._dragHelperHeight)\r\n                );\r\n                this.$dragHelper.css({\r\n                    \"top\": dragY + \"px\",\r\n                    \"left\": dragX + \"px\"\r\n                });\r\n\r\n                var alphaX = this._currentAlpha * this._alphaWidth;\r\n                this.$alphaSlideHelper.css({\r\n                    \"left\": (alphaX - (this._alphaSlideHelperWidth / 2)) + \"px\"\r\n                });\r\n\r\n                // Where to show the bar that displays your current selected hue\r\n                var slideY = (this._currentHue) * this._slideHeight;\r\n                this.$slideHelper.css({\r\n                    \"top\": (slideY - this._slideHelperHeight) + \"px\"\r\n                });\r\n            }\r\n        },\r\n\r\n        _updateOriginalInput : function (fireCallback) {\r\n            var color = this.get(),\r\n                displayColor = '',\r\n                hasChanged = !Color.equals(color, this._colorOnShow);\r\n\r\n            if (color) {\r\n                displayColor = color.toString(this._currentPreferredFormat);\r\n                // Update the selection palette with the current color\r\n                this._addColorToSelectionPalette(color);\r\n            }\r\n\r\n            if (this._isInput) {\r\n                this.$el.val(displayColor);\r\n            }\r\n\r\n            if (fireCallback && hasChanged) {\r\n                //callbacks.change(color);\r\n                //this.$el.trigger('change', [ color ]);\r\n            }\r\n        },\r\n\r\n        _updateUI : function () {\r\n            var opts = this.options;\r\n\r\n            this._dragWidth = this.$dragger.width();\r\n            this._dragHeight = this.$dragger.height();\r\n            this._dragHelperHeight = this.$dragHelper.height();\r\n            this._slideWidth = this.$slider.width();\r\n            this._slideHeight = this.$slider.height();\r\n            this._slideHelperHeight = this.$slideHelper.height();\r\n            this._alphaWidth = this.$alphaSlider.width();\r\n            this._alphaSlideHelperWidth = this.$alphaSlideHelper.width();\r\n            \r\n            this.$textInput.removeClass(\"sp-validation-error\");\r\n\r\n            this._updateHelperLocations();\r\n\r\n            // Update dragger background color (gradients take care of saturation and value).\r\n            //var flatColor = Color.fromRatio({ h: currentHue, s: 1, v: 1 });\r\n            var flatColor = Color.parse({ \r\n                h: this._currentHue * 360, \r\n                s: 1, \r\n                v: 1 \r\n            });\r\n            this.$dragger.css(\"background-color\", flatColor.toHexString());\r\n\r\n            // Get a format that alpha will be included in (hex and names ignore alpha)\r\n            var format = this._currentPreferredFormat;\r\n            if (this._currentAlpha < 1 && !(this._currentAlpha === 0 && format === \"name\")) {\r\n                if (format === \"hex\" || format === \"hex3\" || format === \"hex6\" || format === \"name\") {\r\n                    format = \"rgb\";\r\n                }\r\n            }\r\n\r\n            var realColor = this.get({ format: format }),\r\n                displayColor = '';\r\n\r\n            if (!realColor && this.stating(\"allowEmpty\")) {\r\n            }\r\n            else {\r\n                var realHex = realColor.toHexString(),\r\n                    realRgb = realColor.toRgbString();\r\n\r\n                if (this.stating(\"showAlpha\")) {\r\n                    var rgb = realColor.toRgb();\r\n                    rgb.a = 0;\r\n                    var realAlpha = Color.parse(rgb).toRgbString();\r\n                    var gradient = \"linear-gradient(left, \" + realAlpha + \", \" + realHex + \")\";\r\n\r\n                    if (browser.isIE) {\r\n                        this.$alphaSliderInner.css(\"filter\", Color.parse(realAlpha).toFilter({ gradientType: 1 }, realHex));\r\n                    }\r\n                    else {\r\n                        this.$alphaSliderInner.css(\"background\", \"-webkit-\" + gradient);\r\n                        this.$alphaSliderInner.css(\"background\", \"-moz-\" + gradient);\r\n                        this.$alphaSliderInner.css(\"background\", \"-ms-\" + gradient);\r\n                        // Use current syntax gradient on unprefixed property.\r\n                        this.$alphaSliderInner.css(\"background\",\r\n                            \"linear-gradient(to right, \" + realAlpha + \", \" + realHex + \")\");\r\n                    }\r\n                }\r\n\r\n                displayColor = realColor.toString(format);\r\n            }\r\n\r\n            // Update the text entry input as it changes happen\r\n            if (this.stating(\"showInput\")) {\r\n                this.$textInput.val(displayColor);\r\n            }\r\n\r\n            if (this.stating(\"showPalette\")) {\r\n                this._drawPalette();\r\n            }\r\n\r\n            this._drawInitial();\r\n        },\r\n\r\n\r\n        _applyOptions : function () {\r\n            var opts = this.options;\r\n\r\n            this._states = {\r\n                allowEmpty : opts.states.allowEmpty,\r\n                showInput : opts.states.showInput,\r\n                showAlpha : opts.states.showAlpha,\r\n                showButtons : opts.states.showButtons,\r\n                showInitial : opts.states.showInitial\r\n            };\r\n\r\n\r\n           this._applyStates();\r\n\r\n           this.reflow();\r\n        },\r\n\r\n         _construct: function(elm, options) {\r\n            this.overrided(elm,options);\r\n\r\n            var $el = this.$el = this.$();\r\n\r\n            var opts = this.options,\r\n                theme = opts.theme;\r\n\r\n\r\n\r\n            var                \r\n                dragger = this.$dragger = $el.find(opts.selectors.dragger),\r\n                dragHelper = this.$dragHelper = $el.find(opts.selectors.dragHelper),\r\n                slider = this.$slider = $el.find(opts.selectors.slider),\r\n                slideHelper = this.$slideHelper =  $el.find(opts.selectors.slideHelper),\r\n                alphaSliderInner = this.$alphaSliderInner = $el.find(opts.selectors.alphaSliderInner),\r\n                alphaSlider = this.$alphaSlider = $el.find(opts.selectors.alphaSlider),\r\n                alphaSlideHelper = this.$alphaSlideHelper = $el.find(opts.selectors.alphaSlideHelper),\r\n                textInput = this.$textInput = $el.find(opts.selectors.textInput),\r\n                initialColorContainer = this.$initialColorContainer = $el.find(opts.selectors.initialColorContainer),\r\n                cancelButton = this.$cancelButton = $el.find(opts.selectors.cancelButton),\r\n                clearButton = this.$clearButton = $el.find(opts.selectors.clearButton),\r\n                chooseButton = this.$chooseButton = $el.find(opts.selectors.chooseButton),\r\n                initialColor = this._initialColor =  opts.color,\r\n                currentPreferredFormat = this._currentPreferredFormat = opts.preferredFormat,\r\n                isEmpty = this._isEmpty =  !initialColor;\r\n\r\n\r\n            this._init();\r\n\r\n        },\r\n\r\n        _init : function () {\r\n            var self = this,\r\n                opts = this.options;\r\n             function dragStart() {\r\n                if (self._dragHeight <= 0 || self._dragWidth <= 0 || self._slideHeight <= 0) {\r\n                    self.reflow();\r\n                }\r\n                self._isDragging = true;\r\n                self.$el.addClass(self.options.draggingClass);\r\n                self._shiftMovementDirection = null;\r\n                //this.$el.trigger('dragstart.ColorPicker', [ get() ]);\r\n            }\r\n\r\n            function dragStop() {\r\n                self._isDragging = false;\r\n                self.$el.removeClass(self.options.draggingClass);\r\n                //this.$el.trigger('dragstop.ColorPicker', [ get() ]);\r\n            }           \r\n\r\n            function move() {\r\n                self._updateUI();\r\n\r\n                //callbacks.move(get());\r\n                //this.$el.trigger('move.ColorPicker', [ get() ]);\r\n            }\r\n\r\n            this._applyOptions();\r\n\r\n            function setFromTextInput() {\r\n                var value = textInput.val();\r\n\r\n                if ((value === null || value === \"\") && self._allowEmpty) {\r\n                    self.set(null);\r\n                    move();\r\n                    self._updateOriginalInput();\r\n                }\r\n                else {\r\n                    var tiny = Color.parse(value);\r\n                    if (tiny.isValid()) {\r\n                        self.set(tiny);\r\n                        move();\r\n                        self._updateOriginalInput();\r\n                    }\r\n                    else {\r\n                        self.$textInput.addClass(\"sp-validation-error\");\r\n                    }\r\n                }\r\n            }\r\n            this.$textInput.change(setFromTextInput);\r\n            this.$textInput.on(\"paste\", function () {\r\n                setTimeout(setFromTextInput, 1);\r\n            });\r\n            this.$textInput.keydown(function (e) { if (e.keyCode == 13) { setFromTextInput(); } });\r\n\r\n            this.$cancelButton.text(opts.texts.cancelText);\r\n            \r\n            this.listenTo(this.$cancelButton,\"click\", function (e) {\r\n                eventer.stop(e);\r\n                self.revert();\r\n                self.hide();\r\n            });\r\n\r\n            this.$clearButton.attr(\"title\", opts.texts.clearText);\r\n            this.listenTo(this.$clearButton,\"click\", function (e) {\r\n                //e.stopPropagation();\r\n                //e.preventDefault();\r\n                eventer.stop(e);\r\n                self._isEmpty = true;\r\n                move();\r\n\r\n                if(opts.flat) {\r\n                    //for the flat style, this is a change event\r\n                    self._updateOriginalInput(true);\r\n                }\r\n            });\r\n\r\n            this.$chooseButton.text(opts.texts.chooseText);\r\n            this.listenTo(this.$chooseButton,\"click\", function (e) {\r\n                eventer.stop(e);\r\n\r\n                self._updateOriginalInput(true);\r\n                self.hide();\r\n            });\r\n          \r\n            this.$alphaSlider.plugin(\"domx.indicator\", {\r\n                \"onmove\" :   function (dragX, dragY, e) {\r\n                    self._currentAlpha = (dragX / self._alphaWidth);\r\n                    self._isEmpty = false;\r\n                    if (e.shiftKey) {\r\n                        self._currentAlpha = Math.round(self._currentAlpha * 10) / 10;\r\n                    }\r\n\r\n                    move();\r\n                }, \r\n                \"onstart\" : dragStart, \r\n                \"onstop\" :dragStop\r\n            });\r\n\r\n            this.$slider.plugin(\"domx.indicator\", {\r\n                \"onmove\" :   function (dragX, dragY, e) {\r\n                    self._currentHue = parseFloat(dragY / self._slideHeight);\r\n                    self._isEmpty = false;\r\n                    if (!self.stating(\"showAlpha\")) {\r\n                        self._currentAlpha = 1;\r\n                    }\r\n                    move();\r\n                }, \r\n                \"onstart\" : dragStart, \r\n                \"onstop\" :dragStop\r\n            });\r\n\r\n            this.$dragger.plugin(\"domx.indicator\", {\r\n                \"onmove\" :   function (dragX, dragY, e) {\r\n\r\n                    // shift+drag should snap the movement to either the x or y axis.\r\n                    if (!e.shiftKey) {\r\n                        self._shiftMovementDirection = null;\r\n                    }\r\n                    else if (!self._shiftMovementDirection) {\r\n                        var oldDragX = self._currentSaturation * self._dragWidth;\r\n                        var oldDragY = self._dragHeight - (self._currentValue * self._dragHeight);\r\n                        var furtherFromX = Math.abs(dragX - oldDragX) > Math.abs(dragY - oldDragY);\r\n\r\n                        self._shiftMovementDirection = furtherFromX ? \"x\" : \"y\";\r\n                    }\r\n\r\n                    var setSaturation = !self._shiftMovementDirection || self._shiftMovementDirection === \"x\";\r\n                    var setValue = !self._shiftMovementDirection || self._shiftMovementDirection === \"y\";\r\n\r\n                    if (setSaturation) {\r\n                        self._currentSaturation = parseFloat(dragX / self._dragWidth);\r\n                    }\r\n                    if (setValue) {\r\n                        self._currentValue = parseFloat((self._dragHeight - dragY) / self._dragHeight);\r\n                    }\r\n\r\n                    self._isEmpty = false;\r\n                    if (!self.stating(\"showAlpha\")) {\r\n                        self._currentAlpha = 1;\r\n                    }\r\n\r\n                    move();\r\n                }, \r\n                \"onstart\" : dragStart, \r\n                \"onstop\" :dragStop\r\n            });\r\n\r\n            if (!!this._initialColor) {\r\n                this.set(this._initialColor);\r\n\r\n                // In case color was black - update the preview UI and set the format\r\n                // since the set function will not run (default color is black).\r\n                self._updateUI();\r\n                this._currentPreferredFormat = opts.preferredFormat || Color.parse(this._initialColor).format;\r\n            } else {\r\n                this._updateUI();\r\n            }\r\n\r\n            function paletteElementClick(e) {\r\n                if (e.data && e.data.ignore) {\r\n                    self.set($(e.target).closest(\".sp-thumb-el\").data(\"color\"));\r\n                    move();\r\n                }\r\n                else {\r\n                    self.set($(e.target).closest(\".sp-thumb-el\").data(\"color\"));\r\n                    move();\r\n\r\n                    // If the picker is going to close immediately, a palette selection\r\n                    // is a change.  Otherwise, it's a move only.\r\n                    if (opts.hideAfterPaletteSelect) {\r\n                        self_updateOriginalInput(true);\r\n                        self.hide();\r\n                    } else {\r\n                        self._updateOriginalInput();\r\n                    }\r\n                }\r\n\r\n                return false;\r\n            }\r\n\r\n            var paletteEvent = browser.isIE ? \"mousedown.ColorPicker\" : \"click.ColorPicker touchstart.ColorPicker\";\r\n            this.$initialColorContainer.on(paletteEvent, \".sp-thumb-el:nth-child(1)\", { ignore: true }, paletteElementClick);\r\n        },\r\n\r\n        revert :  function () {\r\n            this.set(this._initialColor, true);\r\n            this._updateOriginalInput(true);\r\n        },\r\n\r\n\r\n        get : function (opts) {\r\n            opts = opts || { };\r\n\r\n            if (this._allowEmpty && this._isEmpty) {\r\n                return null;\r\n            }\r\n\r\n            /*\r\n            return fromRatio({\r\n                h: currentHue,\r\n                s: currentSaturation,\r\n                v: currentValue,\r\n                a: Math.round(currentAlpha * 1000) / 1000\r\n            }, { format: opts.format || currentPreferredFormat });\r\n            */\r\n            return Color.parse({\r\n                h: this._currentHue * 360,\r\n                s: this._currentSaturation,\r\n                v: this._currentValue,\r\n                a: Math.round(this._currentAlpha * 1000) / 1000\r\n            });\r\n        },\r\n\r\n\r\n        set : function (color, ignoreFormatChange) {\r\n            var opts = this.options;\r\n\r\n            if (Color.equals(color, this.get())) {\r\n                // Update UI just in case a validation error needs\r\n                // to be cleared.\r\n                this._updateUI();\r\n                return;\r\n            }\r\n\r\n            var newColor, newHsv;\r\n            if (!color && this.stating(\"allowEmpty\")) {\r\n                this._isEmpty = true;\r\n            } else {\r\n                this._isEmpty = false;\r\n                newColor = Color.parse(color);\r\n                newHsv = newColor.toHsv();\r\n\r\n                this._currentHue = (newHsv.h % 360) / 360;\r\n                this._currentSaturation = newHsv.s;\r\n                this._currentValue = newHsv.v;\r\n                this._currentAlpha = newHsv.a;\r\n            }\r\n            this._updateUI();\r\n\r\n            if (newColor && newColor.isValid() && !ignoreFormatChange) {\r\n                this._currentPreferredFormat = opts.preferredFormat || newColor.getFormat();\r\n            }\r\n        },\r\n\r\n        _applyStates : function() {\r\n           var states = this._states ;\r\n\r\n            this.$el.toggleClass(\"sp-input-disabled\", !states.showInput)\r\n                        .toggleClass(\"sp-clear-enabled\", !!states.allowEmpty)\r\n                        .toggleClass(\"sp-alpha-enabled\", states.showAlpha)\r\n                        .toggleClass(\"sp-buttons-disabled\", !states.showButtons)\r\n                        .toggleClass(\"sp-initial-disabled\", !states.showInitial);\r\n\r\n            if (!states.allowEmpty) {\r\n                this.$clearButton.hide();\r\n            }\r\n\r\n            this._dragWidth = this.$dragger.width();\r\n            this._dragHeight = this.$dragger.height();\r\n            this._dragHelperHeight = this.$dragHelper.height();\r\n            this._slideWidth = this.$slider.width();\r\n            this._slideHeight = this.$slider.height();\r\n            this._slideHelperHeight = this.$slideHelper.height();\r\n            this._alphaWidth = this.$alphaSlider.width();\r\n            this._alphaSlideHelperWidth = this.$alphaSlideHelper.width();\r\n        },\r\n\r\n        stating : function(name,value) {\r\n            if (value !== undefined) {\r\n                this._states[name] = value;\r\n                this._applyStates();\r\n            } else {\r\n                return this._states[name];\r\n            }\r\n        },\r\n\r\n        reflow : function () {\r\n\r\n            this._updateHelperLocations();\r\n\r\n        }\r\n\r\n    });\r\n\r\n\r\n    plugins.register(ColorPicker);\r\n\r\n\r\n    return colors.ColorPicker = ColorPicker;\r\n\r\n});\ndefine('skylark-domx-colors/ColorPalette',[\r\n   \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-browser\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-finder\",\r\n    \"skylark-domx-query\",\r\n    \"skylark-domx-eventer\",\r\n    \"skylark-domx-styler\",\r\n    \"skylark-domx-fx\",\r\n    \"skylark-domx-plugins\",\r\n    \"skylark-graphics-color\",\r\n    \"./colors\",\r\n    \"./helper\"\r\n],function(skylark, langx, browser, noder, finder, $,eventer, styler,fx,plugins,Color,colors,helper) {\r\n    \"use strict\";\r\n\r\n    var noop = langx.noop;\r\n\r\n    var ColorPalette = plugins.Plugin.inherit({\r\n        klassName : \"ColorPalette\",\r\n\r\n        pluginName : \"domx.colors.palette\",\r\n\r\n        options : {\r\n            selectors  : {\r\n            },\r\n\r\n            texts : {\r\n            },\r\n\r\n            states : {\r\n            },\r\n            palette: [\r\n                [\"#ffffff\", \"#000000\", \"#ff0000\", \"#ff8000\", \"#ffff00\", \"#008000\", \"#0000ff\", \"#4b0082\", \"#9400d3\"]\r\n            ],\r\n            selectionPalette: []\r\n\r\n        },\r\n\r\n       _addColorToSelectionPalette : function (color) {\r\n            if (this.stating(\"showSelectionPalette\")) {\r\n                var rgb = Color.parse(color).toRgbString();\r\n                if (!this._paletteLookup[rgb] && langx.inArray(rgb, this._selectionPalette) === -1) {\r\n                    this._selectionPalette.push(rgb);\r\n                    while(this._selectionPalette.length > this._maxSelectionSize) {\r\n                        this._selectionPalette.shift();\r\n                    }\r\n                }\r\n            }\r\n        },  \r\n\r\n        getUniqueSelectionPalette : function () {\r\n            var unique = [],\r\n                opts = this.options;\r\n            if (this.stating(\"showPalette\")) {\r\n                for (var i = 0; i < this._selectionPalette.length; i++) {\r\n                    var rgb = Color.parse(this._selectionPalette[i]).toRgbString();\r\n\r\n                    if (!this._paletteLookup[rgb]) {\r\n                        unique.push(this._selectionPalette[i]);\r\n                    }\r\n                }\r\n            }\r\n\r\n            return unique.reverse().slice(0, opts.maxSelectionSize);\r\n        },\r\n\r\n        _drawPalette : function () {\r\n\r\n            var opts = this.options,\r\n                currentColor = this.current();\r\n\r\n            var html = langx.map(this._paletteArray, function (palette, i) {\r\n                return helper.paletteTemplate(palette, currentColor, \"sp-palette-row sp-palette-row-\" + i, opts);\r\n            });\r\n\r\n            if (this._selectionPalette) {\r\n                html.push(helper.paletteTemplate(this.getUniqueSelectionPalette(), currentColor, \"sp-palette-row sp-palette-row-selection\", opts));\r\n            }\r\n\r\n            this.$el.html(html.join(\"\"));\r\n        },\r\n\r\n\r\n        _updateUI : function () {\r\n           this._drawPalette();\r\n        },\r\n\r\n\r\n        _applyOptions : function () {\r\n            var opts = this.options;\r\n\r\n            this._states = {\r\n                showSelectionPalette: opts.showSelectionPalette\r\n            };            \r\n\r\n            if (opts.palette) {\r\n                var  palette = this._palette = opts.palette.slice(0),\r\n                    paletteArray = this._paletteArray = langx.isArray(palette[0]) ? palette : [palette],\r\n                    paletteLookup = this._paletteLookup = {};\r\n                for (var i = 0; i < paletteArray.length; i++) {\r\n                    for (var j = 0; j < paletteArray[i].length; j++) {\r\n                        var rgb = Color.parse(paletteArray[i][j]).toRgbString();\r\n                        paletteLookup[rgb] = true;\r\n                    }\r\n                }\r\n            }\r\n           this._applyStates();\r\n           this.reflow();\r\n        },\r\n\r\n         _construct: function(elm, options) {\r\n            this.overrided(elm,options);\r\n\r\n            this.$el = this.$();\r\n\r\n            var opts = this.options,\r\n                initialColor = this._initialColor =  opts.color,\r\n                selectionPalette = this._selectionPalette =  opts.selectionPalette.slice(0);\r\n\r\n            this._init();\r\n\r\n        },\r\n\r\n        _init : function () {\r\n            var self = this,\r\n                opts = this.options;\r\n            this._applyOptions();\r\n\r\n\r\n            if (!!this._initialColor) {\r\n                this.current(this._initialColor);\r\n\r\n                // In case color was black - update the preview UI and set the format\r\n                // since the set function will not run (default color is black).\r\n                self._updateUI();\r\n                this._currentPreferredFormat = opts.preferredFormat || Color.parse(this._initialColor).format;\r\n\r\n                self._addColorToSelectionPalette(this._initialColor);\r\n            } else {\r\n                this._updateUI();\r\n            }\r\n\r\n            function paletteElementClick(e) {\r\n                self.current($(e.target).closest(\".sp-thumb-el\").data(\"color\"));\r\n                self.emit(\"selected\",self.current());\r\n                return false;\r\n            }\r\n\r\n            var paletteEvent = browser.isIE ? \"mousedown.palette\" : \"click.palette touchstart.palette\";\r\n            this.$el.on(paletteEvent, \".sp-thumb-el\", paletteElementClick);\r\n        },\r\n\r\n\r\n        _applyStates : function() {\r\n\r\n        },\r\n\r\n        stating : function(name,value) {\r\n        \tif (value !== undefined) {\r\n        \t\tthis._states[name] = value;\r\n        \t\tthis._applyStates();\r\n        \t} else {\r\n        \t\treturn this._states[name];\r\n        \t}\r\n        },\r\n\r\n        reflow : function () {\r\n           this._drawPalette();\r\n        },\r\n\r\n        current : function(color) {\r\n        \tif (color === undefined) {\r\n        \t\treturn this._current;\r\n        \t} else {\r\n        \t\tthis._current = color;\r\n        \t}\r\n        }\r\n\r\n    });\r\n\r\n\r\n    plugins.register(ColorPalette);\r\n\r\n    return colors.ColorPalette = ColorPalette;\r\n\r\n});\ndefine('skylark-domx-colors/ColorPane',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-browser\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-finder\",\r\n    \"skylark-domx-query\",\r\n    \"skylark-domx-eventer\",\r\n    \"skylark-domx-styler\",\r\n    \"skylark-domx-fx\",\r\n    \"skylark-domx-plugins\",\r\n    \"skylark-domx-popups\",\r\n    \"skylark-graphics-color\",\r\n    \"./colors\",\r\n    \"./ColorPicker\",\r\n    \"./ColorPalette\"\r\n],function(langx, browser, noder, finder, $,eventer, styler,fx,plugins,popups,Color,colors,ColorPicker,ColorPalette) {\r\n    \"use strict\";\r\n\r\n    var ColorPane = plugins.Plugin.inherit({\r\n        klassName : \"ColorPane\",\r\n\r\n        pluginName : \"domx.colors.pane\",\r\n\r\n        options : {\r\n            selectors  : {\r\n                pickerContainer : \".sp-picker-container\",\r\n                toggleButton : \".sp-palette-toggle\",\r\n                paletteContainer : \".sp-palette\"\r\n            },\r\n\r\n            draggingClass : \"sp-dragging\",           \r\n\r\n            texts : {\r\n                togglePaletteMoreText: \"more\",\r\n                togglePaletteLessText: \"less\",\r\n                clearText: \"Clear Color Selection\",\r\n                noColorSelectedText: \"No Color Selected\"\r\n            },\r\n\r\n            states : {\r\n                showPalette: false,\r\n                showPaletteOnly: false,\r\n                togglePaletteOnly: false,\r\n                showSelectionPalette: true,\r\n                showInput: false,\r\n                allowEmpty: false,\r\n                showButtons: true,\r\n                showInitial: false,\r\n                showAlpha: false\r\n            },\r\n\r\n            // Options\r\n            color: false,\r\n            maxSelectionSize: 7\r\n\r\n        },\r\n\r\n        _updateUI : function () {\r\n            var realColor = this.get(),\r\n                displayColor = '';\r\n             //reset background info for preview element\r\n            ///this.$previewElement.removeClass(\"sp-clear-display\");\r\n            ///this.$previewElement.css('background-color', 'transparent');\r\n\r\n            ///if (!realColor && this.stating(\"allowEmpty\")) {\r\n            ///    // Update the replaced elements background with icon indicating no color selection\r\n            ///    this.$previewElement.addClass(\"sp-clear-display\");\r\n            ///}\r\n            ///else {\r\n            ///    var realHex = realColor.toHexString(),\r\n            ///        realRgb = realColor.toRgbString();\r\n\r\n            ///    // Update the replaced elements background color (with actual selected color)\r\n            ///    this.$previewElement.css(\"background-color\", realRgb);\r\n\r\n            ///    displayColor = realColor.toString();\r\n            ///}\r\n\r\n            if (this.stating(\"showPalette\")) {\r\n                this.palette._updateUI();\r\n            }\r\n            this.picker._updateUI();\r\n        },\r\n\r\n\r\n        _applyOptions : function () {\r\n            var opts = this.options;\r\n\r\n            this._states = {\r\n                allowEmpty : opts.states.allowEmpty,\r\n                showInput : opts.states.showInput,\r\n                showAlpha : opts.states.showAlpha,\r\n                showButtons : opts.states.showButtons,\r\n                togglePaletteOnly : opts.states.togglePaletteOnly,\r\n                showPalette : opts.states.showPalette,\r\n                showPaletteOnly : opts.states.showPaletteOnly,\r\n                showSelectionPalette: opts.showSelectionPalette,\r\n                showInitial : opts.states.showInitial\r\n            };\r\n\r\n            //this.$container.toggleClass(\"sp-flat\", opts.flat)\r\n            //                .addClass(opts.containerClassName);\r\n\r\n           this._applyStates();\r\n\r\n           this.reflow();\r\n        },\r\n\r\n         _construct: function(elm, options) {\r\n            this.overrided(elm,options);\r\n\r\n            var $el = this.$el = this.$();\r\n\r\n            var opts = this.options,\r\n                theme = opts.theme;\r\n\r\n\r\n            var \r\n                //container = this.$container = $(markup,elm.ownerDocument).addClass(theme),\r\n                pickerContainer = this.$pickerContainer =  $el.find(opts.selectors.pickerContainer),\r\n                paletteContainer = this.$paletteContainer =  $el.find(opts.selectors.paletteContainer),\r\n                toggleButton = this.$toggleButton = $el.find(opts.selectors.toggleButton),\r\n                //isInput = this._isInput = this.$el.is(\"input\"),\r\n                //isInputTypeColor = isInput && this.$el.attr(\"type\") === \"color\",\r\n                //shouldReplace = this._shouldReplace =  isInput && !opts.flat,\r\n                //replacer = this.$replacer =  (shouldReplace) ? $(replaceInput).addClass(theme).addClass(opts.className).addClass(opts.replacerClassName) : $([]),\r\n                //offsetElement = this.$offsetElement =  (shouldReplace) ? replacer : this.$el,\r\n                // previewElement = this.$previewElement = replacer.find(\".sp-preview-inner\"),\r\n                // initialColor = this._initialColor =  opts.color || (isInput && this.$el.val()),\r\n                initialColor = this._initialColor =  opts.color,\r\n                isEmpty = this._isEmpty =  !initialColor;\r\n\r\n            if (paletteContainer[0]) {\r\n                this.palette = ColorPalette.instantiate(paletteContainer[0],{\r\n                    selectionPalette : opts.selectionPalette,\r\n                    color : opts.color,\r\n                    palette : opts.palette,\r\n                    selectionPalette : opts.selectionPalette\r\n                })\r\n            } \r\n\r\n            if (pickerContainer[0]) {\r\n                this.picker = ColorPicker.instantiate(pickerContainer[0],{\r\n                    color : opts.color,\r\n                    states : {\r\n                        showInput: opts.states.showInput,\r\n                        allowEmpty: opts.states.allowEmpty,\r\n                        showButtons: opts.states.showButtons,\r\n                        showInitial: opts.states.showInitial,\r\n                        showAlpha: opts.states.showAlpha                                            \r\n                    }\r\n                })               \r\n            }\r\n            this._init();\r\n\r\n        },\r\n\r\n        _init : function () {\r\n            var self = this,\r\n                opts = this.options;\r\n           if (browser.isIE) {\r\n                this.$container.find(\"*:not(input)\").attr(\"unselectable\", \"on\");\r\n            }\r\n\r\n            ///if (this._shouldReplace) {\r\n            ///    this.$el.after(this.$replacer).hide();\r\n            ///}\r\n\r\n\r\n            ///if (opts.flat) {\r\n            ///    this.$el.after(this.$container).hide();\r\n            ///} else {\r\n            ///    var appendTo = opts.appendTo === \"parent\" ? this.$el.parent() : $(opts.appendTo);\r\n            ///    if (appendTo.length !== 1) {\r\n            ///        appendTo = $(\"body\");\r\n            ///    }\r\n\r\n            ///    appendTo.append(this.$container);\r\n            ///}\r\n\r\n            this._applyOptions();\r\n\r\n            ///this.listenTo(this.$offsetElement,\"click touchstart\", function (e) {\r\n            ///    //if (!disabled) {\r\n            ///        self.toggle();\r\n            ///    //}\r\n\r\n            ///    e.stopPropagation();\r\n\r\n            ///    if (!$(e.target).is(\"input\")) {\r\n            ///        e.preventDefault();\r\n            ///    }\r\n            ///});\r\n\r\n          \r\n            this.listenTo(this.$toggleButton,\"click\", function (e) {\r\n                //e.stopPropagation();\r\n                //e.preventDefault();\r\n                eventer.stop(e);\r\n\r\n                ///self._states.showPaletteOnly = !self._states.showPaletteOnly;\r\n\r\n                // To make sure the Picker area is drawn on the right, next to the\r\n                // Palette area (and not below the palette), first move the Palette\r\n                // to the left to make space for the picker, plus 5px extra.\r\n                // The 'applyOptions' function puts the whole container back into place\r\n                // and takes care of the button-text and the sp-palette-only CSS class.\r\n                /*\r\n                if (!self._states.showPaletteOnly && !opts.flat) {\r\n                    self.$container.css('left', '-=' + (self.$pickerContainer.outerWidth(true) + 5));\r\n                }\r\n                */\r\n                self.stating(\"showPaletteOnly\",!self.stating(\"showPaletteOnly\"));\r\n                //self._applyOptions();\r\n            });\r\n\r\n            if (!!this._initialColor) {\r\n                this.set(this._initialColor);\r\n\r\n                // In case color was black - update the preview UI and set the format\r\n                // since the set function will not run (default color is black).\r\n                self._updateUI();\r\n                //this._currentPreferredFormat = opts.preferredFormat || Color.parse(this._initialColor).format;\r\n\r\n                //self._addColorToSelectionPalette(this._initialColor);\r\n            } else {\r\n                this._updateUI();\r\n            }\r\n\r\n            if (opts.flat) {\r\n                this.show();\r\n            }\r\n\r\n        },\r\n\r\n        revert :  function () {\r\n            this.set(this._colorOnShow, true);\r\n            this._updateOriginalInput(true);\r\n        },\r\n\r\n\r\n        get : function (opts) {\r\n            opts = opts || { };\r\n\r\n            if (this._allowEmpty && this._isEmpty) {\r\n                return null;\r\n            }\r\n\r\n            /*\r\n            return fromRatio({\r\n                h: currentHue,\r\n                s: currentSaturation,\r\n                v: currentValue,\r\n                a: Math.round(currentAlpha * 1000) / 1000\r\n            }, { format: opts.format || currentPreferredFormat });\r\n            */\r\n            return Color.parse({\r\n                h: this._currentHue * 360,\r\n                s: this._currentSaturation,\r\n                v: this._currentValue,\r\n                a: Math.round(this._currentAlpha * 1000) / 1000\r\n            });\r\n        },\r\n\r\n\r\n        set : function (color, ignoreFormatChange) {\r\n            var opts = this.options;\r\n\r\n            if (Color.equals(color, this.get())) {\r\n                // Update UI just in case a validation error needs\r\n                // to be cleared.\r\n                this._updateUI();\r\n                return;\r\n            }\r\n\r\n            var newColor, newHsv;\r\n            if (!color && this.stating(\"allowEmpty\")) {\r\n                this._isEmpty = true;\r\n            } else {\r\n                this._isEmpty = false;\r\n                newColor = Color.parse(color);\r\n                newHsv = newColor.toHsv();\r\n\r\n                this._currentHue = (newHsv.h % 360) / 360;\r\n                this._currentSaturation = newHsv.s;\r\n                this._currentValue = newHsv.v;\r\n                this._currentAlpha = newHsv.a;\r\n            }\r\n            this._updateUI();\r\n\r\n            if (newColor && newColor.isValid() && !ignoreFormatChange) {\r\n                this._currentPreferredFormat = opts.preferredFormat || newColor.getFormat();\r\n            }\r\n        },\r\n\r\n        _applyStates : function() {\r\n           var states = this._states ;\r\n\r\n            if (states.showPaletteOnly) {\r\n                states.showPalette = true;\r\n            }\r\n\r\n            this.$toggleButton.text(states.showPaletteOnly ? this.option(\"texts.togglePaletteMoreText\"): this.option(\"texts.togglePaletteLessText\"));\r\n\r\n\r\n            this.$el.toggleClass(\"sp-input-disabled\", !states.showInput)\r\n                            .toggleClass(\"sp-clear-enabled\", !!states.allowEmpty)\r\n                            .toggleClass(\"sp-alpha-enabled\", states.showAlpha)\r\n                            .toggleClass(\"sp-buttons-disabled\", !states.showButtons)\r\n                            .toggleClass(\"sp-palette-buttons-disabled\", !states.togglePaletteOnly)\r\n                            .toggleClass(\"sp-palette-disabled\", !states.showPalette)\r\n                            .toggleClass(\"sp-palette-only\", states.showPaletteOnly)\r\n                            .toggleClass(\"sp-initial-disabled\", !states.showInitial);\r\n\r\n            if (states.showPaletteOnly && !this.option(\"flat\")) {\r\n                this.$el.css('left', '-=' + (this.$pickerContainer.outerWidth(true) + 5));\r\n            }\r\n        },\r\n\r\n        stating : function(name,value) {\r\n            if (value !== undefined) {\r\n                this._states[name] = value;\r\n                this._applyStates();\r\n            } else {\r\n                return this._states[name];\r\n            }\r\n        },\r\n\r\n        reflow : function () {\r\n\r\n            ///if (!this.option(\"flat\")) {\r\n            ///   this.$container.css(\"position\", \"absolute\");\r\n            ///    var offset = this.option(\"offset\"); \r\n            ///    if (offset) {\r\n            ///        this.$container.offset(offset);\r\n            ///    } else {\r\n            ///        this.$container.offset(popups.calcOffset(this.$container[0], this.$offsetElement[0]));\r\n            ///    }\r\n            ///}\r\n\r\n            if (this.stating(\"showPalette\")) {\r\n                this.palette.reflow();\r\n            }\r\n\r\n            this.picker.reflow();\r\n\r\n        },\r\n\r\n        toggle : function () {\r\n            if (this._visible) {\r\n                this.hide();\r\n            } else {\r\n                this.show();\r\n            }\r\n        },\r\n\r\n        show : function () {\r\n            if (this._visible) {\r\n                this.reflow();\r\n                return;\r\n            }\r\n            \r\n            this._visible = true;\r\n\r\n            //$(doc).on(\"keydown.ColorPane\", onkeydown);\r\n            //$(doc).on(\"click.ColorPane\", clickout);\r\n            //$(window).on(\"resize.ColorPane\", resize);\r\n            ///this.$replacer.addClass(\"sp-active\");\r\n            this.$el.removeClass(\"sp-hidden\");\r\n\r\n            this.reflow();\r\n            \r\n            this._updateUI();\r\n\r\n            //this._drawInitial();\r\n            \r\n        },\r\n        hide : function () {\r\n            // Return if hiding is unnecessary\r\n            if (!this._visible || this._flat) { return; }\r\n            this._visible = false;\r\n\r\n            //$(doc).off(\"keydown.ColorPane\", onkeydown);\r\n            //$(doc).off(\"click.ColorPane\", clickout);\r\n            //$(window).off(\"resize.ColorPane\", resize);\r\n\r\n            ///this.$replacer.removeClass(\"sp-active\");\r\n            this.$el.addClass(\"sp-hidden\");\r\n        },\r\n\r\n        destroy : function () {\r\n            ///this.$el.show();\r\n            ///this.$offsetElement.off(\"click.ColorPane touchstart.ColorPane\");\r\n            ///this.$container.remove();\r\n            ///this.$replacer.remove();\r\n            //pickers[spect.id] = null;\r\n        }\r\n\r\n    });\r\n\r\n\r\n    plugins.register(ColorPane);\r\n\r\n    ColorPane.localization = {};\r\n\r\n    return colors.ColorPane = ColorPane;\r\n\r\n});\ndefine('skylark-domx-colors/ColorBox',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-finder\",\r\n    \"skylark-domx-query\",\r\n    \"skylark-domx-eventer\",\r\n    \"skylark-domx-styler\",\r\n    \"skylark-domx-plugins\",\r\n    \"skylark-domx-popups\",\r\n    \"skylark-graphics-color\",\r\n    \"./colors\",\r\n    \"./ColorPane\"\r\n   ],function(langx, noder, finder, $,eventer, styler,plugins,popups,Color,colors,ColorPane) {\r\n    \"use strict\";\r\n\r\n    var ColorBox = plugins.Plugin.inherit({\r\n        klassName : \"ColorBox\",\r\n\r\n        pluginName : \"domx.colors.box\",\r\n\r\n        options : {\r\n            pane : {\r\n                states : {\r\n                    showPalette: false,\r\n                    showPaletteOnly: false,\r\n                    togglePaletteOnly: false,\r\n                    showSelectionPalette: true,\r\n                    showInput: false,\r\n                    allowEmpty: false,\r\n                    showButtons: true,\r\n                    showInitial: false,\r\n                    showAlpha: false\r\n                },                \r\n                maxSelectionSize: 7,\r\n\r\n                palette : undefined,\r\n                selectionPalette : undefined\r\n            },\r\n\r\n            // Options\r\n            color: false\r\n\r\n        },\r\n\r\n        _updateUI : function () {\r\n            var realColor = this.get(),\r\n                displayColor = '';\r\n             //reset background info for preview element\r\n            this.$previewElement.removeClass(\"sp-clear-display\");\r\n            this.$previewElement.css('background-color', 'transparent');\r\n\r\n            if (!realColor && this.stating(\"allowEmpty\")) {\r\n                // Update the replaced elements background with icon indicating no color selection\r\n                this.$previewElement.addClass(\"sp-clear-display\");\r\n            }\r\n            else {\r\n                var realHex = realColor.toHexString(),\r\n                    realRgb = realColor.toRgbString();\r\n\r\n                // Update the replaced elements background color (with actual selected color)\r\n                this.$previewElement.css(\"background-color\", realRgb);\r\n\r\n                displayColor = realColor.toString();\r\n            }\r\n\r\n            this.pane._updateUI();\r\n        },\r\n\r\n\r\n        _applyOptions : function () {\r\n\r\n           this.reflow();\r\n        },\r\n\r\n         _construct: function(elm, options) {\r\n            this.overrided(elm,options);\r\n\r\n            this.$el = this.$();\r\n\r\n            var opts = this.options,\r\n            \t$pane = this.$pane = $(opts.pane.template),\r\n                $previewElement = this.$previewElement = this.$el.find(\".sp-preview-inner\");\r\n\r\n\r\n            if ($pane[0]) {\r\n                this.pane = ColorPane.instantiate($pane[0],langx.mixin({\r\n                    color : opts.color\r\n                },opts.pane));\r\n            } \r\n\r\n            this._init();\r\n\r\n        },\r\n\r\n        _init : function () {\r\n            var self = this,\r\n                opts = this.options;\r\n\r\n            this._applyOptions();\r\n\r\n            var paneIsVisible = false;\r\n            this.$pane.hide();\r\n            function showPane() {\r\n                if (paneIsVisible) {\r\n                    return;\r\n                }\r\n               \r\n                paneIsVisible = true;\r\n\r\n                self.$pane.show();\r\n\r\n                self.reflow();\r\n                \r\n                self._updateUI();\r\n                \r\n            }\r\n\r\n            function hidePane() {\r\n                if (!paneIsVisible) {\r\n                    return;\r\n                }\r\n                paneIsVisible = false;\r\n\r\n                self.$pane.hide();\r\n            }\r\n\r\n\r\n            this.listenTo(this.$el,\"click touchstart\", function (e) {\r\n                if (paneIsVisible) {\r\n                    hidePane();\r\n                } else {\r\n                    showPane();\r\n                }\r\n\r\n              eventer.stop(e);\r\n            });\r\n\r\n        },\r\n\r\n        revert :  function () {\r\n        \tthis.pane.revert();\r\n        },\r\n\r\n\r\n        get : function () {\r\n            return this.pane.get();\r\n        },\r\n\r\n\r\n        set : function (color) {\r\n        \tthis.pane.set(color);\r\n        },\r\n\r\n\r\n        reflow : function () {\r\n\r\n            this.$pane.css(\"position\", \"absolute\");\r\n            this.$pane.offset(popups.calcOffset(this.$pane[0], this.$el[0]));\r\n\r\n            this.pane.reflow();\r\n\r\n        }\r\n\r\n\r\n    });\r\n\r\n    plugins.register(ColorBox);\r\n\r\n    return colors.ColorBox = ColorBox;\r\n\r\n});\ndefine('skylark-domx-colors/colorer',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-query\",\r\n\t\"./colors\",\r\n\t\"./ColorBox\",\r\n\t\"./ColorPane\"\r\n],function(langx,$,colors,ColorBox,ColorPane){\r\n   var pickers = [],\r\n    replaceInput = [\r\n        \"<div class='sp-replacer'>\",\r\n            \"<div class='sp-preview'><div class='sp-preview-inner'></div></div>\",\r\n            \"<div class='sp-dd'>&#9660;</div>\",\r\n        \"</div>\"\r\n    ].join(''),\r\n    \r\n    markup = (function () {\r\n        return [\r\n            \"<div class='sp-container'>\",\r\n                \"<div class='sp-palette-container'>\",\r\n                    \"<div class='sp-palette sp-thumb sp-cf'></div>\",\r\n                    \"<div class='sp-palette-button-container sp-cf'>\",\r\n                        \"<button type='button' class='sp-palette-toggle'></button>\",\r\n                    \"</div>\",\r\n                \"</div>\",\r\n                \"<div class='sp-picker-container'>\",\r\n                    \"<div class='sp-top sp-cf'>\",\r\n                        \"<div class='sp-fill'></div>\",\r\n                        \"<div class='sp-top-inner'>\",\r\n                            \"<div class='sp-color'>\",\r\n                                \"<div class='sp-sat'>\",\r\n                                    \"<div class='sp-val'>\",\r\n                                        \"<div class='sp-dragger'></div>\",\r\n                                    \"</div>\",\r\n                                \"</div>\",\r\n                            \"</div>\",\r\n                            \"<div class='sp-clear sp-clear-display'>\",\r\n                            \"</div>\",\r\n                            \"<div class='sp-hue'>\",\r\n                                \"<div class='sp-slider'></div>\",\r\n                            \"</div>\",\r\n                        \"</div>\",\r\n                        \"<div class='sp-alpha'><div class='sp-alpha-inner'><div class='sp-alpha-handle'></div></div></div>\",\r\n                    \"</div>\",\r\n                    \"<div class='sp-input-container sp-cf'>\",\r\n                        \"<input class='sp-input' type='text' spellcheck='false'  />\",\r\n                    \"</div>\",\r\n                    \"<div class='sp-initial sp-thumb sp-cf'></div>\",\r\n                    \"<div class='sp-button-container sp-cf'>\",\r\n                        \"<a class='sp-cancel' href='#'></a>\",\r\n                        \"<button type='button' class='sp-choose'></button>\",\r\n                    \"</div>\",\r\n                \"</div>\",\r\n            \"</div>\"\r\n        ].join(\"\");\r\n    })();\r\n\r\n\r\n\tfunction colorer(elmInput,options) {\r\n\t\toptions = langx.mixin({\r\n            // Options\r\n            color: false,\r\n            flat: false,\r\n            appendTo: \"body\",\r\n            maxSelectionSize: 7,\r\n            preferredFormat: false,\r\n            containerClassName: \"\",\r\n            replacerClassName: \"\",\r\n            theme: \"sp-light\",\r\n\r\n            offset: null\r\n\t\t},options);\r\n\r\n\t\tvar \r\n\t\t\ttheme = options.theme,\r\n\t\t\tflat = options.flat,\r\n\t\t\tappendTo = options.appendTo,\r\n\t\t\t$el = $(elmInput),\r\n\t\t\t$pane = $(markup,elmInput.ownerDocument).addClass(theme),\r\n\t        isInput = $el.is(\"input\"),\r\n\t        isInputTypeColor = isInput && $el.attr(\"type\") === \"color\",\r\n\t        shouldReplace = this._shouldReplace =  isInput && !flat,\r\n\t        $replacer =  (shouldReplace) ? $(replaceInput).addClass(theme)\r\n\t                                                      .addClass(options.className)\r\n\t                                                      .addClass(options.replacerClassName) \r\n\t                                     : $([]),\r\n\t        $offsetElement =  (shouldReplace) ? $replacer : $el;\r\n\r\n\r\n        delete options.flat;\r\n        delete options.appendTo;\r\n\r\n        options.color = options.color || (isInput && $el.val());\r\n\r\n        if (shouldReplace) {\r\n            $el.after($replacer).hide();\r\n        }\r\n\r\n\r\n        $pane.toggleClass(\"sp-flat\", flat)\r\n             .addClass(options.containerClassName);\r\n\r\n        if (flat) {\r\n            $el.after($pane).hide();\r\n            var pane = new ColorPane($pane[0],options);\r\n            pane.show();\r\n            return pane;\r\n        } else {\r\n            var $appendTo = appendTo === \"parent\" ? $el.parent() : $(appendTo);\r\n            if ($appendTo.length !== 1) {\r\n                $appendTo = $(\"body\");\r\n            }\r\n\r\n            $appendTo.append($pane);\r\n            options.pane.template = $pane;\r\n            return new ColorBox($replacer[0],options);\r\n        }\r\n\t}\r\n\r\n\treturn colors.colorer = colorer;\r\n});\ndefine('skylark-domx-colors/i18n/localization',[],function(){\r\n\treturn {};\r\n});\ndefine('skylark-domx-colors/i18n/texts_ja',[\r\n\t\"./localization\"\r\n],function(localization) {\r\n    return localization[\"ja\"] = {\r\n        cancelText: \"中止\",\r\n        chooseText: \"選択\"\r\n    };\r\n});\ndefine('skylark-domx-colors/i18n/texts_zh-cn',[\r\n    \"./localization\"\r\n],function(localization) {\r\n    return localization[\"zh-cn\"] = {\r\n        cancelText: \"取消\",\r\n        chooseText: \"选择\",\r\n        clearText: \"清除\",\r\n        togglePaletteMoreText: \"更多选项\",\r\n        togglePaletteLessText: \"隐藏\",\r\n        noColorSelectedText: \"尚未选择任何颜色\"\r\n    };\r\n});\r\n\ndefine('skylark-domx-colors/i18n/texts_zh-tw',[\r\n    \"./localization\"\r\n],function(localization) {\r\n    return localization[\"zh-tw\"] = {\r\n        cancelText: \"取消\",\r\n        chooseText: \"選擇\",\r\n        clearText: \"清除\",\r\n        togglePaletteMoreText: \"更多選項\",\r\n        togglePaletteLessText: \"隱藏\",\r\n        noColorSelectedText: \"尚未選擇任何顏色\"\r\n    };\r\n\r\n});\ndefine('skylark-domx-colors/main',[\r\n\t\"skylark-domx-query\",\r\n\t\"./colors\",\r\n    \"./colorer\",\r\n    \"./ColorPalette\",\r\n    \"./ColorPicker\",\r\n    \"./ColorPane\",\r\n    \"./i18n/texts_ja\",\r\n    \"./i18n/texts_zh-cn\",\r\n    \"./i18n/texts_zh-tw\"\r\n], function($,colors,colorer) {\r\n   \r\n   $.fn.colorer = $.wraps.wrapper_every_act(colorer,colors);\r\n\r\n   return colors;\r\n\r\n});\r\n\ndefine('skylark-domx-colors', ['skylark-domx-colors/main'], function (main) { return main; });\n\n"]}