{"version":3,"sources":["skylark-domx-colors.js"],"names":["define","skylark","attach","browser","$","Color","isIE","paletteTemplate","p","color","className","opts","html","i","length","current","tiny","parse","c","toHsl","l","equals","formattedString","toString","preferredFormat","swatchStyle","toRgbString","push","append","attr","texts","noColorSelectedText","join","langx","noder","eventer","finder","plugins","Indicator","Plugin","inherit","klassName","pluginName","options","_construct","elm","prototype","call","this","listenTo","elmx","e","_start","_move","_dragging","offset","_offset","pageX","pageY","maxWidth","_maxWidth","maxHeight","_maxHeight","dragX","Math","max","min","left","dragY","top","onmove","apply","_elm","rightclick","which","button","onstart","arguments","$el","height","width","$doc","document","mousemove","mouseup","_stop","find","addClass","stop","unlistenTo","removeClass","onstop","_delay","register","styler","colors","helper","ColorPicker","selectors","dragger","dragHelper","slider","slideHelper","alphaSliderInner","alphaSlider","alphaSlideHelper","textInput","initialColorContainer","cancelButton","clearButton","chooseButton","draggingClass","cancelText","chooseText","clearText","states","showInput","allowEmpty","showButtons","showInitial","showAlpha","_drawInitial","stating","initialColor","_initialColor","currentColor","$initialColorContainer","_updateHelperLocations","s","_currentSaturation","v","_currentValue","_isEmpty","$alphaSlideHelper","hide","$slideHelper","$dragHelper","show","_dragWidth","_dragHeight","_dragHelperHeight","css","alphaX","_currentAlpha","_alphaWidth","_alphaSlideHelperWidth","slideY","_slideHeight","_slideHelperHeight","_updateOriginalInput","fireCallback","_colorOnShow","_currentPreferredFormat","emit","_updateUI","$dragger","_slideWidth","$slider","$alphaSlider","$textInput","flatColor","h","_currentHue","toHexString","format","realColor","displayColor","realHex","rgb","toRgb","a","realAlpha","gradient","$alphaSliderInner","toFilter","gradientType","val","_drawPalette","_applyOptions","_states","_applyStates","reflow","theme","$cancelButton","$clearButton","$chooseButton","_init","self","dragStart","_isDragging","_shiftMovementDirection","dragStop","move","setFromTextInput","value","_allowEmpty","isValid","change","on","setTimeout","keydown","keyCode","text","revert","plugin","shiftKey","round","parseFloat","oldDragX","oldDragY","furtherFromX","abs","setSaturation","setValue","paletteEvent","ignore","data","target","closest","undefined","newColor","newHsv","toHsv","toggleClass","name","fx","noop","ColorPalette","showSelectionPalette","palette","selectionPalette","_addColorToSelectionPalette","_paletteLookup","inArray","_selectionPalette","_maxSelectionSize","shift","getUniqueSelectionPalette","unique","reverse","slice","maxSelectionSize","map","_paletteArray","_palette","paletteArray","isArray","paletteLookup","j","_current","popups","ColorPane","pickerContainer","toggleButton","paletteContainer","togglePaletteMoreText","togglePaletteLessText","showPalette","showPaletteOnly","togglePaletteOnly","picker","$pickerContainer","$paletteContainer","$toggleButton","instantiate","$container","set","get","option","outerWidth","ColorBox","pane","$previewElement","realRgb","$pane","template","mixin","paneIsVisible","hidePane","showPane","calcOffset","replaceInput","markup","colorer","elmInput","flat","appendTo","containerClassName","replacerClassName","ownerDocument","isInput","is","shouldReplace","_shouldReplace","$replacer","after","$appendTo","parent","fn","wraps","wrapper_every_act","main"],"mappings":"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","file":"../skylark-domx-colors.js","sourcesContent":["define('skylark-domx-colors/colors',[\r\n\t\"skylark-langx/skylark\"\r\n],function(skylark){\r\n\treturn skylark.attach(\"domx.colores\",{});\r\n});\ndefine('skylark-domx-colors/helper',[\r\n    \"skylark-domx-browser\",\r\n    \"skylark-domx-query\",\r\n    \"skylark-graphics-color\"    \r\n],function(browser,$,Color){\r\n    function paletteElementClick(e) {\r\n        if (e.data && e.data.ignore) {\r\n            self.set($(e.target).closest(\".sp-thumb-el\").data(\"color\"));\r\n            move();\r\n        }\r\n        else {\r\n            self.set($(e.target).closest(\".sp-thumb-el\").data(\"color\"));\r\n            move();\r\n\r\n            // If the picker is going to close immediately, a palette selection\r\n            // is a change.  Otherwise, it's a move only.\r\n            if (opts.hideAfterPaletteSelect) {\r\n                self_updateOriginalInput(true);\r\n                self.hide();\r\n            } else {\r\n                self._updateOriginalInput();\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    var paletteEvent = browser.isIE ? \"mousedown.ColorPicker\" : \"click.ColorPicker touchstart.ColorPicker\";\t\r\n\r\n    function paletteTemplate (p, color, className, opts) {\r\n        var html = [];\r\n        for (var i = 0; i < p.length; i++) {\r\n            var current = p[i];\r\n            if(current) {\r\n                var tiny = Color.parse(current);\r\n                var c = tiny.toHsl().l < 0.5 ? \"sp-thumb-el sp-thumb-dark\" : \"sp-thumb-el sp-thumb-light\";\r\n                c += (Color.equals(color, current)) ? \" sp-thumb-active\" : \"\";\r\n                var formattedString = tiny.toString(opts.preferredFormat || \"rgb\");\r\n                var swatchStyle = \"background-color:\" + tiny.toRgbString();\r\n                html.push('<span title=\"' + formattedString + '\" data-color=\"' + tiny.toRgbString() + '\" class=\"' + c + '\"><span class=\"sp-thumb-inner\" style=\"' + swatchStyle + ';\" /></span>');\r\n            } else {\r\n                var cls = 'sp-clear-display';\r\n                html.push($('<div />')\r\n                    .append($('<span data-color=\"\" style=\"background-color:transparent;\" class=\"' + cls + '\"></span>')\r\n                        .attr('title', opts.texts.noColorSelectedText)\r\n                    )\r\n                    .html()\r\n                );\r\n            }\r\n        }\r\n        return \"<div class='sp-cf \" + className + \"'>\" + html.join('') + \"</div>\";\r\n    }\r\n\r\n    return {\r\n    \tpaletteTemplate\r\n    }\r\n});\r\n\ndefine('skylark-domx-colors/Indicator',[\r\n   \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-browser\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-eventer\",\r\n    \"skylark-domx-finder\",\r\n    \"skylark-domx-query\",\r\n    \"skylark-domx-plugins\"    \r\n],function(skylark, langx, browser, noder, eventer,finder, $,plugins) {\r\n    /**\r\n    * Lightweight drag helper.  Handles containment within the element, so that\r\n    * when dragging, the x is within [0,element.width] and y is within [0,element.height]\r\n    */\r\n    function draggable(element, onmove, onstart, onstop) {\r\n        onmove = onmove || function () { };\r\n        onstart = onstart || function () { };\r\n        onstop = onstop || function () { };\r\n        var doc = document;\r\n        var dragging = false;\r\n        var offset = {};\r\n        var maxHeight = 0;\r\n        var maxWidth = 0;\r\n        var hasTouch = ('ontouchstart' in window);\r\n\r\n        var duringDragEvents = {};\r\n        duringDragEvents[\"selectstart\"] = prevent;\r\n        duringDragEvents[\"dragstart\"] = prevent;\r\n        duringDragEvents[\"touchmove mousemove\"] = move;\r\n        duringDragEvents[\"touchend mouseup\"] = stop;\r\n\r\n        function prevent(e) {\r\n            if (e.stopPropagation) {\r\n                e.stopPropagation();\r\n            }\r\n            if (e.preventDefault) {\r\n                e.preventDefault();\r\n            }\r\n            e.returnValue = false;\r\n        }\r\n\r\n        function move(e) {\r\n            if (dragging) {\r\n                // Mouseup happened outside of window\r\n                if (browser.isIE && doc.documentMode < 9 && !e.button) {\r\n                    return stop();\r\n                }\r\n\r\n                var t0 = e.originalEvent && e.originalEvent.touches && e.originalEvent.touches[0];\r\n                var pageX = t0 && t0.pageX || e.pageX;\r\n                var pageY = t0 && t0.pageY || e.pageY;\r\n\r\n                var dragX = Math.max(0, Math.min(pageX - offset.left, maxWidth));\r\n                var dragY = Math.max(0, Math.min(pageY - offset.top, maxHeight));\r\n\r\n                if (hasTouch) {\r\n                    // Stop scrolling in iOS\r\n                    prevent(e);\r\n                }\r\n\r\n                onmove.apply(element, [dragX, dragY, e]);\r\n            }\r\n        }\r\n\r\n        function start(e) {\r\n            var rightclick = (e.which) ? (e.which == 3) : (e.button == 2);\r\n\r\n            var onstart = this.options.onstart || funcs.noop;\r\n\r\n            if (!rightclick && !dragging) {\r\n                if (onstart.apply(element, arguments) !== false) {\r\n                    dragging = true;\r\n                    maxHeight = $(element).height();\r\n                    maxWidth = $(element).width();\r\n                    offset = $(element).offset();\r\n\r\n                    $(doc).on(duringDragEvents);\r\n                    $(doc.body).addClass(\"sp-dragging\");\r\n\r\n                    move(e);\r\n\r\n                    prevent(e);\r\n                }\r\n            }\r\n        }\r\n\r\n        function stop() {\r\n            if (dragging) {\r\n                $(doc).off(duringDragEvents);\r\n                $(doc.body).removeClass(\"sp-dragging\");\r\n\r\n                // Wait a tick before notifying observers to allow the click event\r\n                // to fire in Chrome.\r\n                setTimeout(function() {\r\n                    onstop.apply(element, arguments);\r\n                }, 0);\r\n            }\r\n            dragging = false;\r\n        }\r\n\r\n        $(element).on(\"touchstart mousedown\", start);\r\n    }\r\n\t\r\n\r\n    var Indicator = plugins.Plugin.inherit({\r\n        klassName : \"Indicator\",\r\n\r\n        pluginName : \"domx.indicator\",\r\n\r\n        options : {\r\n        },\r\n\r\n        _construct: function(elm, options) {\r\n            plugins.Plugin.prototype._construct.call(this,elm,options);\r\n\r\n            this.listenTo(this.elmx(),\"mousedown\" , (e) => {\r\n                this._start(e);\r\n            });\r\n\r\n        },\r\n\r\n        _move : function(e) {\r\n            if (this._dragging) {\r\n                var offset = this._offset,\r\n                    pageX = e.pageX,\r\n                    pageY = e.pageY,\r\n                    maxWidth = this._maxWidth,\r\n                    maxHeight = this._maxHeight;\r\n\r\n                var dragX = Math.max(0, Math.min(pageX - offset.left, maxWidth));\r\n                var dragY = Math.max(0, Math.min(pageY - offset.top, maxHeight));\r\n\r\n                var onmove = this.options.onmove;\r\n                if (onmove) {\r\n                    onmove.apply(this._elm, [dragX, dragY, e]);\r\n                }\r\n            }\r\n        },\r\n\r\n        _start : function(e) {\r\n            var rightclick = (e.which) ? (e.which == 3) : (e.button == 2);\r\n\r\n            if (!rightclick && !this._dragging) {\r\n                var onstart = this.options.onstart;\r\n                if (!onstart || onstart.apply(this._elm, arguments) !== false) {\r\n                    this._dragging = true;\r\n                    var $el = this.$();\r\n\r\n                    this._maxHeight = $el.height();\r\n                    this._maxWidth = $el.width();\r\n                    this._offset = $el.offset();\r\n\r\n                    var $doc = this.$(document)\r\n\r\n                    this.listenTo($doc,{\r\n                        \"mousemove\" : (e) => {\r\n                            this._move(e);\r\n                        },\r\n                        \"mouseup\" : (e) => {\r\n                            this._stop(e);\r\n                        }                \r\n                    });\r\n                    $doc.find(\"body\").addClass(\"sp-dragging\");\r\n\r\n                    this._move(e);\r\n\r\n                    eventer.stop(e);\r\n                }\r\n            }\r\n        },\r\n\r\n        _stop : function(e) {\r\n            var $doc = this.$(document);\r\n            if (this._dragging) {\r\n                this.unlistenTo($doc);\r\n                $doc.find(\"body\").removeClass(\"sp-dragging\");\r\n\r\n                onstop = this.options.onstop;\r\n\r\n                // Wait a tick before notifying observers to allow the click event\r\n                // to fire in Chrome.\r\n                if (onstop) {\r\n                    this._delay(function() {\r\n                        onstop.apply(this._elm, arguments);\r\n                    });\r\n                }\r\n            }\r\n            this._dragging = false;            \r\n        }\r\n    });\r\n\r\n    plugins.register(Indicator);\r\n\r\n\treturn Indicator;\r\n});\ndefine('skylark-domx-colors/ColorPicker',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-browser\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-finder\",\r\n    \"skylark-domx-query\",\r\n    \"skylark-domx-eventer\",\r\n    \"skylark-domx-styler\",\r\n    \"skylark-domx-plugins\",\r\n    \"skylark-graphics-color\",\r\n    \"./colors\",\r\n    \"./helper\",\r\n    \"./Indicator\"\r\n],function(langx, browser, noder, finder, $,eventer, styler,plugins,Color,colors,helper,Indicator) {\r\n    \"use strict\";\r\n\r\n    var ColorPicker = plugins.Plugin.inherit({\r\n        klassName : \"ColorPicker\",\r\n\r\n        pluginName : \"domx.colors.picker\",\r\n\r\n        options : {\r\n            selectors  : {\r\n                dragger : \".sp-color\",\r\n                dragHelper : \".sp-dragger\",\r\n                slider : \".sp-hue\",\r\n                slideHelper : \".sp-slider\",\r\n                alphaSliderInner : \".sp-alpha-inner\",\r\n                alphaSlider : \".sp-alpha\",\r\n                alphaSlideHelper : \".sp-alpha-handle\",\r\n                textInput : \".sp-input\",\r\n                initialColorContainer : \".sp-initial\",\r\n                cancelButton : \".sp-cancel\",\r\n                clearButton : \".sp-clear\",\r\n                chooseButton : \".sp-choose\"\r\n            },\r\n\r\n            draggingClass : \"sp-dragging\",\r\n\r\n            texts : {\r\n                cancelText: \"cancel\",\r\n                chooseText: \"choose\",\r\n                clearText: \"Clear Color Selection\",\r\n                noColorSelectedText: \"No Color Selected\"\r\n            },\r\n\r\n            states : {\r\n                showInput: false,\r\n                allowEmpty: false,\r\n                showButtons: true,\r\n                showInitial: false,\r\n                showAlpha: false\r\n            },\r\n\r\n            preferredFormat : \"hex\",\r\n\r\n            // Options\r\n            color: false\r\n        },\r\n        \r\n        _drawInitial : function () {\r\n            var opts = this.options;\r\n            if (this.stating(\"showInitial\")) {\r\n                var initialColor = this._initialColor;\r\n                var currentColor = this.current();\r\n                this.$initialColorContainer.html(\r\n                    helper.paletteTemplate([initialColor, currentColor], currentColor, \"sp-palette-row-initial\", opts)\r\n                );\r\n            }\r\n        },\r\n\r\n        _updateHelperLocations : function () {\r\n            var s = this._currentSaturation;\r\n            var v = this._currentValue;\r\n\r\n            if(this.stating(\"allowEmpty\") && this._isEmpty) {\r\n                //if selected color is empty, hide the helpers\r\n                this.$alphaSlideHelper.hide();\r\n                this.$slideHelper.hide();\r\n                this.$dragHelper.hide();\r\n            }\r\n            else {\r\n                //make sure helpers are visible\r\n                this.$alphaSlideHelper.show();\r\n                this.$slideHelper.show();\r\n                this.$dragHelper.show();\r\n\r\n                // Where to show the little circle in that displays your current selected color\r\n                var dragX = s * this._dragWidth;\r\n                var dragY = this._dragHeight - (v * this._dragHeight);\r\n                dragX = Math.max(\r\n                    -this._dragHelperHeight,\r\n                    Math.min(this._dragWidth - this._dragHelperHeight, dragX - this._dragHelperHeight)\r\n                );\r\n                dragY = Math.max(\r\n                    -this._dragHelperHeight,\r\n                    Math.min(this._dragHeight - this._dragHelperHeight, dragY - this._dragHelperHeight)\r\n                );\r\n                this.$dragHelper.css({\r\n                    \"top\": dragY + \"px\",\r\n                    \"left\": dragX + \"px\"\r\n                });\r\n\r\n                var alphaX = this._currentAlpha * this._alphaWidth;\r\n                this.$alphaSlideHelper.css({\r\n                    \"left\": (alphaX - (this._alphaSlideHelperWidth / 2)) + \"px\"\r\n                });\r\n\r\n                // Where to show the bar that displays your current selected hue\r\n                var slideY = (this._currentHue) * this._slideHeight;\r\n                this.$slideHelper.css({\r\n                    \"top\": (slideY - this._slideHelperHeight) + \"px\"\r\n                });\r\n            }\r\n        },\r\n\r\n        _updateOriginalInput : function (fireCallback) {\r\n            var color = this.current(),\r\n                displayColor = '',\r\n                hasChanged = !Color.equals(color, this._colorOnShow);\r\n\r\n            if (color) {\r\n                displayColor = color.toString(this._currentPreferredFormat);\r\n                // Update the selection palette with the current color\r\n                this.emit(\"picked\",color);\r\n            }\r\n\r\n\r\n        },\r\n\r\n        _updateUI : function () {\r\n            var opts = this.options;\r\n\r\n            this._dragWidth = this.$dragger.width();\r\n            this._dragHeight = this.$dragger.height();\r\n            this._dragHelperHeight = this.$dragHelper.height();\r\n            this._slideWidth = this.$slider.width();\r\n            this._slideHeight = this.$slider.height();\r\n            this._slideHelperHeight = this.$slideHelper.height();\r\n            this._alphaWidth = this.$alphaSlider.width();\r\n            this._alphaSlideHelperWidth = this.$alphaSlideHelper.width();\r\n            \r\n            this.$textInput.removeClass(\"sp-validation-error\");\r\n\r\n            this._updateHelperLocations();\r\n\r\n            // Update dragger background color (gradients take care of saturation and value).\r\n            var flatColor = Color.parse({ \r\n                h: this._currentHue * 360, \r\n                s: 1, \r\n                v: 1 \r\n            });\r\n            this.$dragger.css(\"background-color\", flatColor.toHexString());\r\n\r\n            // Get a format that alpha will be included in (hex and names ignore alpha)\r\n            var format = this._currentPreferredFormat;\r\n            if (this._currentAlpha < 1 && !(this._currentAlpha === 0 && format === \"name\")) {\r\n                if (format === \"hex\" || format === \"hex3\" || format === \"hex6\" || format === \"name\") {\r\n                    format = \"rgb\";\r\n                }\r\n            }\r\n\r\n            var realColor = this.current(),\r\n                displayColor = '';\r\n\r\n            if (!realColor && this.stating(\"allowEmpty\")) {\r\n            }\r\n            else {\r\n                var realHex = realColor.toHexString(),\r\n                    realRgb = realColor.toRgbString();\r\n\r\n                if (this.stating(\"showAlpha\")) {\r\n                    var rgb = realColor.toRgb();\r\n                    rgb.a = 0;\r\n                    var realAlpha = Color.parse(rgb).toRgbString();\r\n                    var gradient = \"linear-gradient(left, \" + realAlpha + \", \" + realHex + \")\";\r\n\r\n                    if (browser.isIE) {\r\n                        this.$alphaSliderInner.css(\"filter\", Color.parse(realAlpha).toFilter({ gradientType: 1 }, realHex));\r\n                    }\r\n                    else {\r\n                        this.$alphaSliderInner.css(\"background\", \"-webkit-\" + gradient);\r\n                        this.$alphaSliderInner.css(\"background\", \"-moz-\" + gradient);\r\n                        this.$alphaSliderInner.css(\"background\", \"-ms-\" + gradient);\r\n                        // Use current syntax gradient on unprefixed property.\r\n                        this.$alphaSliderInner.css(\"background\",\r\n                            \"linear-gradient(to right, \" + realAlpha + \", \" + realHex + \")\");\r\n                    }\r\n                }\r\n\r\n                displayColor = realColor.toString(format);\r\n            }\r\n\r\n            // Update the text entry input as it changes happen\r\n            if (this.stating(\"showInput\")) {\r\n                this.$textInput.val(displayColor);\r\n            }\r\n\r\n            if (this.stating(\"showPalette\")) {\r\n                this._drawPalette();\r\n            }\r\n\r\n            this._drawInitial();\r\n        },\r\n\r\n\r\n        _applyOptions : function () {\r\n            var opts = this.options;\r\n\r\n            this._states = {\r\n                allowEmpty : opts.states.allowEmpty,\r\n                showInput : opts.states.showInput,\r\n                showAlpha : opts.states.showAlpha,\r\n                showButtons : opts.states.showButtons,\r\n                showInitial : opts.states.showInitial\r\n            };\r\n\r\n\r\n           this._applyStates();\r\n\r\n           this.reflow();\r\n        },\r\n\r\n         _construct: function(elm, options) {\r\n            plugins.Plugin.prototype._construct.call(this,elm,options);\r\n\r\n            var $el = this.$el = this.$();\r\n\r\n            var opts = this.options,\r\n                theme = opts.theme;\r\n\r\n            var                \r\n                dragger = this.$dragger = $el.find(opts.selectors.dragger),\r\n                dragHelper = this.$dragHelper = $el.find(opts.selectors.dragHelper),\r\n                slider = this.$slider = $el.find(opts.selectors.slider),\r\n                slideHelper = this.$slideHelper =  $el.find(opts.selectors.slideHelper),\r\n                alphaSliderInner = this.$alphaSliderInner = $el.find(opts.selectors.alphaSliderInner),\r\n                alphaSlider = this.$alphaSlider = $el.find(opts.selectors.alphaSlider),\r\n                alphaSlideHelper = this.$alphaSlideHelper = $el.find(opts.selectors.alphaSlideHelper),\r\n                textInput = this.$textInput = $el.find(opts.selectors.textInput),\r\n                initialColorContainer = this.$initialColorContainer = $el.find(opts.selectors.initialColorContainer),\r\n                cancelButton = this.$cancelButton = $el.find(opts.selectors.cancelButton),\r\n                clearButton = this.$clearButton = $el.find(opts.selectors.clearButton),\r\n                chooseButton = this.$chooseButton = $el.find(opts.selectors.chooseButton),\r\n                initialColor = this._initialColor =  opts.color,\r\n                currentPreferredFormat = this._currentPreferredFormat = opts.preferredFormat,\r\n                isEmpty = this._isEmpty =  !initialColor;\r\n\r\n            this._init();\r\n        },\r\n\r\n        _init : function () {\r\n            var self = this,\r\n                opts = this.options;\r\n             function dragStart() {\r\n                if (self._dragHeight <= 0 || self._dragWidth <= 0 || self._slideHeight <= 0) {\r\n                    self.reflow();\r\n                }\r\n                self._isDragging = true;\r\n                self.$el.addClass(self.options.draggingClass);\r\n                self._shiftMovementDirection = null;\r\n            }\r\n\r\n            function dragStop() {\r\n                self._isDragging = false;\r\n                self.$el.removeClass(self.options.draggingClass);\r\n            }           \r\n\r\n            function move() {\r\n                self._updateOriginalInput();\r\n                self._updateUI();\r\n            }\r\n\r\n            this._applyOptions();\r\n\r\n            function setFromTextInput() {\r\n                var value = self.$textInput.val();\r\n\r\n                if ((value === null || value === \"\") && self._allowEmpty) {\r\n                    self.current(null);\r\n                    move();\r\n                }\r\n                else {\r\n                    var tiny = Color.parse(value);\r\n                    if (tiny.isValid()) {\r\n                        self.current(tiny);\r\n                        move();\r\n                    }\r\n                    else {\r\n                        self.$textInput.addClass(\"sp-validation-error\");\r\n                    }\r\n                }\r\n            }\r\n            this.$textInput.change(setFromTextInput);\r\n            this.$textInput.on(\"paste\", function () {\r\n                setTimeout(setFromTextInput, 1);\r\n            });\r\n            this.$textInput.keydown(function (e) { if (e.keyCode == 13) { setFromTextInput(); } });\r\n\r\n            this.$cancelButton.text(opts.texts.cancelText);\r\n            \r\n            this.listenTo(this.$cancelButton,\"click\", function (e) {\r\n                eventer.stop(e);\r\n                self.revert();\r\n                self.emit(\"canceled\"); \r\n            });\r\n\r\n            this.$clearButton.attr(\"title\", opts.texts.clearText);\r\n            this.listenTo(this.$clearButton,\"click\", function (e) {\r\n                eventer.stop(e);\r\n                self._isEmpty = true;\r\n                move();\r\n\r\n            });\r\n\r\n            this.$chooseButton.text(opts.texts.chooseText);\r\n            this.listenTo(this.$chooseButton,\"click\", function (e) {\r\n                eventer.stop(e);\r\n\r\n                self._updateOriginalInput(true);\r\n                self.emit(\"choosed\"); \r\n            });\r\n          \r\n            this.$alphaSlider.plugin(\"domx.indicator\", {\r\n                \"onmove\" :   function (dragX, dragY, e) {\r\n                    self._currentAlpha = (dragX / self._alphaWidth);\r\n                    self._isEmpty = false;\r\n                    if (e.shiftKey) {\r\n                        self._currentAlpha = Math.round(self._currentAlpha * 10) / 10;\r\n                    }\r\n\r\n                    move();\r\n\r\n                }, \r\n                \"onstart\" : dragStart, \r\n                \"onstop\" :dragStop\r\n            });\r\n\r\n            this.$slider.plugin(\"domx.indicator\", {\r\n                \"onmove\" :   function (dragX, dragY, e) {\r\n                    self._currentHue = parseFloat(dragY / self._slideHeight);\r\n                    self._isEmpty = false;\r\n                    if (!self.stating(\"showAlpha\")) {\r\n                        self._currentAlpha = 1;\r\n                    }\r\n                    move();\r\n                }, \r\n                \"onstart\" : dragStart, \r\n                \"onstop\" :dragStop\r\n            });\r\n\r\n            this.$dragger.plugin(\"domx.indicator\", {\r\n                \"onmove\" :   function (dragX, dragY, e) {\r\n\r\n                    // shift+drag should snap the movement to either the x or y axis.\r\n                    if (!e.shiftKey) {\r\n                        self._shiftMovementDirection = null;\r\n                    }\r\n                    else if (!self._shiftMovementDirection) {\r\n                        var oldDragX = self._currentSaturation * self._dragWidth;\r\n                        var oldDragY = self._dragHeight - (self._currentValue * self._dragHeight);\r\n                        var furtherFromX = Math.abs(dragX - oldDragX) > Math.abs(dragY - oldDragY);\r\n\r\n                        self._shiftMovementDirection = furtherFromX ? \"x\" : \"y\";\r\n                    }\r\n\r\n                    var setSaturation = !self._shiftMovementDirection || self._shiftMovementDirection === \"x\";\r\n                    var setValue = !self._shiftMovementDirection || self._shiftMovementDirection === \"y\";\r\n\r\n                    if (setSaturation) {\r\n                        self._currentSaturation = parseFloat(dragX / self._dragWidth);\r\n                    }\r\n                    if (setValue) {\r\n                        self._currentValue = parseFloat((self._dragHeight - dragY) / self._dragHeight);\r\n                    }\r\n\r\n                    self._isEmpty = false;\r\n                    if (!self.stating(\"showAlpha\")) {\r\n                        self._currentAlpha = 1;\r\n                    }\r\n\r\n                    move();\r\n                }, \r\n                \"onstart\" : dragStart, \r\n                \"onstop\" :dragStop\r\n            });\r\n\r\n            this.current(this._initialColor);\r\n\r\n            // In case color was black - update the preview UI and set the format\r\n            // since the set function will not run (default color is black).\r\n            self._updateUI();\r\n\r\n            function paletteElementClick(e) {\r\n                if (e.data && e.data.ignore) {\r\n                    self.current($(e.target).closest(\".sp-thumb-el\").data(\"color\"));\r\n                    move();\r\n                }\r\n                else {\r\n                    self.current($(e.target).closest(\".sp-thumb-el\").data(\"color\"));\r\n                    move();\r\n                }\r\n\r\n                return false;\r\n            }\r\n\r\n            var paletteEvent = browser.isIE ? \"mousedown.ColorPicker\" : \"click.ColorPicker touchstart.ColorPicker\";\r\n            this.$initialColorContainer.on(paletteEvent, \".sp-thumb-el:nth-child(1)\", { ignore: true }, paletteElementClick);\r\n        },\r\n\r\n        revert :  function () {\r\n            this.current(this._initialColor, true);\r\n            this._updateOriginalInput(true);\r\n        },\r\n\r\n\r\n        current : function(color) {\r\n            if (color === undefined) {\r\n                if (this._allowEmpty && this._isEmpty) {\r\n                    return null;\r\n                }\r\n\r\n\r\n                return Color.parse({\r\n                    h: this._currentHue * 360,\r\n                    s: this._currentSaturation,\r\n                    v: this._currentValue,\r\n                    a: Math.round(this._currentAlpha * 1000) / 1000\r\n                });\r\n\r\n            } else {\r\n                if (Color.equals(color, this.current())) {\r\n                    // Update UI just in case a validation error needs\r\n                    // to be cleared.\r\n                    this._updateUI();\r\n                    return;\r\n                }\r\n\r\n                var newColor, newHsv;\r\n                if (!color && this.stating(\"allowEmpty\")) {\r\n                    this._isEmpty = true;\r\n                } else {\r\n                    this._isEmpty = false;\r\n                    newColor = Color.parse(color);\r\n                    newHsv = newColor.toHsv();\r\n\r\n                    this._currentHue = (newHsv.h % 360) / 360;\r\n                    this._currentSaturation = newHsv.s;\r\n                    this._currentValue = newHsv.v;\r\n                    this._currentAlpha = newHsv.a;\r\n                }\r\n                this._updateUI();\r\n\r\n            }\r\n        },\r\n\r\n\r\n        _applyStates : function() {\r\n           var states = this._states ;\r\n\r\n            this.$el.toggleClass(\"sp-input-disabled\", !states.showInput)\r\n                        .toggleClass(\"sp-clear-enabled\", !!states.allowEmpty)\r\n                        .toggleClass(\"sp-alpha-enabled\", states.showAlpha)\r\n                        .toggleClass(\"sp-buttons-disabled\", !states.showButtons)\r\n                        .toggleClass(\"sp-initial-disabled\", !states.showInitial);\r\n\r\n            if (!states.allowEmpty) {\r\n                this.$clearButton.hide();\r\n            }\r\n\r\n            this._dragWidth = this.$dragger.width();\r\n            this._dragHeight = this.$dragger.height();\r\n            this._dragHelperHeight = this.$dragHelper.height();\r\n            this._slideWidth = this.$slider.width();\r\n            this._slideHeight = this.$slider.height();\r\n            this._slideHelperHeight = this.$slideHelper.height();\r\n            this._alphaWidth = this.$alphaSlider.width();\r\n            this._alphaSlideHelperWidth = this.$alphaSlideHelper.width();\r\n        },\r\n\r\n        stating : function(name,value) {\r\n            if (value !== undefined) {\r\n                this._states[name] = value;\r\n                this._applyStates();\r\n            } else {\r\n                return this._states[name];\r\n            }\r\n        },\r\n\r\n        reflow : function () {\r\n            this._updateHelperLocations();\r\n        }\r\n\r\n    });\r\n\r\n\r\n    plugins.register(ColorPicker);\r\n\r\n    return colors.ColorPicker = ColorPicker;\r\n});\ndefine('skylark-domx-colors/ColorPalette',[\r\n   \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-browser\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-finder\",\r\n    \"skylark-domx-query\",\r\n    \"skylark-domx-eventer\",\r\n    \"skylark-domx-styler\",\r\n    \"skylark-domx-fx\",\r\n    \"skylark-domx-plugins\",\r\n    \"skylark-graphics-color\",\r\n    \"./colors\",\r\n    \"./helper\"\r\n],function(skylark, langx, browser, noder, finder, $,eventer, styler,fx,plugins,Color,colors,helper) {\r\n    \"use strict\";\r\n\r\n    var noop = langx.noop;\r\n\r\n    var ColorPalette = plugins.Plugin.inherit({\r\n        klassName : \"ColorPalette\",\r\n\r\n        pluginName : \"domx.colors.palette\",\r\n\r\n        options : {\r\n            selectors  : {\r\n            },\r\n\r\n            texts : {\r\n            },\r\n\r\n            states : {\r\n                showSelectionPalette: true\r\n            },\r\n            palette: [\r\n                [\"#ffffff\", \"#000000\", \"#ff0000\", \"#ff8000\", \"#ffff00\", \"#008000\", \"#0000ff\", \"#4b0082\", \"#9400d3\"]\r\n            ],\r\n            selectionPalette: []\r\n\r\n        },\r\n\r\n       _addColorToSelectionPalette : function (color) {\r\n            if (this.stating(\"showSelectionPalette\")) {\r\n                var rgb = Color.parse(color).toRgbString();\r\n                if (!this._paletteLookup[rgb] && langx.inArray(rgb, this._selectionPalette) === -1) {\r\n                    this._selectionPalette.push(rgb);\r\n                    while(this._selectionPalette.length > this._maxSelectionSize) {\r\n                        this._selectionPalette.shift();\r\n                    }\r\n                }\r\n            }\r\n        },  \r\n\r\n        getUniqueSelectionPalette : function () {\r\n            var unique = [],\r\n                opts = this.options;\r\n            if (this.stating(\"showPalette\")) {\r\n                for (var i = 0; i < this._selectionPalette.length; i++) {\r\n                    var rgb = Color.parse(this._selectionPalette[i]).toRgbString();\r\n\r\n                    if (!this._paletteLookup[rgb]) {\r\n                        unique.push(this._selectionPalette[i]);\r\n                    }\r\n                }\r\n            }\r\n\r\n            return unique.reverse().slice(0, opts.maxSelectionSize);\r\n        },\r\n\r\n        _drawPalette : function () {\r\n\r\n            var opts = this.options,\r\n                currentColor = this.current();\r\n\r\n            var html = langx.map(this._paletteArray, function (palette, i) {\r\n                return helper.paletteTemplate(palette, currentColor, \"sp-palette-row sp-palette-row-\" + i, opts);\r\n            });\r\n\r\n            if (this._selectionPalette) {\r\n                html.push(helper.paletteTemplate(this.getUniqueSelectionPalette(), currentColor, \"sp-palette-row sp-palette-row-selection\", opts));\r\n            }\r\n\r\n            this.$el.html(html.join(\"\"));\r\n        },\r\n\r\n\r\n        _updateUI : function () {\r\n           this._drawPalette();\r\n        },\r\n\r\n\r\n        _applyOptions : function () {\r\n            var opts = this.options;\r\n\r\n            this._states = {\r\n                showSelectionPalette: opts.showSelectionPalette\r\n            };            \r\n\r\n            if (opts.palette) {\r\n                var  palette = this._palette = opts.palette.slice(0),\r\n                    paletteArray = this._paletteArray = langx.isArray(palette[0]) ? palette : [palette],\r\n                    paletteLookup = this._paletteLookup = {};\r\n                for (var i = 0; i < paletteArray.length; i++) {\r\n                    for (var j = 0; j < paletteArray[i].length; j++) {\r\n                        var rgb = Color.parse(paletteArray[i][j]).toRgbString();\r\n                        paletteLookup[rgb] = true;\r\n                    }\r\n                }\r\n            }\r\n           this._applyStates();\r\n        },\r\n\r\n         _construct: function(elm, options) {\r\n           plugins.Plugin.prototype._construct.call(this,elm,options);\r\n\r\n            this.$el = this.$();\r\n\r\n            this._init();\r\n        },\r\n\r\n        _init : function () {\r\n            var self = this,\r\n                opts = this.options,\r\n                initialColor = this._initialColor =  opts.color,\r\n                selectionPalette = this._selectionPalette =  opts.selectionPalette.slice(0);\r\n\r\n            this._applyOptions();\r\n\r\n\r\n            if (!!this._initialColor) {\r\n                this.current(this._initialColor);\r\n\r\n                // In case color was black - update the preview UI and set the format\r\n                // since the set function will not run (default color is black).\r\n                self._addColorToSelectionPalette(this._initialColor);\r\n            } else {\r\n                this._updateUI();\r\n            }\r\n\r\n            function paletteElementClick(e) {\r\n                self.current($(e.target).closest(\".sp-thumb-el\").data(\"color\"));\r\n                self.emit(\"selected\",self.current());\r\n                return false;\r\n            }\r\n\r\n            var paletteEvent = browser.isIE ? \"mousedown.palette\" : \"click.palette touchstart.palette\";\r\n            this.$el.on(paletteEvent, \".sp-thumb-el\", paletteElementClick);\r\n        },\r\n\r\n\r\n        _applyStates : function() {\r\n\r\n        },\r\n\r\n        stating : function(name,value) {\r\n        \tif (value !== undefined) {\r\n        \t\tthis._states[name] = value;\r\n        \t\tthis._applyStates();\r\n        \t} else {\r\n        \t\treturn this._states[name];\r\n        \t}\r\n        },\r\n\r\n        reflow : function () {\r\n           this._drawPalette();\r\n        },\r\n\r\n        current : function(color) {\r\n        \tif (color === undefined) {\r\n        \t\treturn this._current;\r\n        \t} else {\r\n        \t\tthis._current = color;\r\n                this._updateUI();\r\n        \t}\r\n        }\r\n\r\n    });\r\n\r\n\r\n    plugins.register(ColorPalette);\r\n\r\n    return colors.ColorPalette = ColorPalette;\r\n\r\n});\ndefine('skylark-domx-colors/ColorPane',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-browser\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-finder\",\r\n    \"skylark-domx-query\",\r\n    \"skylark-domx-eventer\",\r\n    \"skylark-domx-styler\",\r\n    \"skylark-domx-fx\",\r\n    \"skylark-domx-plugins\",\r\n    \"skylark-domx-popups\",\r\n    \"skylark-graphics-color\",\r\n    \"./colors\",\r\n    \"./ColorPicker\",\r\n    \"./ColorPalette\"\r\n],function(langx, browser, noder, finder, $,eventer, styler,fx,plugins,popups,Color,colors,ColorPicker,ColorPalette) {\r\n    \"use strict\";\r\n\r\n    var ColorPane = plugins.Plugin.inherit({\r\n        klassName : \"ColorPane\",\r\n\r\n        pluginName : \"domx.colors.pane\",\r\n\r\n        options : {\r\n            selectors  : {\r\n                pickerContainer : \".sp-picker-container\",\r\n                toggleButton : \".sp-palette-toggle\",\r\n                paletteContainer : \".sp-palette\"\r\n            },\r\n\r\n            draggingClass : \"sp-dragging\",           \r\n\r\n            texts : {\r\n                togglePaletteMoreText: \"more\",\r\n                togglePaletteLessText: \"less\",\r\n                clearText: \"Clear Color Selection\",\r\n                noColorSelectedText: \"No Color Selected\"\r\n            },\r\n\r\n            states : {\r\n                showPalette: false,\r\n                showPaletteOnly: false,\r\n                togglePaletteOnly: false,\r\n                showSelectionPalette: true,\r\n                showInput: false,\r\n                allowEmpty: false,\r\n                showButtons: true,\r\n                showInitial: false,\r\n                showAlpha: false\r\n            },\r\n\r\n            // Options\r\n            color: false,\r\n            maxSelectionSize: 7\r\n\r\n        },\r\n\r\n        _updateUI : function () {\r\n            if (this.stating(\"showPalette\")) {\r\n                this.palette._updateUI();\r\n            }\r\n            this.picker._updateUI();\r\n        },\r\n\r\n\r\n        _applyOptions : function () {\r\n            var opts = this.options;\r\n\r\n            this._states = {\r\n                allowEmpty : opts.states.allowEmpty,\r\n                showInput : opts.states.showInput,\r\n                showAlpha : opts.states.showAlpha,\r\n                showButtons : opts.states.showButtons,\r\n                togglePaletteOnly : opts.states.togglePaletteOnly,\r\n                showPalette : opts.states.showPalette,\r\n                showPaletteOnly : opts.states.showPaletteOnly,\r\n                showSelectionPalette: opts.showSelectionPalette,\r\n                showInitial : opts.states.showInitial\r\n            };\r\n\r\n           this._applyStates();\r\n\r\n           this.reflow();\r\n        },\r\n\r\n         _construct: function(elm, options) {\r\n            plugins.Plugin.prototype._construct.call(this,elm,options);\r\n\r\n            var $el = this.$el = this.$();\r\n\r\n            var opts = this.options,\r\n                theme = opts.theme;\r\n\r\n\r\n            var \r\n                //container = this.$container = $(markup,elm.ownerDocument).addClass(theme),\r\n                pickerContainer = this.$pickerContainer =  $el.find(opts.selectors.pickerContainer),\r\n                paletteContainer = this.$paletteContainer =  $el.find(opts.selectors.paletteContainer),\r\n                toggleButton = this.$toggleButton = $el.find(opts.selectors.toggleButton),\r\n                initialColor = this._initialColor =  opts.color,\r\n                isEmpty = this._isEmpty =  !initialColor;\r\n\r\n            if (paletteContainer[0]) {\r\n                this.palette = ColorPalette.instantiate(paletteContainer[0],{\r\n                    selectionPalette : opts.selectionPalette,\r\n                    color : opts.color,\r\n                    palette : opts.palette,\r\n                    selectionPalette : opts.selectionPalette\r\n                })\r\n            } \r\n\r\n            if (pickerContainer[0]) {\r\n                this.picker = ColorPicker.instantiate(pickerContainer[0],{\r\n                    color : opts.color,\r\n                    states : {\r\n                        showInput: opts.states.showInput,\r\n                        allowEmpty: opts.states.allowEmpty,\r\n                        showButtons: opts.states.showButtons,\r\n                        showInitial: opts.states.showInitial,\r\n                        showAlpha: opts.states.showAlpha                                            \r\n                    }\r\n                }) ;\r\n\r\n                this.listenTo(this.picker,\"canceled\",(e) => {\r\n                    this.emit(\"canceled\");\r\n                });    \r\n                this.listenTo(this.picker,\"choosed\",(e) => {\r\n                    this.emit(\"choosed\");\r\n                });    \r\n                this.listenTo(this.picker,\"picked\",(e,color) => {\r\n                    this.emit(\"picked\",color);\r\n                }); \r\n            }\r\n            this._init();\r\n\r\n        },\r\n\r\n        _init : function () {\r\n            var self = this,\r\n                opts = this.options;\r\n           if (browser.isIE) {\r\n                this.$container.find(\"*:not(input)\").attr(\"unselectable\", \"on\");\r\n            }\r\n\r\n            this._applyOptions();\r\n\r\n\r\n          \r\n            this.listenTo(this.$toggleButton,\"click\", function (e) {\r\n                eventer.stop(e);\r\n\r\n                self.stating(\"showPaletteOnly\",!self.stating(\"showPaletteOnly\"));\r\n            });\r\n\r\n            this.listenTo(this.palette,\"selected\",function(e,color){\r\n                self.picker.current(color);\r\n            });\r\n        },\r\n\r\n        revert :  function () {\r\n            this.set(this._colorOnShow, true);\r\n            this._updateOriginalInput(true);\r\n        },\r\n\r\n\r\n        get : function () {\r\n            return this.picker.current();\r\n        },\r\n\r\n\r\n        set : function (color) {\r\n            this.picker.current(color);\r\n            this.palette.current(color);\r\n        },\r\n\r\n        _applyStates : function() {\r\n           var states = this._states ;\r\n\r\n            if (states.showPaletteOnly) {\r\n                states.showPalette = true;\r\n            }\r\n\r\n            this.$toggleButton.text(states.showPaletteOnly ? this.option(\"texts.togglePaletteMoreText\"): this.option(\"texts.togglePaletteLessText\"));\r\n\r\n\r\n            this.$el.toggleClass(\"sp-input-disabled\", !states.showInput)\r\n                            .toggleClass(\"sp-clear-enabled\", !!states.allowEmpty)\r\n                            .toggleClass(\"sp-alpha-enabled\", states.showAlpha)\r\n                            .toggleClass(\"sp-buttons-disabled\", !states.showButtons)\r\n                            .toggleClass(\"sp-palette-buttons-disabled\", !states.togglePaletteOnly)\r\n                            .toggleClass(\"sp-palette-disabled\", !states.showPalette)\r\n                            .toggleClass(\"sp-palette-only\", states.showPaletteOnly)\r\n                            .toggleClass(\"sp-initial-disabled\", !states.showInitial);\r\n\r\n            if (states.showPaletteOnly) {\r\n                this.$el.css('left', '-=' + (this.$pickerContainer.outerWidth(true) + 5));\r\n            }\r\n        },\r\n\r\n        stating : function(name,value) {\r\n            if (value !== undefined) {\r\n                this._states[name] = value;\r\n                this._applyStates();\r\n            } else {\r\n                return this._states[name];\r\n            }\r\n        },\r\n\r\n        reflow : function () {\r\n\r\n            if (this.stating(\"showPalette\")) {\r\n                this.palette.reflow();\r\n            }\r\n\r\n            this.picker.reflow();\r\n\r\n        }\r\n    });\r\n\r\n\r\n    plugins.register(ColorPane);\r\n\r\n    return colors.ColorPane = ColorPane;\r\n});\ndefine('skylark-domx-colors/ColorBox',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-finder\",\r\n    \"skylark-domx-query\",\r\n    \"skylark-domx-eventer\",\r\n    \"skylark-domx-styler\",\r\n    \"skylark-domx-plugins\",\r\n    \"skylark-domx-popups\",\r\n    \"skylark-graphics-color\",\r\n    \"./colors\",\r\n    \"./ColorPane\"\r\n   ],function(langx, noder, finder, $,eventer, styler,plugins,popups,Color,colors,ColorPane) {\r\n    \"use strict\";\r\n\r\n    var ColorBox = plugins.Plugin.inherit({\r\n        klassName : \"ColorBox\",\r\n\r\n        pluginName : \"domx.colors.box\",\r\n\r\n        options : {\r\n            pane : {\r\n                states : {\r\n                    showPalette: false,\r\n                    showPaletteOnly: false,\r\n                    togglePaletteOnly: false,\r\n                    showSelectionPalette: true,\r\n                    showInput: false,\r\n                    allowEmpty: false,\r\n                    showButtons: true,\r\n                    showInitial: false,\r\n                    showAlpha: false\r\n                },                \r\n                maxSelectionSize: 7,\r\n\r\n                palette : undefined,\r\n                selectionPalette : undefined\r\n            },\r\n\r\n            // Options\r\n            color: false\r\n\r\n        },\r\n\r\n        _updateUI : function () {\r\n            var realColor = this.get(),\r\n                displayColor = '';\r\n             //reset background info for preview element\r\n            this.$previewElement.removeClass(\"sp-clear-display\");\r\n            this.$previewElement.css('background-color', 'transparent');\r\n\r\n            if (!realColor && this.stating(\"allowEmpty\")) {\r\n                // Update the replaced elements background with icon indicating no color selection\r\n                this.$previewElement.addClass(\"sp-clear-display\");\r\n            }\r\n            else {\r\n                var realHex = realColor.toHexString(),\r\n                    realRgb = realColor.toRgbString();\r\n\r\n                // Update the replaced elements background color (with actual selected color)\r\n                this.$previewElement.css(\"background-color\", realRgb);\r\n\r\n                displayColor = realColor.toString();\r\n            }\r\n\r\n            this.pane._updateUI();\r\n        },\r\n\r\n\r\n        _applyOptions : function () {\r\n\r\n           this.reflow();\r\n        },\r\n\r\n         _construct: function(elm, options) {\r\n            plugins.Plugin.prototype._construct.call(this,elm,options);\r\n\r\n            this.$el = this.$();\r\n\r\n            var opts = this.options,\r\n            \t$pane = this.$pane = $(opts.pane.template),\r\n                $previewElement = this.$previewElement = this.$el.find(\".sp-preview-inner\");\r\n\r\n\r\n            if ($pane[0]) {\r\n                this.pane = ColorPane.instantiate($pane[0],langx.mixin({\r\n                    color : opts.color\r\n                },opts.pane));\r\n\r\n            } \r\n\r\n            this._init();\r\n\r\n        },\r\n\r\n        _init : function () {\r\n            var self = this,\r\n                opts = this.options;\r\n\r\n            this._applyOptions();\r\n\r\n            var paneIsVisible = false;\r\n            this.$pane.hide();\r\n            function showPane() {\r\n                if (paneIsVisible) {\r\n                    return;\r\n                }\r\n               \r\n                paneIsVisible = true;\r\n\r\n                self.$pane.show();\r\n\r\n                self.reflow();\r\n                \r\n                self._updateUI();\r\n                \r\n            }\r\n\r\n            function hidePane() {\r\n                if (!paneIsVisible) {\r\n                    return;\r\n                }\r\n                paneIsVisible = false;\r\n\r\n                self.$pane.hide();\r\n            }\r\n\r\n\r\n            this.listenTo(this.$el,\"click touchstart\", function (e) {\r\n                if (paneIsVisible) {\r\n                    hidePane();\r\n                } else {\r\n                    showPane();\r\n                }\r\n\r\n              eventer.stop(e);\r\n            });\r\n\r\n            this.listenTo(this.pane,\"picked\",(e,color) => {\r\n\r\n                // Update the replaced elements background color (with actual selected color)\r\n                this.$previewElement.css(\"background-color\", color.toRgbString());               \r\n            });\r\n\r\n            this.listenTo(this.pane,\"canceled choosed\",(e) => {\r\n                hidePane();\r\n            });\r\n\r\n\r\n        },\r\n\r\n        revert :  function () {\r\n        \tthis.pane.revert();\r\n        },\r\n\r\n\r\n        get : function () {\r\n            return this.pane.get();\r\n        },\r\n\r\n\r\n        set : function (color) {\r\n        \tthis.pane.set(color);\r\n        },\r\n\r\n\r\n        reflow : function () {\r\n\r\n            this.$pane.css(\"position\", \"absolute\");\r\n            this.$pane.offset(popups.calcOffset(this.$pane[0], this.$el[0]));\r\n\r\n            this.pane.reflow();\r\n\r\n        }\r\n\r\n\r\n    });\r\n\r\n    plugins.register(ColorBox);\r\n\r\n    return colors.ColorBox = ColorBox;\r\n\r\n});\ndefine('skylark-domx-colors/colorer',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-query\",\r\n\t\"./colors\",\r\n\t\"./ColorBox\",\r\n\t\"./ColorPane\"\r\n],function(langx,$,colors,ColorBox,ColorPane){\r\n   var pickers = [],\r\n    replaceInput = [\r\n        \"<div class='sp-replacer'>\",\r\n            \"<div class='sp-preview'><div class='sp-preview-inner'></div></div>\",\r\n            \"<div class='sp-dd'>&#9660;</div>\",\r\n        \"</div>\"\r\n    ].join(''),\r\n    \r\n    markup = (function () {\r\n        return [\r\n            \"<div class='sp-container'>\",\r\n                \"<div class='sp-palette-container'>\",\r\n                    \"<div class='sp-palette sp-thumb sp-cf'></div>\",\r\n                    \"<div class='sp-palette-button-container sp-cf'>\",\r\n                        \"<button type='button' class='sp-palette-toggle'></button>\",\r\n                    \"</div>\",\r\n                \"</div>\",\r\n                \"<div class='sp-picker-container'>\",\r\n                    \"<div class='sp-top sp-cf'>\",\r\n                        \"<div class='sp-fill'></div>\",\r\n                        \"<div class='sp-top-inner'>\",\r\n                            \"<div class='sp-color'>\",\r\n                                \"<div class='sp-sat'>\",\r\n                                    \"<div class='sp-val'>\",\r\n                                        \"<div class='sp-dragger'></div>\",\r\n                                    \"</div>\",\r\n                                \"</div>\",\r\n                            \"</div>\",\r\n                            \"<div class='sp-clear sp-clear-display'>\",\r\n                            \"</div>\",\r\n                            \"<div class='sp-hue'>\",\r\n                                \"<div class='sp-slider'></div>\",\r\n                            \"</div>\",\r\n                        \"</div>\",\r\n                        \"<div class='sp-alpha'><div class='sp-alpha-inner'><div class='sp-alpha-handle'></div></div></div>\",\r\n                    \"</div>\",\r\n                    \"<div class='sp-input-container sp-cf'>\",\r\n                        \"<input class='sp-input' type='text' spellcheck='false'  />\",\r\n                    \"</div>\",\r\n                    \"<div class='sp-initial sp-thumb sp-cf'></div>\",\r\n                    \"<div class='sp-button-container sp-cf'>\",\r\n                        \"<a class='sp-cancel' href='#'></a>\",\r\n                        \"<button type='button' class='sp-choose'></button>\",\r\n                    \"</div>\",\r\n                \"</div>\",\r\n            \"</div>\"\r\n        ].join(\"\");\r\n    })();\r\n\r\n\r\n\tfunction colorer(elmInput,options) {\r\n\t\toptions = langx.mixin({\r\n            // Options\r\n            color: false,\r\n            flat: false,\r\n            appendTo: \"body\",\r\n            maxSelectionSize: 7,\r\n            preferredFormat: false,\r\n            containerClassName: \"\",\r\n            replacerClassName: \"\",\r\n            theme: \"sp-light\",\r\n\r\n            offset: null\r\n\t\t},options);\r\n\r\n\t\tvar \r\n\t\t\ttheme = options.theme,\r\n\t\t\tflat = options.flat,\r\n\t\t\tappendTo = options.appendTo,\r\n\t\t\t$el = $(elmInput),\r\n\t\t\t$pane = $(markup,elmInput.ownerDocument).addClass(theme),\r\n\t        isInput = $el.is(\"input\"),\r\n\t        isInputTypeColor = isInput && $el.attr(\"type\") === \"color\",\r\n\t        shouldReplace = this._shouldReplace =  isInput && !flat,\r\n\t        $replacer =  (shouldReplace) ? $(replaceInput).addClass(theme)\r\n\t                                                      .addClass(options.className)\r\n\t                                                      .addClass(options.replacerClassName) \r\n\t                                     : $([]),\r\n\t        $offsetElement =  (shouldReplace) ? $replacer : $el;\r\n\r\n\r\n        delete options.flat;\r\n        delete options.appendTo;\r\n\r\n        options.color = options.color || (isInput && $el.val());\r\n\r\n        if (shouldReplace) {\r\n            $el.after($replacer).hide();\r\n        }\r\n\r\n\r\n        $pane.toggleClass(\"sp-flat\", flat)\r\n             .addClass(options.containerClassName);\r\n\r\n        if (flat) {\r\n            $el.after($pane).hide();\r\n            var pane = new ColorPane($pane[0],options);\r\n            $pane.show();\r\n            return pane;\r\n        } else {\r\n            var $appendTo = appendTo === \"parent\" ? $el.parent() : $(appendTo);\r\n            if ($appendTo.length !== 1) {\r\n                $appendTo = $(\"body\");\r\n            }\r\n\r\n            $appendTo.append($pane);\r\n            options.pane.template = $pane;\r\n            return new ColorBox($replacer[0],options);\r\n        }\r\n\t}\r\n\r\n\treturn colors.colorer = colorer;\r\n});\ndefine('skylark-domx-colors/main',[\r\n\t\"skylark-domx-query\",\r\n\t\"./colors\",\r\n    \"./colorer\",\r\n    \"./ColorPalette\",\r\n    \"./ColorPicker\",\r\n    \"./ColorPane\"\r\n], function($,colors,colorer) {\r\n   \r\n   $.fn.colorer = $.wraps.wrapper_every_act(colorer,colors);\r\n\r\n   return colors;\r\n\r\n});\r\n\ndefine('skylark-domx-colors', ['skylark-domx-colors/main'], function (main) { return main; });\n\n"]}