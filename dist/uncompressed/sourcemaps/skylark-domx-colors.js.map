{"version":3,"sources":["skylark-domx-colors.js"],"names":[],"mappingsfile":"../skylark-domx-colors.js","sourcesContent":["define('skylark-domx-colors/colors',[\r\n\t\"skylark-langx/skylark\"\r\n],function(skylark){\r\n\treturn skylark.attach(\"domx.colores\",{});\r\n});\ndefine('skylark-domx-colors/Indicator',[\r\n   \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-browser\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-eventer\",\r\n    \"skylark-domx-finder\",\r\n    \"skylark-domx-query\",\r\n    \"skylark-domx-plugins\"    \r\n],function(skylark, langx, browser, noder, eventer,finder, $,plugins) {\r\n    /**\r\n    * Lightweight drag helper.  Handles containment within the element, so that\r\n    * when dragging, the x is within [0,element.width] and y is within [0,element.height]\r\n    */\r\n    function draggable(element, onmove, onstart, onstop) {\r\n        onmove = onmove || function () { };\r\n        onstart = onstart || function () { };\r\n        onstop = onstop || function () { };\r\n        var doc = document;\r\n        var dragging = false;\r\n        var offset = {};\r\n        var maxHeight = 0;\r\n        var maxWidth = 0;\r\n        var hasTouch = ('ontouchstart' in window);\r\n\r\n        var duringDragEvents = {};\r\n        duringDragEvents[\"selectstart\"] = prevent;\r\n        duringDragEvents[\"dragstart\"] = prevent;\r\n        duringDragEvents[\"touchmove mousemove\"] = move;\r\n        duringDragEvents[\"touchend mouseup\"] = stop;\r\n\r\n        function prevent(e) {\r\n            if (e.stopPropagation) {\r\n                e.stopPropagation();\r\n            }\r\n            if (e.preventDefault) {\r\n                e.preventDefault();\r\n            }\r\n            e.returnValue = false;\r\n        }\r\n\r\n        function move(e) {\r\n            if (dragging) {\r\n                // Mouseup happened outside of window\r\n                if (browser.isIE && doc.documentMode < 9 && !e.button) {\r\n                    return stop();\r\n                }\r\n\r\n                var t0 = e.originalEvent && e.originalEvent.touches && e.originalEvent.touches[0];\r\n                var pageX = t0 && t0.pageX || e.pageX;\r\n                var pageY = t0 && t0.pageY || e.pageY;\r\n\r\n                var dragX = Math.max(0, Math.min(pageX - offset.left, maxWidth));\r\n                var dragY = Math.max(0, Math.min(pageY - offset.top, maxHeight));\r\n\r\n                if (hasTouch) {\r\n                    // Stop scrolling in iOS\r\n                    prevent(e);\r\n                }\r\n\r\n                onmove.apply(element, [dragX, dragY, e]);\r\n            }\r\n        }\r\n\r\n        function start(e) {\r\n            var rightclick = (e.which) ? (e.which == 3) : (e.button == 2);\r\n\r\n            var onstart = this.options.onstart || funcs.noop;\r\n\r\n            if (!rightclick && !dragging) {\r\n                if (onstart.apply(element, arguments) !== false) {\r\n                    dragging = true;\r\n                    maxHeight = $(element).height();\r\n                    maxWidth = $(element).width();\r\n                    offset = $(element).offset();\r\n\r\n                    $(doc).on(duringDragEvents);\r\n                    $(doc.body).addClass(\"sp-dragging\");\r\n\r\n                    move(e);\r\n\r\n                    prevent(e);\r\n                }\r\n            }\r\n        }\r\n\r\n        function stop() {\r\n            if (dragging) {\r\n                $(doc).off(duringDragEvents);\r\n                $(doc.body).removeClass(\"sp-dragging\");\r\n\r\n                // Wait a tick before notifying observers to allow the click event\r\n                // to fire in Chrome.\r\n                setTimeout(function() {\r\n                    onstop.apply(element, arguments);\r\n                }, 0);\r\n            }\r\n            dragging = false;\r\n        }\r\n\r\n        $(element).on(\"touchstart mousedown\", start);\r\n    }\r\n\t\r\n\r\n    var Indicator = plugins.Plugin.inherit({\r\n        klassName : \"Indicator\",\r\n\r\n        pluginName : \"domx.indicator\",\r\n\r\n        options : {\r\n        },\r\n\r\n        _construct: function(elm, options) {\r\n            this.overrided(elm,options);\r\n\r\n            this.listenTo(this.elmx(),\"mousedown\" , (e) => {\r\n                this._start(e);\r\n            });\r\n\r\n        },\r\n\r\n        _move : function(e) {\r\n            if (this._dragging) {\r\n                var offset = this._offset,\r\n                    pageX = e.pageX,\r\n                    pageY = e.pageY,\r\n                    maxWidth = this._maxWidth,\r\n                    maxHeight = this._maxHeight;\r\n\r\n                var dragX = Math.max(0, Math.min(pageX - offset.left, maxWidth));\r\n                var dragY = Math.max(0, Math.min(pageY - offset.top, maxHeight));\r\n\r\n                var onmove = this.options.onmove;\r\n                if (onmove) {\r\n                    onmove.apply(this._elm, [dragX, dragY, e]);\r\n                }\r\n            }\r\n        },\r\n\r\n        _start : function(e) {\r\n            var rightclick = (e.which) ? (e.which == 3) : (e.button == 2);\r\n\r\n            if (!rightclick && !this._dragging) {\r\n                var onstart = this.options.onstart;\r\n                if (!onstart || onstart.apply(this._elm, arguments) !== false) {\r\n                    this._dragging = true;\r\n                    var $el = this.$();\r\n\r\n                    this._maxHeight = $el.height();\r\n                    this._maxWidth = $el.width();\r\n                    this._offset = $el.offset();\r\n\r\n                    var $doc = this.$(document)\r\n\r\n                    this.listenTo($doc,{\r\n                        \"mousemove\" : (e) => {\r\n                            this._move(e);\r\n                        },\r\n                        \"mouseup\" : (e) => {\r\n                            this._stop(e);\r\n                        }                \r\n                    });\r\n                    $doc.find(\"body\").addClass(\"sp-dragging\");\r\n\r\n                    this._move(e);\r\n\r\n                    eventer.stop(e);\r\n                }\r\n            }\r\n        },\r\n\r\n        _stop : function(e) {\r\n            var $doc = this.$(document);\r\n            if (this._dragging) {\r\n                this.unlistenTo($doc);\r\n                $doc.find(\"body\").removeClass(\"sp-dragging\");\r\n\r\n                onstop = this.options.onstop;\r\n\r\n                // Wait a tick before notifying observers to allow the click event\r\n                // to fire in Chrome.\r\n                if (onstop) {\r\n                    this._delay(function() {\r\n                        onstop.apply(this._elm, arguments);\r\n                    });\r\n                }\r\n            }\r\n            this._dragging = false;            \r\n        }\r\n    });\r\n\r\n    plugins.register(Indicator);\r\n\r\n\treturn Indicator;\r\n});\ndefine('skylark-domx-colors/ColorPane',[\r\n   \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-browser\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-finder\",\r\n    \"skylark-domx-query\",\r\n    \"skylark-domx-eventer\",\r\n    \"skylark-domx-styler\",\r\n    \"skylark-domx-fx\",\r\n    \"skylark-domx-plugins\",\r\n    \"skylark-domx-popups\",\r\n    \"skylark-graphics-color\",\r\n    \"./colors\",\r\n    \"./Indicator\"\r\n],function(skylark, langx, browser, noder, finder, $,eventer, styler,fx,plugins,popups,Color,colors,Indicator) {\r\n    \"use strict\";\r\n\r\n    var noop = langx.noop;\r\n\r\n    var pickers = [],\r\n    replaceInput = [\r\n        \"<div class='sp-replacer'>\",\r\n            \"<div class='sp-preview'><div class='sp-preview-inner'></div></div>\",\r\n            \"<div class='sp-dd'>&#9660;</div>\",\r\n        \"</div>\"\r\n    ].join(''),\r\n    \r\n    markup = (function () {\r\n        return [\r\n            \"<div class='sp-container sp-hidden'>\",\r\n                \"<div class='sp-palette-container'>\",\r\n                    \"<div class='sp-palette sp-thumb sp-cf'></div>\",\r\n                    \"<div class='sp-palette-button-container sp-cf'>\",\r\n                        \"<button type='button' class='sp-palette-toggle'></button>\",\r\n                    \"</div>\",\r\n                \"</div>\",\r\n                \"<div class='sp-picker-container'>\",\r\n                    \"<div class='sp-top sp-cf'>\",\r\n                        \"<div class='sp-fill'></div>\",\r\n                        \"<div class='sp-top-inner'>\",\r\n                            \"<div class='sp-color'>\",\r\n                                \"<div class='sp-sat'>\",\r\n                                    \"<div class='sp-val'>\",\r\n                                        \"<div class='sp-dragger'></div>\",\r\n                                    \"</div>\",\r\n                                \"</div>\",\r\n                            \"</div>\",\r\n                            \"<div class='sp-clear sp-clear-display'>\",\r\n                            \"</div>\",\r\n                            \"<div class='sp-hue'>\",\r\n                                \"<div class='sp-slider'></div>\",\r\n                            \"</div>\",\r\n                        \"</div>\",\r\n                        \"<div class='sp-alpha'><div class='sp-alpha-inner'><div class='sp-alpha-handle'></div></div></div>\",\r\n                    \"</div>\",\r\n                    \"<div class='sp-input-container sp-cf'>\",\r\n                        \"<input class='sp-input' type='text' spellcheck='false'  />\",\r\n                    \"</div>\",\r\n                    \"<div class='sp-initial sp-thumb sp-cf'></div>\",\r\n                    \"<div class='sp-button-container sp-cf'>\",\r\n                        \"<a class='sp-cancel' href='#'></a>\",\r\n                        \"<button type='button' class='sp-choose'></button>\",\r\n                    \"</div>\",\r\n                \"</div>\",\r\n            \"</div>\"\r\n        ].join(\"\");\r\n    })();\r\n\r\n    function paletteTemplate (p, color, className, opts) {\r\n        var html = [];\r\n        for (var i = 0; i < p.length; i++) {\r\n            var current = p[i];\r\n            if(current) {\r\n                var tiny = Color.parse(current);\r\n                var c = tiny.toHsl().l < 0.5 ? \"sp-thumb-el sp-thumb-dark\" : \"sp-thumb-el sp-thumb-light\";\r\n                c += (Color.equals(color, current)) ? \" sp-thumb-active\" : \"\";\r\n                var formattedString = tiny.toString(opts.preferredFormat || \"rgb\");\r\n                var swatchStyle = \"background-color:\" + tiny.toRgbString();\r\n                html.push('<span title=\"' + formattedString + '\" data-color=\"' + tiny.toRgbString() + '\" class=\"' + c + '\"><span class=\"sp-thumb-inner\" style=\"' + swatchStyle + ';\" /></span>');\r\n            } else {\r\n                var cls = 'sp-clear-display';\r\n                html.push($('<div />')\r\n                    .append($('<span data-color=\"\" style=\"background-color:transparent;\" class=\"' + cls + '\"></span>')\r\n                        .attr('title', opts.texts.noColorSelectedText)\r\n                    )\r\n                    .html()\r\n                );\r\n            }\r\n        }\r\n        return \"<div class='sp-cf \" + className + \"'>\" + html.join('') + \"</div>\";\r\n    }\r\n\r\n\r\n    var ColorPane = plugins.Plugin.inherit({\r\n        klassName : \"ColorPane\",\r\n\r\n        pluginName : \"domx.colors.pane\",\r\n\r\n        options : {\r\n            selectors  : {\r\n                pickerContainer : \".sp-picker-container\",\r\n                toggleButton : \".sp-palette-toggle\",\r\n                paletteContainer : \".sp-palette\",\r\n                dragger : \".sp-color\",\r\n                dragHelper : \".sp-dragger\",\r\n                slider : \".sp-hue\",\r\n                slideHelper : \".sp-slider\",\r\n                alphaSliderInner : \".sp-alpha-inner\",\r\n                alphaSlider : \".sp-alpha\",\r\n                alphaSlideHelper : \".sp-alpha-handle\",\r\n                textInput : \".sp-input\",\r\n                initialColorContainer : \".sp-initial\",\r\n                cancelButton : \".sp-cancel\",\r\n                clearButton : \".sp-clear\",\r\n                chooseButton : \".sp-choose\"\r\n            },\r\n\r\n            draggingClass : \"sp-dragging\",\r\n           \r\n\r\n            texts : {\r\n                cancelText: \"cancel\",\r\n                chooseText: \"choose\",\r\n                togglePaletteMoreText: \"more\",\r\n                togglePaletteLessText: \"less\",\r\n                clearText: \"Clear Color Selection\",\r\n                noColorSelectedText: \"No Color Selected\"\r\n            },\r\n\r\n            states : {\r\n                showPalette: false,\r\n                showPaletteOnly: false,\r\n                togglePaletteOnly: false,\r\n                showSelectionPalette: true,\r\n                showInput: false,\r\n                allowEmpty: false,\r\n                showButtons: true,\r\n                showInitial: false,\r\n                showAlpha: false\r\n            },\r\n\r\n\r\n            // Options\r\n            color: false,\r\n            flat: false,\r\n            clickoutFiresChange: true,\r\n            hideAfterPaletteSelect: false,\r\n            appendTo: \"body\",\r\n            maxSelectionSize: 7,\r\n            preferredFormat: false,\r\n            containerClassName: \"\",\r\n            replacerClassName: \"\",\r\n            theme: \"sp-light\",\r\n            palette: [\r\n                [\"#ffffff\", \"#000000\", \"#ff0000\", \"#ff8000\", \"#ffff00\", \"#008000\", \"#0000ff\", \"#4b0082\", \"#9400d3\"]\r\n            ],\r\n            selectionPalette: [],\r\n            disabled: false,\r\n            offset: null\r\n\r\n        },\r\n\r\n        _addColorToSelectionPalette : function (color) {\r\n            if (this.stating(\"showSelectionPalette\")) {\r\n                var rgb = Color.parse(color).toRgbString();\r\n                if (!this._paletteLookup[rgb] && langx.inArray(rgb, this._selectionPalette) === -1) {\r\n                    this._selectionPalette.push(rgb);\r\n                    while(this._selectionPalette.length > this._maxSelectionSize) {\r\n                        this._selectionPalette.shift();\r\n                    }\r\n                }\r\n            }\r\n        },\r\n\r\n        getUniqueSelectionPalette : function () {\r\n            var unique = [],\r\n                opts = this.options;\r\n            if (this.stating(\"showPalette\")) {\r\n                for (var i = 0; i < this._selectionPalette.length; i++) {\r\n                    var rgb = Color.parse(this._selectionPalette[i]).toRgbString();\r\n\r\n                    if (!this._paletteLookup[rgb]) {\r\n                        unique.push(this._selectionPalette[i]);\r\n                    }\r\n                }\r\n            }\r\n\r\n            return unique.reverse().slice(0, opts.maxSelectionSize);\r\n        },\r\n\r\n        _drawPalette : function () {\r\n\r\n            var opts = this.options,\r\n                currentColor = this.get();\r\n\r\n            var html = langx.map(this._paletteArray, function (palette, i) {\r\n                return paletteTemplate(palette, currentColor, \"sp-palette-row sp-palette-row-\" + i, opts);\r\n            });\r\n\r\n            if (this._selectionPalette) {\r\n                html.push(paletteTemplate(this.getUniqueSelectionPalette(), currentColor, \"sp-palette-row sp-palette-row-selection\", opts));\r\n            }\r\n\r\n            this.$paletteContainer.html(html.join(\"\"));\r\n        },\r\n\r\n        _drawInitial : function () {\r\n            var opts = this.options;\r\n            if (this.stating(\"showInitial\")) {\r\n                var initial = this._colorOnShow;\r\n                var current = this.get();\r\n                this.$initialColorContainer.html(paletteTemplate([initial, current], current, \"sp-palette-row-initial\", opts));\r\n            }\r\n        },\r\n\r\n        _updateHelperLocations : function () {\r\n            var s = this._currentSaturation;\r\n            var v = this._currentValue;\r\n\r\n            if(this.stating(\"allowEmpty\") && this._isEmpty) {\r\n                //if selected color is empty, hide the helpers\r\n                this.$alphaSlideHelper.hide();\r\n                this.$slideHelper.hide();\r\n                this.$dragHelper.hide();\r\n            }\r\n            else {\r\n                //make sure helpers are visible\r\n                this.$alphaSlideHelper.show();\r\n                this.$slideHelper.show();\r\n                this.$dragHelper.show();\r\n\r\n                // Where to show the little circle in that displays your current selected color\r\n                var dragX = s * this._dragWidth;\r\n                var dragY = this._dragHeight - (v * this._dragHeight);\r\n                dragX = Math.max(\r\n                    -this._dragHelperHeight,\r\n                    Math.min(this._dragWidth - this._dragHelperHeight, dragX - this._dragHelperHeight)\r\n                );\r\n                dragY = Math.max(\r\n                    -this._dragHelperHeight,\r\n                    Math.min(this._dragHeight - this._dragHelperHeight, dragY - this._dragHelperHeight)\r\n                );\r\n                this.$dragHelper.css({\r\n                    \"top\": dragY + \"px\",\r\n                    \"left\": dragX + \"px\"\r\n                });\r\n\r\n                var alphaX = this._currentAlpha * this._alphaWidth;\r\n                this.$alphaSlideHelper.css({\r\n                    \"left\": (alphaX - (this._alphaSlideHelperWidth / 2)) + \"px\"\r\n                });\r\n\r\n                // Where to show the bar that displays your current selected hue\r\n                var slideY = (this._currentHue) * this._slideHeight;\r\n                this.$slideHelper.css({\r\n                    \"top\": (slideY - this._slideHelperHeight) + \"px\"\r\n                });\r\n            }\r\n        },\r\n\r\n        _updateOriginalInput : function (fireCallback) {\r\n            var color = this.get(),\r\n                displayColor = '',\r\n                hasChanged = !Color.equals(color, this._colorOnShow);\r\n\r\n            if (color) {\r\n                displayColor = color.toString(this._currentPreferredFormat);\r\n                // Update the selection palette with the current color\r\n                this._addColorToSelectionPalette(color);\r\n            }\r\n\r\n            if (this._isInput) {\r\n                this.$el.val(displayColor);\r\n            }\r\n\r\n            if (fireCallback && hasChanged) {\r\n                //callbacks.change(color);\r\n                //this.$el.trigger('change', [ color ]);\r\n            }\r\n        },\r\n\r\n        _updateUI : function () {\r\n            var opts = this.options;\r\n\r\n            this._dragWidth = this.$dragger.width();\r\n            this._dragHeight = this.$dragger.height();\r\n            this._dragHelperHeight = this.$dragHelper.height();\r\n            this._slideWidth = this.$slider.width();\r\n            this._slideHeight = this.$slider.height();\r\n            this._slideHelperHeight = this.$slideHelper.height();\r\n            this._alphaWidth = this.$alphaSlider.width();\r\n            this._alphaSlideHelperWidth = this.$alphaSlideHelper.width();\r\n            \r\n            this.$textInput.removeClass(\"sp-validation-error\");\r\n\r\n            this._updateHelperLocations();\r\n\r\n            // Update dragger background color (gradients take care of saturation and value).\r\n            //var flatColor = Color.fromRatio({ h: currentHue, s: 1, v: 1 });\r\n            var flatColor = Color.parse({ \r\n                h: this._currentHue * 360, \r\n                s: 1, \r\n                v: 1 \r\n            });\r\n            this.$dragger.css(\"background-color\", flatColor.toHexString());\r\n\r\n            // Get a format that alpha will be included in (hex and names ignore alpha)\r\n            var format = this._currentPreferredFormat;\r\n            if (this._currentAlpha < 1 && !(this._currentAlpha === 0 && format === \"name\")) {\r\n                if (format === \"hex\" || format === \"hex3\" || format === \"hex6\" || format === \"name\") {\r\n                    format = \"rgb\";\r\n                }\r\n            }\r\n\r\n            var realColor = this.get({ format: format }),\r\n                displayColor = '';\r\n\r\n             //reset background info for preview element\r\n            this.$previewElement.removeClass(\"sp-clear-display\");\r\n            this.$previewElement.css('background-color', 'transparent');\r\n\r\n            if (!realColor && this.stating(\"allowEmpty\")) {\r\n                // Update the replaced elements background with icon indicating no color selection\r\n                this.$previewElement.addClass(\"sp-clear-display\");\r\n            }\r\n            else {\r\n                var realHex = realColor.toHexString(),\r\n                    realRgb = realColor.toRgbString();\r\n\r\n                // Update the replaced elements background color (with actual selected color)\r\n                this.$previewElement.css(\"background-color\", realRgb);\r\n\r\n                if (this.stating(\"showAlpha\")) {\r\n                    var rgb = realColor.toRgb();\r\n                    rgb.a = 0;\r\n                    var realAlpha = Color.parse(rgb).toRgbString();\r\n                    var gradient = \"linear-gradient(left, \" + realAlpha + \", \" + realHex + \")\";\r\n\r\n                    if (browser.isIE) {\r\n                        this.$alphaSliderInner.css(\"filter\", Color.parse(realAlpha).toFilter({ gradientType: 1 }, realHex));\r\n                    }\r\n                    else {\r\n                        this.$alphaSliderInner.css(\"background\", \"-webkit-\" + gradient);\r\n                        this.$alphaSliderInner.css(\"background\", \"-moz-\" + gradient);\r\n                        this.$alphaSliderInner.css(\"background\", \"-ms-\" + gradient);\r\n                        // Use current syntax gradient on unprefixed property.\r\n                        this.$alphaSliderInner.css(\"background\",\r\n                            \"linear-gradient(to right, \" + realAlpha + \", \" + realHex + \")\");\r\n                    }\r\n                }\r\n\r\n                displayColor = realColor.toString(format);\r\n            }\r\n\r\n            // Update the text entry input as it changes happen\r\n            if (this.stating(\"showInput\")) {\r\n                this.$textInput.val(displayColor);\r\n            }\r\n\r\n            if (this.stating(\"showPalette\")) {\r\n                this._drawPalette();\r\n            }\r\n\r\n            this._drawInitial();\r\n        },\r\n\r\n\r\n        _applyOptions : function () {\r\n            var opts = this.options;\r\n\r\n            this._states = {\r\n            \tallowEmpty : opts.states.allowEmpty,\r\n                showInput : opts.states.showInput,\r\n                showAlpha : opts.states.showAlpha,\r\n                showButtons : opts.states.showButtons,\r\n                togglePaletteOnly : opts.states.togglePaletteOnly,\r\n                showPalette : opts.states.showPalette,\r\n                showPaletteOnly : opts.states.showPaletteOnly,\r\n                showInitial : opts.states.showInitial\r\n            };\r\n\r\n\r\n            if (opts.palette) {\r\n                var  palette = this._palette = opts.palette.slice(0),\r\n                    paletteArray = this._paletteArray = langx.isArray(palette[0]) ? palette : [palette],\r\n                    paletteLookup = this._paletteLookup = {};\r\n                for (var i = 0; i < paletteArray.length; i++) {\r\n                    for (var j = 0; j < paletteArray[i].length; j++) {\r\n                        var rgb = Color.parse(paletteArray[i][j]).toRgbString();\r\n                        paletteLookup[rgb] = true;\r\n                    }\r\n                }\r\n            }\r\n\r\n            this.$container.toggleClass(\"sp-flat\", opts.flat)\r\n                            .addClass(opts.containerClassName);\r\n\r\n           this._applyStates();\r\n\r\n           this.reflow();\r\n        },\r\n\r\n         _construct: function(elm, options) {\r\n            this.overrided(elm,options);\r\n\r\n            this.$el = this.$();\r\n\r\n            var opts = this.options,\r\n                theme = opts.theme,\r\n                selectionPalette = this._selectionPalette =  opts.selectionPalette.slice(0);\r\n\r\n\r\n            var container = this.$container = $(markup,elm.ownerDocument).addClass(theme),\r\n                pickerContainer = this.$pickerContainer =  container.find(opts.selectors.pickerContainer),\r\n                dragger = this.$dragger = container.find(opts.selectors.dragger),\r\n                dragHelper = this.$dragHelper = container.find(opts.selectors.dragHelper),\r\n                slider = this.$slider = container.find(opts.selectors.slider),\r\n                slideHelper = this.$slideHelper =  container.find(opts.selectors.slideHelper),\r\n                alphaSliderInner = this.$alphaSliderInner = container.find(opts.selectors.alphaSliderInner),\r\n                alphaSlider = this.$alphaSlider = container.find(opts.selectors.alphaSlider),\r\n                alphaSlideHelper = this.$alphaSlideHelper = container.find(opts.selectors.alphaSlideHelper),\r\n                textInput = this.$textInput = container.find(opts.selectors.textInput),\r\n                paletteContainer = this.$paletteContainer =  container.find(opts.selectors.paletteContainer),\r\n                initialColorContainer = this.$initialColorContainer = container.find(opts.selectors.initialColorContainer),\r\n                cancelButton = this.$cancelButton = container.find(opts.selectors.cancelButton),\r\n                clearButton = this.$clearButton = container.find(opts.selectors.clearButton),\r\n                chooseButton = this.$chooseButton = container.find(opts.selectors.chooseButton),\r\n                toggleButton = this.$toggleButton = container.find(opts.selectors.toggleButton),\r\n                isInput = this._isInput = this.$el.is(\"input\"),\r\n                isInputTypeColor = isInput && this.$el.attr(\"type\") === \"color\" && inputTypeColorSupport(),\r\n                shouldReplace = this._shouldReplace =  isInput && !opts.flat,\r\n                replacer = this.$replacer =  (shouldReplace) ? $(replaceInput).addClass(theme).addClass(opts.className).addClass(opts.replacerClassName) : $([]),\r\n                offsetElement = this.$offsetElement =  (shouldReplace) ? replacer : this.$el,\r\n                previewElement = this.$previewElement = replacer.find(\".sp-preview-inner\"),\r\n                initialColor = this._initialColor =  opts.color || (isInput && this.$el.val()),\r\n                colorOnShow = this._colorOnShow = false,\r\n                currentPreferredFormat = this._currentPreferredFormat = opts.preferredFormat,\r\n                isEmpty = this._isEmpty =  !initialColor;\r\n\r\n\r\n            function isValid() {\r\n                return !textInput.hasClass(\"sp-validation-error\");\r\n            }\r\n\r\n\r\n\r\n            this._init();\r\n\r\n        },\r\n\r\n        _init : function () {\r\n            var self = this,\r\n                opts = this.options;\r\n             function dragStart() {\r\n                if (self._dragHeight <= 0 || self._dragWidth <= 0 || self._slideHeight <= 0) {\r\n                    self.reflow();\r\n                }\r\n                self._isDragging = true;\r\n                self.$container.addClass(self.options.draggingClass);\r\n                self._shiftMovementDirection = null;\r\n                //this.$el.trigger('dragstart.ColorPane', [ get() ]);\r\n            }\r\n\r\n            function dragStop() {\r\n                self._isDragging = false;\r\n                self.$container.removeClass(self.options.draggingClass);\r\n                //this.$el.trigger('dragstop.ColorPane', [ get() ]);\r\n            }           \r\n\r\n            function move() {\r\n                self._updateUI();\r\n\r\n                //callbacks.move(get());\r\n                //this.$el.trigger('move.ColorPane', [ get() ]);\r\n            }\r\n\r\n            if (browser.isIE) {\r\n                this.$container.find(\"*:not(input)\").attr(\"unselectable\", \"on\");\r\n            }\r\n\r\n            if (this._shouldReplace) {\r\n                this.$el.after(this.$replacer).hide();\r\n            }\r\n\r\n\r\n            if (opts.flat) {\r\n                this.$el.after(this.$container).hide();\r\n            } else {\r\n                var appendTo = opts.appendTo === \"parent\" ? this.$el.parent() : $(opts.appendTo);\r\n                if (appendTo.length !== 1) {\r\n                    appendTo = $(\"body\");\r\n                }\r\n\r\n                appendTo.append(this.$container);\r\n            }\r\n\r\n            this._applyOptions();\r\n\r\n            this.listenTo(this.$offsetElement,\"click touchstart\", function (e) {\r\n                //if (!disabled) {\r\n                    self.toggle();\r\n                //}\r\n\r\n                e.stopPropagation();\r\n\r\n                if (!$(e.target).is(\"input\")) {\r\n                    e.preventDefault();\r\n                }\r\n            });\r\n\r\n            //if(this.$el.is(\":disabled\") || (opts.disabled === true)) {\r\n            //    disable();\r\n            //}\r\n\r\n            // Prevent clicks from bubbling up to document.  This would cause it to be hidden.\r\n            ///this.$container.click(stopPropagation);\r\n\r\n            // Handle user typed input\r\n            function setFromTextInput() {\r\n                var value = textInput.val();\r\n\r\n                if ((value === null || value === \"\") && self._allowEmpty) {\r\n                    self.set(null);\r\n                    move();\r\n                    self._updateOriginalInput();\r\n                }\r\n                else {\r\n                    var tiny = Color.parse(value);\r\n                    if (tiny.isValid()) {\r\n                        self.set(tiny);\r\n                        move();\r\n                        self._updateOriginalInput();\r\n                    }\r\n                    else {\r\n                        self.$textInput.addClass(\"sp-validation-error\");\r\n                    }\r\n                }\r\n            }\r\n            this.$textInput.change(setFromTextInput);\r\n            this.$textInput.on(\"paste\", function () {\r\n                setTimeout(setFromTextInput, 1);\r\n            });\r\n            this.$textInput.keydown(function (e) { if (e.keyCode == 13) { setFromTextInput(); } });\r\n\r\n            this.$cancelButton.text(opts.texts.cancelText);\r\n            \r\n            this.listenTo(this.$cancelButton,\"click\", function (e) {\r\n                //e.stopPropagation();\r\n                //e.preventDefault();\r\n                eventer.stop(e);\r\n                self.revert();\r\n                self.hide();\r\n            });\r\n\r\n            this.$clearButton.attr(\"title\", opts.texts.clearText);\r\n            this.listenTo(this.$clearButton,\"click\", function (e) {\r\n                //e.stopPropagation();\r\n                //e.preventDefault();\r\n                eventer.stop(e);\r\n                self._isEmpty = true;\r\n                move();\r\n\r\n                if(opts.flat) {\r\n                    //for the flat style, this is a change event\r\n                    self._updateOriginalInput(true);\r\n                }\r\n            });\r\n\r\n            this.$chooseButton.text(opts.texts.chooseText);\r\n            this.listenTo(this.$chooseButton,\"click\", function (e) {\r\n                //e.stopPropagation();\r\n                //e.preventDefault();\r\n                eventer.stop(e);\r\n\r\n                //if (browser.isIE && textInput.is(\":focus\")) {\r\n                //    textInput.trigger('change');\r\n                //}\r\n\r\n                if (isValid()) {\r\n                    self._updateOriginalInput(true);\r\n                    self.hide();\r\n                }\r\n            });\r\n          \r\n            this.listenTo(this.$toggleButton,\"click\", function (e) {\r\n                //e.stopPropagation();\r\n                //e.preventDefault();\r\n                eventer.stop(e);\r\n\r\n                ///self._states.showPaletteOnly = !self._states.showPaletteOnly;\r\n\r\n                // To make sure the Picker area is drawn on the right, next to the\r\n                // Palette area (and not below the palette), first move the Palette\r\n                // to the left to make space for the picker, plus 5px extra.\r\n                // The 'applyOptions' function puts the whole container back into place\r\n                // and takes care of the button-text and the sp-palette-only CSS class.\r\n                /*\r\n                if (!self._states.showPaletteOnly && !opts.flat) {\r\n                    self.$container.css('left', '-=' + (self.$pickerContainer.outerWidth(true) + 5));\r\n                }\r\n                */\r\n                self.stating(\"showPaletteOnly\",!self.stating(\"showPaletteOnly\"));\r\n                //self._applyOptions();\r\n            });\r\n\r\n            this.$alphaSlider.plugin(\"domx.indicator\", {\r\n                \"onmove\" :   function (dragX, dragY, e) {\r\n                    self._currentAlpha = (dragX / self._alphaWidth);\r\n                    self._isEmpty = false;\r\n                    if (e.shiftKey) {\r\n                        self._currentAlpha = Math.round(self._currentAlpha * 10) / 10;\r\n                    }\r\n\r\n                    move();\r\n                }, \r\n                \"onstart\" : dragStart, \r\n                \"onstop\" :dragStop\r\n            });\r\n\r\n            this.$slider.plugin(\"domx.indicator\", {\r\n                \"onmove\" :   function (dragX, dragY, e) {\r\n                    self._currentHue = parseFloat(dragY / self._slideHeight);\r\n                    self._isEmpty = false;\r\n                    if (!self.stating(\"showAlpha\")) {\r\n                        self._currentAlpha = 1;\r\n                    }\r\n                    move();\r\n                }, \r\n                \"onstart\" : dragStart, \r\n                \"onstop\" :dragStop\r\n            });\r\n\r\n            this.$dragger.plugin(\"domx.indicator\", {\r\n                \"onmove\" :   function (dragX, dragY, e) {\r\n\r\n                    // shift+drag should snap the movement to either the x or y axis.\r\n                    if (!e.shiftKey) {\r\n                        self._shiftMovementDirection = null;\r\n                    }\r\n                    else if (!self._shiftMovementDirection) {\r\n                        var oldDragX = self._currentSaturation * self._dragWidth;\r\n                        var oldDragY = self._dragHeight - (self._currentValue * self._dragHeight);\r\n                        var furtherFromX = Math.abs(dragX - oldDragX) > Math.abs(dragY - oldDragY);\r\n\r\n                        self._shiftMovementDirection = furtherFromX ? \"x\" : \"y\";\r\n                    }\r\n\r\n                    var setSaturation = !self._shiftMovementDirection || self._shiftMovementDirection === \"x\";\r\n                    var setValue = !self._shiftMovementDirection || self._shiftMovementDirection === \"y\";\r\n\r\n                    if (setSaturation) {\r\n                        self._currentSaturation = parseFloat(dragX / self._dragWidth);\r\n                    }\r\n                    if (setValue) {\r\n                        self._currentValue = parseFloat((self._dragHeight - dragY) / self._dragHeight);\r\n                    }\r\n\r\n                    self._isEmpty = false;\r\n                    if (!self.stating(\"showAlpha\")) {\r\n                        self._currentAlpha = 1;\r\n                    }\r\n\r\n                    move();\r\n                }, \r\n                \"onstart\" : dragStart, \r\n                \"onstop\" :dragStop\r\n            });\r\n\r\n            if (!!this._initialColor) {\r\n                this.set(this._initialColor);\r\n\r\n                // In case color was black - update the preview UI and set the format\r\n                // since the set function will not run (default color is black).\r\n                self._updateUI();\r\n                this._currentPreferredFormat = opts.preferredFormat || Color.parse(this._initialColor).format;\r\n\r\n                self._addColorToSelectionPalette(this._initialColor);\r\n            } else {\r\n                this._updateUI();\r\n            }\r\n\r\n            if (opts.flat) {\r\n                this.show();\r\n            }\r\n\r\n            function paletteElementClick(e) {\r\n                if (e.data && e.data.ignore) {\r\n                    self.set($(e.target).closest(\".sp-thumb-el\").data(\"color\"));\r\n                    move();\r\n                }\r\n                else {\r\n                    self.set($(e.target).closest(\".sp-thumb-el\").data(\"color\"));\r\n                    move();\r\n\r\n                    // If the picker is going to close immediately, a palette selection\r\n                    // is a change.  Otherwise, it's a move only.\r\n                    if (opts.hideAfterPaletteSelect) {\r\n                        self_updateOriginalInput(true);\r\n                        self.hide();\r\n                    } else {\r\n                        self._updateOriginalInput();\r\n                    }\r\n                }\r\n\r\n                return false;\r\n            }\r\n\r\n            var paletteEvent = browser.isIE ? \"mousedown.ColorPane\" : \"click.ColorPane touchstart.ColorPane\";\r\n            this.$paletteContainer.on(paletteEvent, \".sp-thumb-el\", paletteElementClick);\r\n            this.$initialColorContainer.on(paletteEvent, \".sp-thumb-el:nth-child(1)\", { ignore: true }, paletteElementClick);\r\n        },\r\n\r\n        revert :  function () {\r\n            this.set(this._colorOnShow, true);\r\n            this._updateOriginalInput(true);\r\n        },\r\n\r\n\r\n        get : function (opts) {\r\n            opts = opts || { };\r\n\r\n            if (this._allowEmpty && this._isEmpty) {\r\n                return null;\r\n            }\r\n\r\n            /*\r\n            return fromRatio({\r\n                h: currentHue,\r\n                s: currentSaturation,\r\n                v: currentValue,\r\n                a: Math.round(currentAlpha * 1000) / 1000\r\n            }, { format: opts.format || currentPreferredFormat });\r\n            */\r\n            return Color.parse({\r\n                h: this._currentHue * 360,\r\n                s: this._currentSaturation,\r\n                v: this._currentValue,\r\n                a: Math.round(this._currentAlpha * 1000) / 1000\r\n            });\r\n        },\r\n\r\n\r\n        set : function (color, ignoreFormatChange) {\r\n            var opts = this.options;\r\n\r\n            if (Color.equals(color, this.get())) {\r\n                // Update UI just in case a validation error needs\r\n                // to be cleared.\r\n                this._updateUI();\r\n                return;\r\n            }\r\n\r\n            var newColor, newHsv;\r\n            if (!color && this.stating(\"allowEmpty\")) {\r\n                this._isEmpty = true;\r\n            } else {\r\n                this._isEmpty = false;\r\n                newColor = Color.parse(color);\r\n                newHsv = newColor.toHsv();\r\n\r\n                this._currentHue = (newHsv.h % 360) / 360;\r\n                this._currentSaturation = newHsv.s;\r\n                this._currentValue = newHsv.v;\r\n                this._currentAlpha = newHsv.a;\r\n            }\r\n            this._updateUI();\r\n\r\n            if (newColor && newColor.isValid() && !ignoreFormatChange) {\r\n                this._currentPreferredFormat = opts.preferredFormat || newColor.getFormat();\r\n            }\r\n        },\r\n\r\n        _applyStates : function() {\r\n           var states = this._states ;\r\n\r\n            if (states.showPaletteOnly) {\r\n                states.showPalette = true;\r\n            }\r\n\r\n            this.$toggleButton.text(states.showPaletteOnly ? this.option(\"texts.togglePaletteMoreText\"): this.option(\"texts.togglePaletteLessText\"));\r\n\r\n\r\n            this.$container .toggleClass(\"sp-input-disabled\", !states.showInput)\r\n                            .toggleClass(\"sp-clear-enabled\", !!states.allowEmpty)\r\n                            .toggleClass(\"sp-alpha-enabled\", states.showAlpha)\r\n                            .toggleClass(\"sp-buttons-disabled\", !states.showButtons)\r\n                            .toggleClass(\"sp-palette-buttons-disabled\", !states.togglePaletteOnly)\r\n                            .toggleClass(\"sp-palette-disabled\", !states.showPalette)\r\n                            .toggleClass(\"sp-palette-only\", states.showPaletteOnly)\r\n                            .toggleClass(\"sp-initial-disabled\", !states.showInitial);\r\n\r\n            if (!states.allowEmpty) {\r\n                this.$clearButton.hide();\r\n            }\r\n\r\n            if (states.showPaletteOnly && !this.option(\"flat\")) {\r\n                this.$container.css('left', '-=' + (this.$pickerContainer.outerWidth(true) + 5));\r\n            }\r\n\r\n            this._dragWidth = this.$dragger.width();\r\n            this._dragHeight = this.$dragger.height();\r\n            this._dragHelperHeight = this.$dragHelper.height();\r\n            this._slideWidth = this.$slider.width();\r\n            this._slideHeight = this.$slider.height();\r\n            this._slideHelperHeight = this.$slideHelper.height();\r\n            this._alphaWidth = this.$alphaSlider.width();\r\n            this._alphaSlideHelperWidth = this.$alphaSlideHelper.width();\r\n        },\r\n\r\n        stating : function(name,value) {\r\n        \tif (value !== undefined) {\r\n        \t\tthis._states[name] = value;\r\n        \t\tthis._applyStates();\r\n        \t} else {\r\n        \t\treturn this._states[name];\r\n        \t}\r\n        },\r\n\r\n        reflow : function () {\r\n            //if (!this._visible) {\r\n            //    return; // Calculations would be useless and wouldn't be reliable anyways\r\n            //}\r\n\r\n\r\n            if (!this.option(\"flat\")) {\r\n                this.$container.css(\"position\", \"absolute\");\r\n                var offset = this.option(\"offset\"); \r\n                if (offset) {\r\n                    this.$container.offset(offset);\r\n                } else {\r\n                    this.$container.offset(popups.calcOffset(this.$container[0], this.$offsetElement[0]));\r\n                }\r\n            }\r\n\r\n            this._updateHelperLocations();\r\n\r\n            if (this.stating(\"showPalette\")) {\r\n                this._drawPalette();\r\n            }\r\n\r\n            //this.$el.trigger('reflow');\r\n        },\r\n\r\n        toggle : function () {\r\n            if (this._visible) {\r\n                this.hide();\r\n            } else {\r\n                this.show();\r\n            }\r\n        },\r\n\r\n        show : function () {\r\n            if (this._visible) {\r\n                this.reflow();\r\n                return;\r\n            }\r\n            \r\n            this._visible = true;\r\n\r\n            //$(doc).on(\"keydown.ColorPane\", onkeydown);\r\n            //$(doc).on(\"click.ColorPane\", clickout);\r\n            //$(window).on(\"resize.ColorPane\", resize);\r\n            this.$replacer.addClass(\"sp-active\");\r\n            this.$container.removeClass(\"sp-hidden\");\r\n\r\n            this.reflow();\r\n            \r\n            this._updateUI();\r\n\r\n            this._colorOnShow = this.get();\r\n\r\n            //this._drawInitial();\r\n            \r\n        },\r\n        hide : function () {\r\n            // Return if hiding is unnecessary\r\n            if (!this._visible || this._flat) { return; }\r\n            this._visible = false;\r\n\r\n            //$(doc).off(\"keydown.ColorPane\", onkeydown);\r\n            //$(doc).off(\"click.ColorPane\", clickout);\r\n            //$(window).off(\"resize.ColorPane\", resize);\r\n\r\n            this.$replacer.removeClass(\"sp-active\");\r\n            this.$container.addClass(\"sp-hidden\");\r\n\r\n        },\r\n\r\n        destroy : function () {\r\n            this.$el.show();\r\n            this.$offsetElement.off(\"click.ColorPane touchstart.ColorPane\");\r\n            this.$container.remove();\r\n            this.$replacer.remove();\r\n            //pickers[spect.id] = null;\r\n        }\r\n\r\n    });\r\n\r\n\r\n    plugins.register(ColorPane);\r\n\r\n    ColorPane.localization = {};\r\n\r\n    return colors.ColorPane = ColorPane;\r\n\r\n});\ndefine('skylark-domx-colors/colorer',[\r\n\t\"./colors\",\r\n\t\"./ColorPane\"\r\n],function(colors,ColorPane){\r\n\tfunction colorer(elmInput,options) {\r\n\t\treturn new ColorPane(elmInput,options);\r\n\t}\r\n\r\n\treturn colors.colorer = colorer;\r\n});\ndefine('skylark-domx-colors/ColorPalette',[\r\n\t\"./colors\"\r\n],function(colors){\r\n\t\r\n});\ndefine('skylark-domx-colors/ColorPicker',[\r\n    \"./colors\"\r\n],function(colors){\r\n    \r\n});\ndefine('skylark-domx-colors/i18n/localization',[],function(){\r\n\treturn {};\r\n});\ndefine('skylark-domx-colors/i18n/texts_ja',[\r\n\t\"./localization\"\r\n],function(localization) {\r\n    return localization[\"ja\"] = {\r\n        cancelText: \"中止\",\r\n        chooseText: \"選択\"\r\n    };\r\n});\ndefine('skylark-domx-colors/i18n/texts_zh-cn',[\r\n    \"./localization\"\r\n],function(localization) {\r\n    return localization[\"zh-cn\"] = {\r\n        cancelText: \"取消\",\r\n        chooseText: \"选择\",\r\n        clearText: \"清除\",\r\n        togglePaletteMoreText: \"更多选项\",\r\n        togglePaletteLessText: \"隐藏\",\r\n        noColorSelectedText: \"尚未选择任何颜色\"\r\n    };\r\n});\r\n\ndefine('skylark-domx-colors/i18n/texts_zh-tw',[\r\n    \"./localization\"\r\n],function(localization) {\r\n    return localization[\"zh-tw\"] = {\r\n        cancelText: \"取消\",\r\n        chooseText: \"選擇\",\r\n        clearText: \"清除\",\r\n        togglePaletteMoreText: \"更多選項\",\r\n        togglePaletteLessText: \"隱藏\",\r\n        noColorSelectedText: \"尚未選擇任何顏色\"\r\n    };\r\n\r\n});\ndefine('skylark-domx-colors/main',[\r\n\t\"skylark-domx-query\",\r\n\t\"./colors\",\r\n    \"./colorer\",\r\n    \"./ColorPalette\",\r\n    \"./ColorPicker\",\r\n    \"./ColorPane\",\r\n    \"./i18n/texts_ja\",\r\n    \"./i18n/texts_zh-cn\",\r\n    \"./i18n/texts_zh-tw\"\r\n], function($,colors,colorer) {\r\n   \r\n   $.fn.colorer = $.wraps.wrapper_every_act(colorer,colors);\r\n\r\n   return colors;\r\n\r\n});\r\n\ndefine('skylark-domx-colors', ['skylark-domx-colors/main'], function (main) { return main; });\n\n"]}